{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"About \u00b6 DOSBox Staging is a modern continuation of DOSBox with advanced features and current development practices. It is meant as a (mostly) drop-in replacement for older DOSBox versions\u2014your existing configurations will continue to work, but you will have access to many advanced features. Because DOSBox Staging comes with sensible defaults, you\u2019ll need to write a lot less configuration than with older DOSBox versions. Most games and application software require no tweaking and will work fine with the stock settings. However, the extensive configuration options and advanced features are available if you wish to dwelve deeper. Goals \u00b6 Improve the out-of-the-box experience for new users. Encourage new contributors by removing barriers to entry. Implement new features and quality-of-life improvements. Fix, clean up, and integrate notable community-developed patches that fill valuable general-purpose and/or gaming-focused emulation holes (provided they don\u2019t impact broader compatibility, performance, stability, or code maintainability). Prioritize the quality of newly written code to minimize technical debt and ease future maintenance, which generally means following the Staging Coding Style Guide and being aware of best practices, like the C++ Core Guidelines . Deliver a consistent cross-platform experience. Leverage upstream and community developments in DOSBox. Focus on supporting up-to-date, current operating systems and modern hardware. A summary of technical and feature differences is here . We plan to add the features listed in the backlog . Non-goals \u00b6 Support old operating systems (Windows 9x/Me, OS/2, and Mac OS X 10.4) and limited CPU/memory hardware, which are constraints DOSBox continues to support. Support the use of Windows 9x/Me in the emulator. Windows 9x/Me emulation is supported by projects such as QEMU and VirtualBox , although DOSBox forks like DOSBox-X and DOSBox Pure also support this. This may change if wanted by the DOSBox Staging community in general. Pursue hardware accuracy when it impacts the above goals or detracts from the source material, although config options may be added in case of issues. If you need perfect emulation in terms of accuracy, you may look at PCem and its derivatives like 86Box and PCBox , which are examples of cycle-accurate emulators. Be the fastest DOS emulator on x86 hardware. Linux users interested in emulation speed should look at dosemu2 . Act as a general-purpose DOS operating system. For that, there is FreeDOS . Relationship to DOSBox \u00b6 DOSBox Staging is separate from and not supported by the SourceForge-hosted DOSBox project or its development team, the DOSBox Team. We acknowledge and are thankful for the work shared by all DOSBox contributors. Team \u00b6 This project is maintained by the DOSBox Staging team .","title":"About"},{"location":"about/#about","text":"DOSBox Staging is a modern continuation of DOSBox with advanced features and current development practices. It is meant as a (mostly) drop-in replacement for older DOSBox versions\u2014your existing configurations will continue to work, but you will have access to many advanced features. Because DOSBox Staging comes with sensible defaults, you\u2019ll need to write a lot less configuration than with older DOSBox versions. Most games and application software require no tweaking and will work fine with the stock settings. However, the extensive configuration options and advanced features are available if you wish to dwelve deeper.","title":"About"},{"location":"about/#goals","text":"Improve the out-of-the-box experience for new users. Encourage new contributors by removing barriers to entry. Implement new features and quality-of-life improvements. Fix, clean up, and integrate notable community-developed patches that fill valuable general-purpose and/or gaming-focused emulation holes (provided they don\u2019t impact broader compatibility, performance, stability, or code maintainability). Prioritize the quality of newly written code to minimize technical debt and ease future maintenance, which generally means following the Staging Coding Style Guide and being aware of best practices, like the C++ Core Guidelines . Deliver a consistent cross-platform experience. Leverage upstream and community developments in DOSBox. Focus on supporting up-to-date, current operating systems and modern hardware. A summary of technical and feature differences is here . We plan to add the features listed in the backlog .","title":"Goals"},{"location":"about/#non-goals","text":"Support old operating systems (Windows 9x/Me, OS/2, and Mac OS X 10.4) and limited CPU/memory hardware, which are constraints DOSBox continues to support. Support the use of Windows 9x/Me in the emulator. Windows 9x/Me emulation is supported by projects such as QEMU and VirtualBox , although DOSBox forks like DOSBox-X and DOSBox Pure also support this. This may change if wanted by the DOSBox Staging community in general. Pursue hardware accuracy when it impacts the above goals or detracts from the source material, although config options may be added in case of issues. If you need perfect emulation in terms of accuracy, you may look at PCem and its derivatives like 86Box and PCBox , which are examples of cycle-accurate emulators. Be the fastest DOS emulator on x86 hardware. Linux users interested in emulation speed should look at dosemu2 . Act as a general-purpose DOS operating system. For that, there is FreeDOS .","title":"Non-goals"},{"location":"about/#relationship-to-dosbox","text":"DOSBox Staging is separate from and not supported by the SourceForge-hosted DOSBox project or its development team, the DOSBox Team. We acknowledge and are thankful for the work shared by all DOSBox contributors.","title":"Relationship to DOSBox"},{"location":"about/#team","text":"This project is maintained by the DOSBox Staging team .","title":"Team"},{"location":"blog/","text":"","title":"Index"},{"location":"documentation/configuration/","text":"","title":"Configuration"},{"location":"documentation/introduction/","text":"Introduction \u00b6 What is DOSBox Staging? \u00b6 DOSBox Staging is a tool that allows you to run software written for the MS-DOS operating system and the Windows 3.1x operating environment on modern computers. The emulation for MS-DOS is built in; you don\u2019t need to install the DOS operating system itself. A wide range of IBM PC compatible hardware can be emulated to a high degree of accuracy, including Hercules, CGA, EGA, VGA and SVGA display adapters; audio subsystems such as the PC speaker, Creative Music System, various AdLib and Sound Blaster models, the ultra-rare AdLib Gold 1000 (including the optional surround module), Gravis UltraSound, Tandy 1000 audio, Roland MT-32, and General MIDI among a few others. Although DOSBox was initially intended for running DOS games only, now it has good compatibility with application programs too. It gives you access to the vast catalogue of DOS programs from the early 1980s IBM Personal Computer XT period to the Pentium era up until the late 90s. It can also emulate the popular-in-its-day Tandy 1000 PC clone, the short-lived IBM PCjr machine, and it can even load early self-booting \u201cPC booter\u201d games. Just imagine how expensive and impractical it would be to collect all this hardware and keep them in working order! Besides the convenience factor, old hardware isn\u2019t getting any younger, and how long until all old electronics fade into oblivion? At that point, all we\u2019ll be left with will be emulation. Therefore, projects like DOSBox are crucial in preserving a significant period of our collective digital history, keeping the MS-DOS legacy alive to ensure future generations can study, enjoy, and learn from all the great games and applications of the past. Is it an emulator? \u00b6 Not quite. \u201cTrue\u201d computer emulators are built to mimic the entire target system as closely as possible at the hardware level\u2014ideally, the emulated system should be indistinguishable from the real thing. When using such an emulator, you\u2019d need to install an operating system of your choosing onto the emulated hardware before running games and applications. Naturally, you wouldn\u2019t be restricted to just MS-DOS; you could install any operating system supported by the hardware you\u2019re emulating, such as OS/2, BeOS or 386BSD in case of an IBM PC compatible machine. DOSBox, on the other hand, aims to emulate only the MS-DOS operating system, plus a range of IBM PC compatible hardware components to allow the running of MS-DOS software. The minimum goal is that supported software should run at least as well as on a real machine, but DOSBox can do better and offer an improved experience in many cases. It emphasizes the faithful emulation of computer subsystems critical to gaming (audio and video cards, in particular) while taking a more relaxed approach where ultimate fidelity does not matter as much (e.g., emulating hard drive storage). Ultimately, this hybrid approach leads to a more user-friendly MS-DOS experience and an increased emulator performance. To elaborate on the differences between the two approaches, let\u2019s delve into a bit more detail! Complete computer emulation \u00b6 To play a DOS game in an IBM PC compatible emulator such as PCem or 86Box , you would need to start by selecting a motherboard, CPU, graphics card, sound card, and hard drive. After this, you would need to format the hard drive, install MS-DOS from virtual floppy images, set up video and sound card drivers, and only then could you finally proceed to installing and playing the game. Naturally, this being a complete computer emulator, every time you want to play the game, you would need to turn on the emulated machine, wait until it performs its power-on self-test and boots into MS-DOS, and then you could launch the game. If you want to switch to a different CPU or sound card later, you must redo some of these setup steps. In the end, you might end up with many virtual machines for all the different hardware combinations you want to use. The DOSBox way \u00b6 With DOSBox, it\u2019s a lot simpler: in most cases, you\u2019ll only need to copy the game files into a folder and possibly write a few lines of configuration. No booting time is involved; the game will start immediately, not \u201cknowing\u201d any better if it\u2019s running inside DOSBox or on period-accurate hardware from the 1980s or 90s! Need a different sound card? Just change a line or two in the config\u2014DOSBox will take care of the rest. Is the processor too fast or slow? Change a single config value, or better yet, adjust the speed while playing the game. DOSBox makes it easy to experiment with various settings (most DOS games offer a variety of sound and graphics options well worth playing with) and to maintain an extensive collection of games, each fine-tuned for the best possible experience, according to your preferences. A bit of history \u00b6 The story of DOSBox began around the year 2000. Before Windows 2000 and XP, earlier versions of Windows were based on MS-DOS, naturally leading to excellent compatibility with DOS software. Windows 2000 (released at the end of 1999) had dropped most of this support, keeping only a rudimentary compatibility layer that was not enough to run many earlier DOS applications satisfactorily, in particular games. Two Dutch programmers, Peter \u201cQbix\u201d Veenstra and Sjoerd \u201cHarekiet\u201d van der Berg , took it upon themselves to remedy this precarious situation with the original goal of bringing DOS gaming back to Windows. The fruit of their efforts, DOSBox v0.1** (the first public version), was released on 31 January 2002. In the years to come, DOSBox became the de facto tool to run MS-DOS games on various modern platforms. Virtually all commercial re-releases of old games on online gaming marketplaces use DOSBox under the hood. From 2010 onwards, development slowed down, leading to a proliferation of custom builds, forks, and spin-off projects. Some had been more successful and longer-lived than others, but ultimately this led to the fragmentation of the community and a lack of direction regarding where the project was going. DOSBox Staging was started in 2020 by Patryk \u201cdreamer\u201d Obara and kcgen as a modern continuation of the original DOSBox to unify these efforts, bring modern development practices to the project with long-term maintainability in mind, and revitalise DOSBox development in general. Subsequently, the project got the blessing of original DOSBox author Sjoerd \u201cHarekiet\u201d van der Berg , and if you\u2019re reading this, it means it\u2019s doing rather well!","title":"Introduction"},{"location":"documentation/introduction/#introduction","text":"","title":"Introduction"},{"location":"documentation/introduction/#what-is-dosbox-staging","text":"DOSBox Staging is a tool that allows you to run software written for the MS-DOS operating system and the Windows 3.1x operating environment on modern computers. The emulation for MS-DOS is built in; you don\u2019t need to install the DOS operating system itself. A wide range of IBM PC compatible hardware can be emulated to a high degree of accuracy, including Hercules, CGA, EGA, VGA and SVGA display adapters; audio subsystems such as the PC speaker, Creative Music System, various AdLib and Sound Blaster models, the ultra-rare AdLib Gold 1000 (including the optional surround module), Gravis UltraSound, Tandy 1000 audio, Roland MT-32, and General MIDI among a few others. Although DOSBox was initially intended for running DOS games only, now it has good compatibility with application programs too. It gives you access to the vast catalogue of DOS programs from the early 1980s IBM Personal Computer XT period to the Pentium era up until the late 90s. It can also emulate the popular-in-its-day Tandy 1000 PC clone, the short-lived IBM PCjr machine, and it can even load early self-booting \u201cPC booter\u201d games. Just imagine how expensive and impractical it would be to collect all this hardware and keep them in working order! Besides the convenience factor, old hardware isn\u2019t getting any younger, and how long until all old electronics fade into oblivion? At that point, all we\u2019ll be left with will be emulation. Therefore, projects like DOSBox are crucial in preserving a significant period of our collective digital history, keeping the MS-DOS legacy alive to ensure future generations can study, enjoy, and learn from all the great games and applications of the past.","title":"What is DOSBox Staging?"},{"location":"documentation/introduction/#is-it-an-emulator","text":"Not quite. \u201cTrue\u201d computer emulators are built to mimic the entire target system as closely as possible at the hardware level\u2014ideally, the emulated system should be indistinguishable from the real thing. When using such an emulator, you\u2019d need to install an operating system of your choosing onto the emulated hardware before running games and applications. Naturally, you wouldn\u2019t be restricted to just MS-DOS; you could install any operating system supported by the hardware you\u2019re emulating, such as OS/2, BeOS or 386BSD in case of an IBM PC compatible machine. DOSBox, on the other hand, aims to emulate only the MS-DOS operating system, plus a range of IBM PC compatible hardware components to allow the running of MS-DOS software. The minimum goal is that supported software should run at least as well as on a real machine, but DOSBox can do better and offer an improved experience in many cases. It emphasizes the faithful emulation of computer subsystems critical to gaming (audio and video cards, in particular) while taking a more relaxed approach where ultimate fidelity does not matter as much (e.g., emulating hard drive storage). Ultimately, this hybrid approach leads to a more user-friendly MS-DOS experience and an increased emulator performance. To elaborate on the differences between the two approaches, let\u2019s delve into a bit more detail!","title":"Is it an emulator?"},{"location":"documentation/introduction/#complete-computer-emulation","text":"To play a DOS game in an IBM PC compatible emulator such as PCem or 86Box , you would need to start by selecting a motherboard, CPU, graphics card, sound card, and hard drive. After this, you would need to format the hard drive, install MS-DOS from virtual floppy images, set up video and sound card drivers, and only then could you finally proceed to installing and playing the game. Naturally, this being a complete computer emulator, every time you want to play the game, you would need to turn on the emulated machine, wait until it performs its power-on self-test and boots into MS-DOS, and then you could launch the game. If you want to switch to a different CPU or sound card later, you must redo some of these setup steps. In the end, you might end up with many virtual machines for all the different hardware combinations you want to use.","title":"Complete computer emulation"},{"location":"documentation/introduction/#the-dosbox-way","text":"With DOSBox, it\u2019s a lot simpler: in most cases, you\u2019ll only need to copy the game files into a folder and possibly write a few lines of configuration. No booting time is involved; the game will start immediately, not \u201cknowing\u201d any better if it\u2019s running inside DOSBox or on period-accurate hardware from the 1980s or 90s! Need a different sound card? Just change a line or two in the config\u2014DOSBox will take care of the rest. Is the processor too fast or slow? Change a single config value, or better yet, adjust the speed while playing the game. DOSBox makes it easy to experiment with various settings (most DOS games offer a variety of sound and graphics options well worth playing with) and to maintain an extensive collection of games, each fine-tuned for the best possible experience, according to your preferences.","title":"The DOSBox way"},{"location":"documentation/introduction/#a-bit-of-history","text":"The story of DOSBox began around the year 2000. Before Windows 2000 and XP, earlier versions of Windows were based on MS-DOS, naturally leading to excellent compatibility with DOS software. Windows 2000 (released at the end of 1999) had dropped most of this support, keeping only a rudimentary compatibility layer that was not enough to run many earlier DOS applications satisfactorily, in particular games. Two Dutch programmers, Peter \u201cQbix\u201d Veenstra and Sjoerd \u201cHarekiet\u201d van der Berg , took it upon themselves to remedy this precarious situation with the original goal of bringing DOS gaming back to Windows. The fruit of their efforts, DOSBox v0.1** (the first public version), was released on 31 January 2002. In the years to come, DOSBox became the de facto tool to run MS-DOS games on various modern platforms. Virtually all commercial re-releases of old games on online gaming marketplaces use DOSBox under the hood. From 2010 onwards, development slowed down, leading to a proliferation of custom builds, forks, and spin-off projects. Some had been more successful and longer-lived than others, but ultimately this led to the fragmentation of the community and a lack of direction regarding where the project was going. DOSBox Staging was started in 2020 by Patryk \u201cdreamer\u201d Obara and kcgen as a modern continuation of the original DOSBox to unify these efforts, bring modern development practices to the project with long-term maintainability in mind, and revitalise DOSBox development in general. Subsequently, the project got the blessing of original DOSBox author Sjoerd \u201cHarekiet\u201d van der Berg , and if you\u2019re reading this, it means it\u2019s doing rather well!","title":"A bit of history"},{"location":"documentation/regional/","text":"","title":"Regional"},{"location":"documentation/shortcuts/","text":"","title":"Shortcuts"},{"location":"documentation/audio/","text":"Sound \u00b6 DOSBox is capable of emulating several sound devices. By emulating the hardware the user can utilize whatever audio device they have installed in their PC, while the DOS Game or Application believes it is running on the emulated hardware. Sound was sometimes difficult to set up in the DOS era. Unlike Windows, DOS did not keep a list of the system\u2019s sound devices, nor did it expose generic drivers for them. Software had to include separate support for each sound device it wanted to give the users the option of using. If a game did not support a user\u2019s audio hardware, no sound was possible. And the game had to be configured with the memory addresses of the hardware by hand. Also, different devices supported different features, resulting in games that could sound very different (maybe high-quality music on one card, but voice-acting on another) depending on the hardware available. Thankfully, DOSBox can emulate all the most popular sound systems of the DOS era, so one can usually find something that sounds good. Most of the sound devices are capable of existing inside the same computer at the same time, so when configuring DOSBox sound you need to think of them as separate devices that can be enabled or disabled. Sound devices that are not in use do not use many resources, so you don\u2019t gain much in the way of performance by reducing the number of sound devices enabled. A game will likely only use a single device at a time anyway. (The one notable exception being routing music and sound effects through different devices, which was common for people with both a Sound Blaster and a separate MIDI device.) DOSBox also makes sure the appropriate environment variables are defined for each device, so game audio device auto-detection usually works, if the game attempts it. DOSBox\u2019s output to your real computer\u2019s sound system is configured under the mixer category. Each emulatable device has its own configuration section. Note that almost all sound devices have a configuration setting to enable or disable them, as well as one for the sample rate of the emulation. The sample rate of a device must never exceed the rate setting under the mixer heading, as this will cause undefined behavior. DOSBox can emulate the following devices. Although the sound quality you will get depends heavily on your configuration and what the software you are running supports, they are listed here in roughly ascending order of audio processing power.","title":"Sound"},{"location":"documentation/audio/#sound","text":"DOSBox is capable of emulating several sound devices. By emulating the hardware the user can utilize whatever audio device they have installed in their PC, while the DOS Game or Application believes it is running on the emulated hardware. Sound was sometimes difficult to set up in the DOS era. Unlike Windows, DOS did not keep a list of the system\u2019s sound devices, nor did it expose generic drivers for them. Software had to include separate support for each sound device it wanted to give the users the option of using. If a game did not support a user\u2019s audio hardware, no sound was possible. And the game had to be configured with the memory addresses of the hardware by hand. Also, different devices supported different features, resulting in games that could sound very different (maybe high-quality music on one card, but voice-acting on another) depending on the hardware available. Thankfully, DOSBox can emulate all the most popular sound systems of the DOS era, so one can usually find something that sounds good. Most of the sound devices are capable of existing inside the same computer at the same time, so when configuring DOSBox sound you need to think of them as separate devices that can be enabled or disabled. Sound devices that are not in use do not use many resources, so you don\u2019t gain much in the way of performance by reducing the number of sound devices enabled. A game will likely only use a single device at a time anyway. (The one notable exception being routing music and sound effects through different devices, which was common for people with both a Sound Blaster and a separate MIDI device.) DOSBox also makes sure the appropriate environment variables are defined for each device, so game audio device auto-detection usually works, if the game attempts it. DOSBox\u2019s output to your real computer\u2019s sound system is configured under the mixer category. Each emulatable device has its own configuration section. Note that almost all sound devices have a configuration setting to enable or disable them, as well as one for the sample rate of the emulation. The sample rate of a device must never exceed the rate setting under the mixer heading, as this will cause undefined behavior. DOSBox can emulate the following devices. Although the sound quality you will get depends heavily on your configuration and what the software you are running supports, they are listed here in roughly ascending order of audio processing power.","title":"Sound"},{"location":"documentation/audio/capture/","text":"Audio capture \u00b6","title":"Audio capture"},{"location":"documentation/audio/capture/#audio-capture","text":"","title":"Audio capture"},{"location":"documentation/audio/mixer/","text":"","title":"Mixer"},{"location":"documentation/audio/audio-devices/covox/","text":"Covox variants \u00b6 Covox Speech Thing \u00b6 Disney Sound Source \u00b6 Covox introduced the Covox Speech Thing parallel port sound dongle in 1987, while Disney introduced the Disney Sound Source in 1990, which is backwards compatible with the Covox, but adds a FIFO buffer and logic to reduce CPU overhead. These parallel port devices only provide a DAC at a low frequency for playback of digital samples, and has no FM sound. DOSBox-X provides emulation for the Disney Sound Source, which is effectively backward compatible with the earlier Covox Speech Thing. Also games compatible with the Intersound MDO should work with this, as it is effectively a Covox Speech Thing clone. Stereo-on-1 DAC \u00b6","title":"Covox variants"},{"location":"documentation/audio/audio-devices/covox/#covox-variants","text":"","title":"Covox variants"},{"location":"documentation/audio/audio-devices/covox/#covox-speech-thing","text":"","title":"Covox Speech Thing"},{"location":"documentation/audio/audio-devices/covox/#disney-sound-source","text":"Covox introduced the Covox Speech Thing parallel port sound dongle in 1987, while Disney introduced the Disney Sound Source in 1990, which is backwards compatible with the Covox, but adds a FIFO buffer and logic to reduce CPU overhead. These parallel port devices only provide a DAC at a low frequency for playback of digital samples, and has no FM sound. DOSBox-X provides emulation for the Disney Sound Source, which is effectively backward compatible with the earlier Covox Speech Thing. Also games compatible with the Intersound MDO should work with this, as it is effectively a Covox Speech Thing clone.","title":"Disney Sound Source"},{"location":"documentation/audio/audio-devices/covox/#stereo-on-1-dac","text":"","title":"Stereo-on-1 DAC"},{"location":"documentation/audio/audio-devices/gravis/","text":"Gravis UltraSound \u00b6 The Gravis UltraSound was an advanced synthesizer released by an unlikely manufacturer: Canadian joystick company Advanced Gravis. Its audio was far ahead of any other consumer device of the time, supporting wave-table synthesis, stereo sound, 14-channel playback at 44.1 KHz or a whopping 32 channels of playback at 19.2 KHz. However, the Ultrasound eschewed any attempt at backwards-compatibility with AdLib or Soundblaster cards. Programs had to be written to specifically take advantage of its capabilities. Many DOS users kept a Sound Blaster in their PC in addition to an Ultrasound, in case they needed to run a program that did not support the more advanced card. (And in DOSBox, this can be imitated by turning on both devices in your configuration file, which is recommended.) One quirk of the Ultrasound is that, unlike most synthesizers, it did not come with any voices pre-installed on the card. All voices had to be installed from disk either at driver load time or by the application. Because of this, a set of drivers and \u201cpatch files\u201d is needed in order to use the Ultrasound in DOSBox. Due to incompatibilities between the license of the patch files and DOSBox\u2019s GPL license, these files cannot be distributed with DOSBox, so you will need to download them from another website: The Gravis Ultrasound is configured under the gus category. It has several options, which are explained in the comments in the configuration file. Of particular note is the ultradir option, which must be set to the path to the patch files inside DOSBox. (Which is likely not the same as the path on your real hard drive.)","title":"Gravis UltraSound"},{"location":"documentation/audio/audio-devices/gravis/#gravis-ultrasound","text":"The Gravis UltraSound was an advanced synthesizer released by an unlikely manufacturer: Canadian joystick company Advanced Gravis. Its audio was far ahead of any other consumer device of the time, supporting wave-table synthesis, stereo sound, 14-channel playback at 44.1 KHz or a whopping 32 channels of playback at 19.2 KHz. However, the Ultrasound eschewed any attempt at backwards-compatibility with AdLib or Soundblaster cards. Programs had to be written to specifically take advantage of its capabilities. Many DOS users kept a Sound Blaster in their PC in addition to an Ultrasound, in case they needed to run a program that did not support the more advanced card. (And in DOSBox, this can be imitated by turning on both devices in your configuration file, which is recommended.) One quirk of the Ultrasound is that, unlike most synthesizers, it did not come with any voices pre-installed on the card. All voices had to be installed from disk either at driver load time or by the application. Because of this, a set of drivers and \u201cpatch files\u201d is needed in order to use the Ultrasound in DOSBox. Due to incompatibilities between the license of the patch files and DOSBox\u2019s GPL license, these files cannot be distributed with DOSBox, so you will need to download them from another website: The Gravis Ultrasound is configured under the gus category. It has several options, which are explained in the comments in the configuration file. Of particular note is the ultradir option, which must be set to the path to the patch files inside DOSBox. (Which is likely not the same as the path on your real hard drive.)","title":"Gravis UltraSound"},{"location":"documentation/audio/audio-devices/innovation/","text":"Innovation SSI-2001 \u00b6 Released in April 1989 by Innovation Computer Corporation, utilizing the MOS 6581 (aka SID) chip, as found in the Commodore 64. Very few games support this sound option. Configuration parameters \u00b6 You can set the parameters of the Innovation SSI-2001 card in the [innovation] configuration section. sidmodel \u00b6 Model of chip to emulate in the Innovation SSI-2001 card: none \u2013 Disables the card (default). auto \u2013 Selects the 6581 chip. 6581 \u2013 The original chip, known for its bassy and rich character. 8580 \u2013 A later revision that more closely matched the SID specification. It fixed the 6581\u2019s DC bias and is less prone to distortion. The 8580 is an option on reproduction cards, like the DuoSID. sidclock \u00b6 The SID chip\u2019s clock frequency, which is jumperable on reproduction cards: default \u2013 Uses 0.895 MHz, per the original SSI-2001 card. c64ntsc \u2013 Uses 1.023 MHz, per NTSC Commodore PCs and the DuoSID. c64pal \u2013 Uses 0.985 MHz, per PAL Commodore PCs and the DuoSID. hardsid \u2013 Uses 1.000 MHz, available on the DuoSID. sidport \u00b6 The IO port address of the Innovation SSI-2001. Possible values: 240 , 260 , 280 (default), 2a0 , 2c0 . 6581filter \u00b6 The SID\u2019s analog filtering meant that each chip was physically unique. Adjusts the 6581\u2019s filtering strength as a percent from 0 to 100 (defaults to 50). 8580filter \u00b6 Adjusts the 8580\u2019s filtering strength as a percent from 0 to 100 (defaults to 50). innovation_filter \u00b6 Filter for the Innovation audio output: off : Don\u2019t filter the output (default). <custom> : Custom filter definition; see sb_filter for details.","title":"Innovation SSI-2001"},{"location":"documentation/audio/audio-devices/innovation/#innovation-ssi-2001","text":"Released in April 1989 by Innovation Computer Corporation, utilizing the MOS 6581 (aka SID) chip, as found in the Commodore 64. Very few games support this sound option.","title":"Innovation SSI-2001"},{"location":"documentation/audio/audio-devices/innovation/#configuration-parameters","text":"You can set the parameters of the Innovation SSI-2001 card in the [innovation] configuration section.","title":"Configuration parameters"},{"location":"documentation/audio/audio-devices/innovation/#sidmodel","text":"Model of chip to emulate in the Innovation SSI-2001 card: none \u2013 Disables the card (default). auto \u2013 Selects the 6581 chip. 6581 \u2013 The original chip, known for its bassy and rich character. 8580 \u2013 A later revision that more closely matched the SID specification. It fixed the 6581\u2019s DC bias and is less prone to distortion. The 8580 is an option on reproduction cards, like the DuoSID.","title":"sidmodel"},{"location":"documentation/audio/audio-devices/innovation/#sidclock","text":"The SID chip\u2019s clock frequency, which is jumperable on reproduction cards: default \u2013 Uses 0.895 MHz, per the original SSI-2001 card. c64ntsc \u2013 Uses 1.023 MHz, per NTSC Commodore PCs and the DuoSID. c64pal \u2013 Uses 0.985 MHz, per PAL Commodore PCs and the DuoSID. hardsid \u2013 Uses 1.000 MHz, available on the DuoSID.","title":"sidclock"},{"location":"documentation/audio/audio-devices/innovation/#sidport","text":"The IO port address of the Innovation SSI-2001. Possible values: 240 , 260 , 280 (default), 2a0 , 2c0 .","title":"sidport"},{"location":"documentation/audio/audio-devices/innovation/#6581filter","text":"The SID\u2019s analog filtering meant that each chip was physically unique. Adjusts the 6581\u2019s filtering strength as a percent from 0 to 100 (defaults to 50).","title":"6581filter"},{"location":"documentation/audio/audio-devices/innovation/#8580filter","text":"Adjusts the 8580\u2019s filtering strength as a percent from 0 to 100 (defaults to 50).","title":"8580filter"},{"location":"documentation/audio/audio-devices/innovation/#innovation_filter","text":"Filter for the Innovation audio output: off : Don\u2019t filter the output (default). <custom> : Custom filter definition; see sb_filter for details.","title":"innovation_filter"},{"location":"documentation/audio/audio-devices/midi/","text":"MIDI \u00b6 Roland MT-32 \u00b6 The Roland synthesizers, particularly the MT-32, are worth mentioning separately. Many DOS games included separate support for the MT-32 (or the MT-100, LAPC-I, CM-32L, or CM-64) in addition to basic General MIDI support. People who have a real Roland MT-32 or a software synthesizer that emulates one can take advantage of this support. Since DOSBox only passes along MIDI data to your synthesizer without looking at it, simply route DOSBox\u2019s General MIDI to your Roland and configure your DOS software to use Roland mode. A Roland MT-32 can be connected to the PC using a USB to MIDI adapter. The MT-32 output can be connected to the line-in on a sound card. Dosbox can be configured to use the MT-32 for music when it is connected this way. At the Dosbox command prompt, type mixer /listmidi to get a list of the midi devices attached to the machine. Locate the USB midi adapter in the list and note the number that it is associated with. Change Dosbox.conf\u2019s midiconfig = id of MIDI device to the ID of the USB midi device (e.g. midiconfig=0) Once that is done, the MT-32 should operate. General MIDI \u00b6 General MIDI isn\u2019t a specific piece of hardware so much as a standard that has been supported by various sound cards (and other devices such as mixers, instruments, lighting control panels, etc\u2026) throughout computing history. DOSBox is able to emulate MIDI in either regular or uart modes. Since MIDI support is still common on computers, DOSBox passes MIDI data along to any MIDI synthesizer installed on your system rather than trying to emulate a particular device. General MIDI in DOSBox sounds exactly like any other program on your host computer that plays MIDI files because it is generating its output through the same device. You can think of the General MIDI as more a pass-though interface than a piece of emulated hardware. General MIDI is configured under the midi category. There are several options, which are explained briefly in the comments in the configuration file and at greater length in the README file. Owners of Yamaha MIDI Synthesizers and other external synthesizers may find this guide useful, while those without may want to use the guide to software emulation of MIDI instead. FluidSynth \u00b6 External MIDI devices \u00b6","title":"MIDI"},{"location":"documentation/audio/audio-devices/midi/#midi","text":"","title":"MIDI"},{"location":"documentation/audio/audio-devices/midi/#roland-mt-32","text":"The Roland synthesizers, particularly the MT-32, are worth mentioning separately. Many DOS games included separate support for the MT-32 (or the MT-100, LAPC-I, CM-32L, or CM-64) in addition to basic General MIDI support. People who have a real Roland MT-32 or a software synthesizer that emulates one can take advantage of this support. Since DOSBox only passes along MIDI data to your synthesizer without looking at it, simply route DOSBox\u2019s General MIDI to your Roland and configure your DOS software to use Roland mode. A Roland MT-32 can be connected to the PC using a USB to MIDI adapter. The MT-32 output can be connected to the line-in on a sound card. Dosbox can be configured to use the MT-32 for music when it is connected this way. At the Dosbox command prompt, type mixer /listmidi to get a list of the midi devices attached to the machine. Locate the USB midi adapter in the list and note the number that it is associated with. Change Dosbox.conf\u2019s midiconfig = id of MIDI device to the ID of the USB midi device (e.g. midiconfig=0) Once that is done, the MT-32 should operate.","title":"Roland MT-32"},{"location":"documentation/audio/audio-devices/midi/#general-midi","text":"General MIDI isn\u2019t a specific piece of hardware so much as a standard that has been supported by various sound cards (and other devices such as mixers, instruments, lighting control panels, etc\u2026) throughout computing history. DOSBox is able to emulate MIDI in either regular or uart modes. Since MIDI support is still common on computers, DOSBox passes MIDI data along to any MIDI synthesizer installed on your system rather than trying to emulate a particular device. General MIDI in DOSBox sounds exactly like any other program on your host computer that plays MIDI files because it is generating its output through the same device. You can think of the General MIDI as more a pass-though interface than a piece of emulated hardware. General MIDI is configured under the midi category. There are several options, which are explained briefly in the comments in the configuration file and at greater length in the README file. Owners of Yamaha MIDI Synthesizers and other external synthesizers may find this guide useful, while those without may want to use the guide to software emulation of MIDI instead.","title":"General MIDI"},{"location":"documentation/audio/audio-devices/midi/#fluidsynth","text":"","title":"FluidSynth"},{"location":"documentation/audio/audio-devices/midi/#external-midi-devices","text":"","title":"External MIDI devices"},{"location":"documentation/audio/audio-devices/pc-speaker/","text":"PC speaker \u00b6 The PC Speaker was the integrated speaker from the earliest IBM PC\u2019s. It was really only meant for simple beeps, but ended up widely used by PC games as it was the lowest common-denominator for PC sound, despite its very limited capabilities. It is effectively a single-channel square-wave generator, and with considerable CPU overhead it was possible to get some half-decent sound out of it as demonstrated by RealSound. Sound quality was heavily dependent on the type of speaker and the placement and PC case it was built into. Originally a dynamic speaker was used, but later model PCs used a tiny piezo speaker instead which further reduced sound quality and volume. PC Speaker emulation is enabled by default, but can be disabled by setting pcspeaker=false in the [speaker] section of the DOSBox-X config file.","title":"PC speaker"},{"location":"documentation/audio/audio-devices/pc-speaker/#pc-speaker","text":"The PC Speaker was the integrated speaker from the earliest IBM PC\u2019s. It was really only meant for simple beeps, but ended up widely used by PC games as it was the lowest common-denominator for PC sound, despite its very limited capabilities. It is effectively a single-channel square-wave generator, and with considerable CPU overhead it was possible to get some half-decent sound out of it as demonstrated by RealSound. Sound quality was heavily dependent on the type of speaker and the placement and PC case it was built into. Originally a dynamic speaker was used, but later model PCs used a tiny piezo speaker instead which further reduced sound quality and volume. PC Speaker emulation is enabled by default, but can be disabled by setting pcspeaker=false in the [speaker] section of the DOSBox-X config file.","title":"PC speaker"},{"location":"documentation/audio/audio-devices/ps1audio/","text":"IBM PS/1 Audio Card \u00b6 Optional audio card released in 1990 for IBM PS/1 computers (model 2011 and 2121). Relatively few games support this option, and the FM sounds very much like the PCjr or Tandy 1000, as they all use the same or similar TI sound chips.","title":"IBM PS/1 Audio Card"},{"location":"documentation/audio/audio-devices/ps1audio/#ibm-ps1-audio-card","text":"Optional audio card released in 1990 for IBM PS/1 computers (model 2011 and 2121). Relatively few games support this option, and the FM sounds very much like the PCjr or Tandy 1000, as they all use the same or similar TI sound chips.","title":"IBM PS/1 Audio Card"},{"location":"documentation/audio/audio-devices/sound-blaster/","text":"AdLib, CMS & Sound Blaster \u00b6 The Sound Blaster is widely considered the most popular audio device standard. In the DOS era of games, it came in several editions. In most cases sb16 is the best option for DOSBox, though many older games that were produced before the SB16 was manufactured might have some issues with working with the otherwise backwards-compatible device. Here is a list of the different capabilities of the various Sound Blaster cards. Due to its advanced features, competitive price point, and backwards-compatibility with AdLib cards, Soundblaster became considered the \u201cstandard\u201d for special effects reproduction in many applications and games. (Sadly, once they drove all the competition out of business, the \u201ccompetitive price point\u201d went away.) Although they have internal synthesizers, Sound Blaster cards are not MPU-401 compatible, and were therefore often coupled with a MIDI card for enhanced music emulation. The Sound Blaster is configured under the sblaster category. There are several options for configuring this device, which are explained in the comments in that category. Creative Technology created a range of Sound Blaster cards, which quickly became the industry standard for PC sound. AdLib \u00b6 DOSBox does not emulate the AdLib Music Synthesizer Card directly. However, it does emulate Sound Blaster cards that feature AdLib support in their synthesizers. The AdLib/synthesizer support of the Sound Blaster is configured separately from the rest of the card, with the oplmode and oplrate settings. The OPL Mode controls what synthesizer is emulated. The following settings are available: Creative Music System (CMS) \u00b6 Game Blaster \u00b6 Sound Blaster 1.0 \u00b6 The Sound Blaster 1.0 was released by Creative Technology in 1989, followed a year later by the cost-reduced Sound Blaster 1.5. Some key features of the SB 1.x cards Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the CMS/Game Blaster (optional for the SB 1.5) 8bit 22kHz DAC for digital samples Sound Blaster 1.x emulation can be enabled by setting sbtype=sb1 in the [sblaster] section of the DOSBox-X config file. Sound Blaster 2.0 \u00b6 The Sound Blaster 2.0 was released by Creative Technology in October 1991. Some key features of the SB 2.0 Backward compatible with AdLib Music Synthesizer Card Optional backward compatibility with CMS/Game Blaster Backward compatible with the Sound Blaster 1.x 8bit 44kHz DAC for digital samples Sound Blaster 2.0 emulation can be enabled by setting sbtype=sb2 in the [sblaster] section of the DOSBox-X config file. Sound Blaster Pro \u00b6 The Sound Blaster Pro was released by Creative Technology in May 1991. Some key features of the SB Pro Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the Sound Blaster 1.x Backward compatible with the Sound Blaster 2.0 Dual Yamaha OPL2 for stereo FM sound 8bit 44kHz DAC for digital samples This adapter was retroactively often named the SB Pro 1 or SB Pro 1.0. Any software making use of the Stereo FM feature will sound wrong if it was coded for the later SB Pro 2 (or vice versa). Therefore, it is important that you select the right SB Pro model in DOSBox-X, to correspond to that supported by the game. Sound Blaster Pro 2.0 \u00b6 The Sound Blaster Pro 2 was released by Creative Technology in 1991, and quickly replaced the earlier SB Pro. Some key features of the SB Pro 2 Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the Sound Blaster 1.x Backward compatible with the Sound Blaster 2.0 Single Yamaha OPL3 for stereo FM sound Any software making use of the Stereo FM feature will sound wrong if it was coded for the original SB Pro (or vice versa). Therefore, it is important that you select the right SB Pro model in DOSBox-X, to correspond to that supported by the game. Sound Blaster 16 \u00b6 The Sound Blaster 16 was released by Creative Technology in June 1992. Some key features of the SB 16 Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the Sound Blaster 1.x Backward compatible with the Sound Blaster 2.0 Backward compatible with the Sound Blaster Pro 2 16bit 44kHz DAC for digital samples Sound Blaster 16 emulation is enabled by default, and can be enabled by setting sbtype=sb16 in the [sblaster] section of the DOSBox-X config file. CD audio \u00b6 AdLib Gold 1000 \u00b6 The AdLib Gold 1000 was released in 1992. It is backward compatible with the earlier AdLib Music Synthesizer Card, but not with the Sound Blaster cards. Configuration parameters \u00b6 Sound Blaster \u00b6 sbtype \u00b6 Type of Sound Blaster to emulate. gb is Game Blaster. Possible values: sb1 , sb2 , sbpro1 , sbpro2 , sb16 (default), gb , none . sbbase \u00b6 The IO address of the Sound Blaster. Possible values: 220 , 240 , 260 , 280 , 2a0 , 2c0 , 2e0 , 300 . irq \u00b6 The IRQ number of the Sound Blaster. Possible values: 7 , 5 , 3 , 9 , 10 , 11 , 12 . dma \u00b6 The DMA number of the Sound Blaster. Possible values: 1 , 5 , 0 , 3 , 6 , 7 . hdma \u00b6 The High DMA number of the Sound Blaster. Possible values: 1 , 5 , 0 , 3 , 6 , 7 . sbmixer \u00b6 Allow the Sound Blaster mixer to modify the DOSBox mixer. sbwarmup \u00b6 Silence initial DMA audio after card power-on, in milliseconds. This mitigates pops heard when starting many Sound Blaster based games. Reduce this if you notice intial playback is missing audio. sb_filter \u00b6 Type of filter to emulate for the Sound Blaster digital sound output: auto \u2013 Use the appropriate filter determined by sbtype . sb1 , sb2 , sbpro1 , sbpro2 , sb16 \u2013 Use the filter of this Sound Blaster model. modern \u2013 Use linear interpolation upsampling that acts as a low-pass filter; this is the legacy DOSBox behaviour (default). off \u2013 Don\u2019t filter the output. <custom> \u2013 One or two custom filters in the following format: TYPE ORDER FREQ Where TYPE can be hpf (high-pass) or lpf (low-pass), ORDER is the order of the filter from 1 to 16 (1 st order = 6dB/oct slope, 2 nd order = 12dB/oct, etc.), and FREQ is the cutoff frequency in Hz. Examples: lpf 2 12000 hpf 3 120 lfp 1 6500 sb_filter_always_on \u00b6 Force the Sound Blaster filter to be always on (disallow programs from turning the filter off). OPL \u00b6 oplmode \u00b6 Type of OPL emulation. On auto the mode is determined by sbtype . All OPL modes are AdLib-compatible, except for cms . Possible values: auto (default), cms , opl2 , dualopl2 , opl3 , opl3gold , none . opl_filter \u00b6 Type of filter to emulate for the Sound Blaster OPL output: auto \u2013 Use the appropriate filter determined by \u2018sbtype\u2019 (default). sb1 , sb2 , sbpro1 , sbpro2 , sb16 \u2013 Use the filter of this Sound Blaster model. off \u2013 Don\u2019t filter the output. <custom> \u2013 Custom filter definition; see sb_filter for details. CMS \u00b6 cms_filter \u00b6 Filter for the Sound Blaster CMS output: on \u2013 Filter the output (default). off \u2013 Don\u2019t filter the output. <custom> \u2013 Custom filter definition; see sb_filter for details.","title":"AdLib, CMS & Sound Blaster"},{"location":"documentation/audio/audio-devices/sound-blaster/#adlib-cms-sound-blaster","text":"The Sound Blaster is widely considered the most popular audio device standard. In the DOS era of games, it came in several editions. In most cases sb16 is the best option for DOSBox, though many older games that were produced before the SB16 was manufactured might have some issues with working with the otherwise backwards-compatible device. Here is a list of the different capabilities of the various Sound Blaster cards. Due to its advanced features, competitive price point, and backwards-compatibility with AdLib cards, Soundblaster became considered the \u201cstandard\u201d for special effects reproduction in many applications and games. (Sadly, once they drove all the competition out of business, the \u201ccompetitive price point\u201d went away.) Although they have internal synthesizers, Sound Blaster cards are not MPU-401 compatible, and were therefore often coupled with a MIDI card for enhanced music emulation. The Sound Blaster is configured under the sblaster category. There are several options for configuring this device, which are explained in the comments in that category. Creative Technology created a range of Sound Blaster cards, which quickly became the industry standard for PC sound.","title":"AdLib, CMS &amp; Sound Blaster"},{"location":"documentation/audio/audio-devices/sound-blaster/#adlib","text":"DOSBox does not emulate the AdLib Music Synthesizer Card directly. However, it does emulate Sound Blaster cards that feature AdLib support in their synthesizers. The AdLib/synthesizer support of the Sound Blaster is configured separately from the rest of the card, with the oplmode and oplrate settings. The OPL Mode controls what synthesizer is emulated. The following settings are available:","title":"AdLib"},{"location":"documentation/audio/audio-devices/sound-blaster/#creative-music-system-cms","text":"","title":"Creative Music System (CMS)"},{"location":"documentation/audio/audio-devices/sound-blaster/#game-blaster","text":"","title":"Game Blaster"},{"location":"documentation/audio/audio-devices/sound-blaster/#sound-blaster-10","text":"The Sound Blaster 1.0 was released by Creative Technology in 1989, followed a year later by the cost-reduced Sound Blaster 1.5. Some key features of the SB 1.x cards Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the CMS/Game Blaster (optional for the SB 1.5) 8bit 22kHz DAC for digital samples Sound Blaster 1.x emulation can be enabled by setting sbtype=sb1 in the [sblaster] section of the DOSBox-X config file.","title":"Sound Blaster 1.0"},{"location":"documentation/audio/audio-devices/sound-blaster/#sound-blaster-20","text":"The Sound Blaster 2.0 was released by Creative Technology in October 1991. Some key features of the SB 2.0 Backward compatible with AdLib Music Synthesizer Card Optional backward compatibility with CMS/Game Blaster Backward compatible with the Sound Blaster 1.x 8bit 44kHz DAC for digital samples Sound Blaster 2.0 emulation can be enabled by setting sbtype=sb2 in the [sblaster] section of the DOSBox-X config file.","title":"Sound Blaster 2.0"},{"location":"documentation/audio/audio-devices/sound-blaster/#sound-blaster-pro","text":"The Sound Blaster Pro was released by Creative Technology in May 1991. Some key features of the SB Pro Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the Sound Blaster 1.x Backward compatible with the Sound Blaster 2.0 Dual Yamaha OPL2 for stereo FM sound 8bit 44kHz DAC for digital samples This adapter was retroactively often named the SB Pro 1 or SB Pro 1.0. Any software making use of the Stereo FM feature will sound wrong if it was coded for the later SB Pro 2 (or vice versa). Therefore, it is important that you select the right SB Pro model in DOSBox-X, to correspond to that supported by the game.","title":"Sound Blaster Pro"},{"location":"documentation/audio/audio-devices/sound-blaster/#sound-blaster-pro-20","text":"The Sound Blaster Pro 2 was released by Creative Technology in 1991, and quickly replaced the earlier SB Pro. Some key features of the SB Pro 2 Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the Sound Blaster 1.x Backward compatible with the Sound Blaster 2.0 Single Yamaha OPL3 for stereo FM sound Any software making use of the Stereo FM feature will sound wrong if it was coded for the original SB Pro (or vice versa). Therefore, it is important that you select the right SB Pro model in DOSBox-X, to correspond to that supported by the game.","title":"Sound Blaster Pro 2.0"},{"location":"documentation/audio/audio-devices/sound-blaster/#sound-blaster-16","text":"The Sound Blaster 16 was released by Creative Technology in June 1992. Some key features of the SB 16 Backward compatible with the AdLib Music Synthesizer Card Backward compatible with the Sound Blaster 1.x Backward compatible with the Sound Blaster 2.0 Backward compatible with the Sound Blaster Pro 2 16bit 44kHz DAC for digital samples Sound Blaster 16 emulation is enabled by default, and can be enabled by setting sbtype=sb16 in the [sblaster] section of the DOSBox-X config file.","title":"Sound Blaster 16"},{"location":"documentation/audio/audio-devices/sound-blaster/#cd-audio","text":"","title":"CD audio"},{"location":"documentation/audio/audio-devices/sound-blaster/#adlib-gold-1000","text":"The AdLib Gold 1000 was released in 1992. It is backward compatible with the earlier AdLib Music Synthesizer Card, but not with the Sound Blaster cards.","title":"AdLib Gold 1000"},{"location":"documentation/audio/audio-devices/sound-blaster/#configuration-parameters","text":"","title":"Configuration parameters"},{"location":"documentation/audio/audio-devices/sound-blaster/#sound-blaster","text":"","title":"Sound Blaster"},{"location":"documentation/audio/audio-devices/sound-blaster/#sbtype","text":"Type of Sound Blaster to emulate. gb is Game Blaster. Possible values: sb1 , sb2 , sbpro1 , sbpro2 , sb16 (default), gb , none .","title":"sbtype"},{"location":"documentation/audio/audio-devices/sound-blaster/#sbbase","text":"The IO address of the Sound Blaster. Possible values: 220 , 240 , 260 , 280 , 2a0 , 2c0 , 2e0 , 300 .","title":"sbbase"},{"location":"documentation/audio/audio-devices/sound-blaster/#irq","text":"The IRQ number of the Sound Blaster. Possible values: 7 , 5 , 3 , 9 , 10 , 11 , 12 .","title":"irq"},{"location":"documentation/audio/audio-devices/sound-blaster/#dma","text":"The DMA number of the Sound Blaster. Possible values: 1 , 5 , 0 , 3 , 6 , 7 .","title":"dma"},{"location":"documentation/audio/audio-devices/sound-blaster/#hdma","text":"The High DMA number of the Sound Blaster. Possible values: 1 , 5 , 0 , 3 , 6 , 7 .","title":"hdma"},{"location":"documentation/audio/audio-devices/sound-blaster/#sbmixer","text":"Allow the Sound Blaster mixer to modify the DOSBox mixer.","title":"sbmixer"},{"location":"documentation/audio/audio-devices/sound-blaster/#sbwarmup","text":"Silence initial DMA audio after card power-on, in milliseconds. This mitigates pops heard when starting many Sound Blaster based games. Reduce this if you notice intial playback is missing audio.","title":"sbwarmup"},{"location":"documentation/audio/audio-devices/sound-blaster/#sb_filter","text":"Type of filter to emulate for the Sound Blaster digital sound output: auto \u2013 Use the appropriate filter determined by sbtype . sb1 , sb2 , sbpro1 , sbpro2 , sb16 \u2013 Use the filter of this Sound Blaster model. modern \u2013 Use linear interpolation upsampling that acts as a low-pass filter; this is the legacy DOSBox behaviour (default). off \u2013 Don\u2019t filter the output. <custom> \u2013 One or two custom filters in the following format: TYPE ORDER FREQ Where TYPE can be hpf (high-pass) or lpf (low-pass), ORDER is the order of the filter from 1 to 16 (1 st order = 6dB/oct slope, 2 nd order = 12dB/oct, etc.), and FREQ is the cutoff frequency in Hz. Examples: lpf 2 12000 hpf 3 120 lfp 1 6500","title":"sb_filter"},{"location":"documentation/audio/audio-devices/sound-blaster/#sb_filter_always_on","text":"Force the Sound Blaster filter to be always on (disallow programs from turning the filter off).","title":"sb_filter_always_on"},{"location":"documentation/audio/audio-devices/sound-blaster/#opl","text":"","title":"OPL"},{"location":"documentation/audio/audio-devices/sound-blaster/#oplmode","text":"Type of OPL emulation. On auto the mode is determined by sbtype . All OPL modes are AdLib-compatible, except for cms . Possible values: auto (default), cms , opl2 , dualopl2 , opl3 , opl3gold , none .","title":"oplmode"},{"location":"documentation/audio/audio-devices/sound-blaster/#opl_filter","text":"Type of filter to emulate for the Sound Blaster OPL output: auto \u2013 Use the appropriate filter determined by \u2018sbtype\u2019 (default). sb1 , sb2 , sbpro1 , sbpro2 , sb16 \u2013 Use the filter of this Sound Blaster model. off \u2013 Don\u2019t filter the output. <custom> \u2013 Custom filter definition; see sb_filter for details.","title":"opl_filter"},{"location":"documentation/audio/audio-devices/sound-blaster/#cms","text":"","title":"CMS"},{"location":"documentation/audio/audio-devices/sound-blaster/#cms_filter","text":"Filter for the Sound Blaster CMS output: on \u2013 Filter the output (default). off \u2013 Don\u2019t filter the output. <custom> \u2013 Custom filter definition; see sb_filter for details.","title":"cms_filter"},{"location":"documentation/audio/audio-devices/tandy/","text":"Tandy 1000 \u00b6 Tandy audio, was introduced with the Tandy 1000 in 1984, which began as a clone of the IBM PCjr. Tandy audio is automatically enabled when you set machine=tandy in the [dosbox] section of the DOSBox-X config file. Enabling Tandy mode this way, also enables Tandy video emulation The later Tandy 1000 SL, TL, TLX, RL and RLX models added support for a DAC for digital sample sounds. The Tandy DAC will be disabled if Sound Blaster emulation is enabled, due to resource conflicts. So to enable the Tandy DAC, you need to set sblaster=none.","title":"Tandy 1000"},{"location":"documentation/audio/audio-devices/tandy/#tandy-1000","text":"Tandy audio, was introduced with the Tandy 1000 in 1984, which began as a clone of the IBM PCjr. Tandy audio is automatically enabled when you set machine=tandy in the [dosbox] section of the DOSBox-X config file. Enabling Tandy mode this way, also enables Tandy video emulation The later Tandy 1000 SL, TL, TLX, RL and RLX models added support for a DAC for digital sample sounds. The Tandy DAC will be disabled if Sound Blaster emulation is enabled, due to resource conflicts. So to enable the Tandy DAC, you need to set sblaster=none.","title":"Tandy 1000"},{"location":"documentation/input/","text":"","title":"Index"},{"location":"documentation/input/joystick/","text":"","title":"Joystick"},{"location":"documentation/input/keyboard/","text":"","title":"Keyboard"},{"location":"documentation/input/mouse/","text":"","title":"Mouse"},{"location":"documentation/video/","text":"","title":"Index"},{"location":"downloads/development-builds/","text":"Development builds \u00b6 function set_build_version(gh_api_artifacts, os_name) { fetch(gh_api_artifacts) .then(response => { if (response.status !== 200) return; response.json().then(data => { let changelog = data.artifacts .find(a => a.name.startsWith(\"changelog-\")); if (changelog === undefined) return; let n = changelog.name.length; let version = changelog.name.substring(10, n - 4); let version_el = document.getElementById(os_name + \"-build-version\"); version_el.textContent = version; }); }) .catch(err => { console.log('Fetch Error :-S', err); }); } // Fetch build status using GitHub API and update HTML function set_ci_status(workflow_file, os_name, description, page = 1) { // GitHub has strict rate-limits for anonymous users: 60 requests per hour; // We request 100 results per page (max allowed); main builds are very // likely to be included in the first page anyway. if (page > 10) { return; } let per_page = 100; let gh_api_url = \"https://api.github.com/repos/dosbox-staging/dosbox-staging/\"; fetch(gh_api_url + \"actions/workflows/\" + workflow_file + \"/runs\" + \"?page=\" + page + \"&per_page=\" + per_page) .then(response => { // Handle HTTP error if (response.status !== 200) { console.log(\"Looks like there was a problem.\" + \"Status Code: \" + response.status); return; } response.json().then(data => { console.log(data.workflow_runs); let status = data.workflow_runs .filter(run => run.head_branch == \"main\") .filter(run => run.event == \"push\") .find(run => run.conclusion == \"success\"); // If result not found, query the next page if (status == undefined) { set_ci_status(workflow_file, os_name, page + 1); return; } // Update HTML elements let build_link = document.createElement(\"a\"); build_link.textContent = description; build_link.setAttribute(\"href\", status.html_url); let build_link_tr_el = document.getElementById(os_name + \"-build-link\"); build_link_tr_el.innerHTML = ''; build_link_tr_el.appendChild(build_link); let build_date = new Date(status.updated_at); let date_el = document.getElementById(os_name + \"-build-date\"); date_el.textContent = build_date.toUTCString(); set_build_version(status.artifacts_url, os_name); }); }) .catch(err => { console.log('Fetch Error :-S', err); }); } document.addEventListener(\"DOMContentLoaded\", () => { set_ci_status(\"linux.yml\", \"linux\", \"Linux\"); set_ci_status(\"macos.yml\", \"macos\", \"macOS\"); set_ci_status(\"windows-msys2.yml\", \"msys2\", \"Windows MSYS2 builds\"); set_ci_status(\"windows-msvc.yml\", \"windows\", \"Windows MSVC builds\"); }); Warning These are unstable development snapshots intended for testing and showcasing new features; if you want to download a stable build, head on to Linux , Windows , or macOS download pages. Build artifacts are hosted on GitHub; you need to be logged in to download them. Download link Build version Date Installation notes \u00b6 Testing new features might require manual reset of the configuration file. DOSBox Staging builds use a configuration file named dosbox-staging.conf located in: Linux ~/.config/dosbox/ Windows C:\\Users\\USERNAME>\\AppData\\Local\\DOSBox\\ macOS ~/Library/Preferences/DOSBox/ Linux \u00b6 The tarball contains a dynamically-linked x86_64 build; you\u2019ll need additional dependencies installed via your package manager. Fedora \u00b6 sudo dnf install SDL2 SDL2_image SDL2_net opusfile Debian, Ubuntu \u00b6 sudo apt install libsdl2-2.0-0 libsdl2-image-2.0-0 libsdl2-net-2.0-0 libopusfile0 Arch, Manjaro \u00b6 sudo pacman -S sdl2 sdl2_image sdl2_net opusfile Windows \u00b6 Windows executables in a snapshot packages are not signed, therefore Windows 10 might prevent the program from starting. See this guide to learn how to deal with this. macOS \u00b6 macOS app bundles are not notarized; Apple Gatekeeper will try to prevent the program from running. See this guide to learn how to deal with this.","title":"Development builds"},{"location":"downloads/development-builds/#development-builds","text":"function set_build_version(gh_api_artifacts, os_name) { fetch(gh_api_artifacts) .then(response => { if (response.status !== 200) return; response.json().then(data => { let changelog = data.artifacts .find(a => a.name.startsWith(\"changelog-\")); if (changelog === undefined) return; let n = changelog.name.length; let version = changelog.name.substring(10, n - 4); let version_el = document.getElementById(os_name + \"-build-version\"); version_el.textContent = version; }); }) .catch(err => { console.log('Fetch Error :-S', err); }); } // Fetch build status using GitHub API and update HTML function set_ci_status(workflow_file, os_name, description, page = 1) { // GitHub has strict rate-limits for anonymous users: 60 requests per hour; // We request 100 results per page (max allowed); main builds are very // likely to be included in the first page anyway. if (page > 10) { return; } let per_page = 100; let gh_api_url = \"https://api.github.com/repos/dosbox-staging/dosbox-staging/\"; fetch(gh_api_url + \"actions/workflows/\" + workflow_file + \"/runs\" + \"?page=\" + page + \"&per_page=\" + per_page) .then(response => { // Handle HTTP error if (response.status !== 200) { console.log(\"Looks like there was a problem.\" + \"Status Code: \" + response.status); return; } response.json().then(data => { console.log(data.workflow_runs); let status = data.workflow_runs .filter(run => run.head_branch == \"main\") .filter(run => run.event == \"push\") .find(run => run.conclusion == \"success\"); // If result not found, query the next page if (status == undefined) { set_ci_status(workflow_file, os_name, page + 1); return; } // Update HTML elements let build_link = document.createElement(\"a\"); build_link.textContent = description; build_link.setAttribute(\"href\", status.html_url); let build_link_tr_el = document.getElementById(os_name + \"-build-link\"); build_link_tr_el.innerHTML = ''; build_link_tr_el.appendChild(build_link); let build_date = new Date(status.updated_at); let date_el = document.getElementById(os_name + \"-build-date\"); date_el.textContent = build_date.toUTCString(); set_build_version(status.artifacts_url, os_name); }); }) .catch(err => { console.log('Fetch Error :-S', err); }); } document.addEventListener(\"DOMContentLoaded\", () => { set_ci_status(\"linux.yml\", \"linux\", \"Linux\"); set_ci_status(\"macos.yml\", \"macos\", \"macOS\"); set_ci_status(\"windows-msys2.yml\", \"msys2\", \"Windows MSYS2 builds\"); set_ci_status(\"windows-msvc.yml\", \"windows\", \"Windows MSVC builds\"); }); Warning These are unstable development snapshots intended for testing and showcasing new features; if you want to download a stable build, head on to Linux , Windows , or macOS download pages. Build artifacts are hosted on GitHub; you need to be logged in to download them. Download link Build version Date","title":"Development builds"},{"location":"downloads/development-builds/#installation-notes","text":"Testing new features might require manual reset of the configuration file. DOSBox Staging builds use a configuration file named dosbox-staging.conf located in: Linux ~/.config/dosbox/ Windows C:\\Users\\USERNAME>\\AppData\\Local\\DOSBox\\ macOS ~/Library/Preferences/DOSBox/","title":"Installation notes"},{"location":"downloads/development-builds/#linux","text":"The tarball contains a dynamically-linked x86_64 build; you\u2019ll need additional dependencies installed via your package manager.","title":"Linux"},{"location":"downloads/development-builds/#fedora","text":"sudo dnf install SDL2 SDL2_image SDL2_net opusfile","title":"Fedora"},{"location":"downloads/development-builds/#debian-ubuntu","text":"sudo apt install libsdl2-2.0-0 libsdl2-image-2.0-0 libsdl2-net-2.0-0 libopusfile0","title":"Debian, Ubuntu"},{"location":"downloads/development-builds/#arch-manjaro","text":"sudo pacman -S sdl2 sdl2_image sdl2_net opusfile","title":"Arch, Manjaro"},{"location":"downloads/development-builds/#windows","text":"Windows executables in a snapshot packages are not signed, therefore Windows 10 might prevent the program from starting. See this guide to learn how to deal with this.","title":"Windows"},{"location":"downloads/development-builds/#macos","text":"macOS app bundles are not notarized; Apple Gatekeeper will try to prevent the program from running. See this guide to learn how to deal with this.","title":"macOS"},{"location":"downloads/linux/","text":"Linux builds \u00b6 Packages \u00b6 Fedora \u00b6 sudo dnf install dosbox-staging Gentoo \u00b6 emerge games-emulation/dosbox-staging Ubuntu, Mint \u00b6 Available via Personal Package Archive : sudo add-apt-repository ppa:feignint/dosbox-staging sudo apt-get update sudo apt install dosbox-staging Arch, Manjaro \u00b6 Available via Arch User Repository . Vote for inclusion in the community repo! Other repositories \u00b6 Tarball download \u00b6 Download DOSBox Staging 0.80.0 (tar.xz) sha256: 3022bdd405dc1106007c3505e6a5d083de982d516c9bce499e2c4a02a697a1bd Our pre-compiled builds run on most Linux distributions (x86_64 only for now). They depend on the following packages: Fedora \u00b6 sudo dnf install SDL2 SDL2_image SDL2_net opusfile Ubuntu, Debian \u00b6 Ubuntu 18.04 or newer, and Debian 9 or newer is required. sudo apt install libsdl2-2.0-0 libsdl2-image-2.0-0 libsdl2-net-2.0-0 libopusfile0 Arch, Manjaro \u00b6 sudo pacman -S sdl2 sdl2_image sdl2_net opusfile Steam \u00b6 You can easily configure your DOS games on Steam to use DOSBox Staging via Boxtron (community-developed Steam Play compatibility tool for DOS games). Boxtron will automatically use dosbox if found in your path, or can be configured to use a specific binary by editing the file ~/.config/boxtron.conf and overriding dosbox.cmd : cmd = ~/path-to-dosbox-staging/dosbox Development snapshot builds \u00b6 You can always see what\u2019s cooking on the main branch! These snapshot builds might be slow or unstable as they are designed with developers and testers in mind. Older builds \u00b6 DOSBox Staging 0.79.1 (tar.xz) sha256: aebf8619bb44934f18d0e219d50c4e2c03b179c37daa67a9b800e7bd3aefc262 DOSBox Staging 0.79.0 (tar.xz) sha256: 804adb294096ab651490b1664570203f24e460048d7e6e2e388d210a8380016a DOSBox Staging 0.78.1 (tar.xz) sha256: 8bd2a247ca960f6059276db2b0331f853e16bc8a090722b15f567782542b5fba DOSBox Staging 0.78.0 (tar.xz) sha256: 085e7cbe350546b3f25b0400c872a2766f9a49d16a5ca8d17a0a93aad6e37709 DOSBox Staging 0.77.1 (tar.xz) sha256: e2d475e4b1f80881ccafc4502b3884c096b51aa2fc2cfe89bb6c2b8ebfb7cc76 DOSBox Staging 0.76.0 (tar.xz) sha256: f8401bcd473d5b664eeb3a90e4dbb4bbf0cef5339adba867f361c00b7de9b2fe DOSBox Staging 0.76.0 (tar.xz) sha256: b14de58ba0f5dd192398cda58fa439b15512f50d1c88b5ded6f300d4a9212852 DOSBox Staging 0.75.2 (tar.xz) sha256: 0325a1860aea95e8117aa49b041bfd628ab20531a3abc7b0a67aff4c47049465 DOSBox Staging 0.75.1 (tar.xz) sha256: aef22e5ddf93ff826fc2d48a4c8c0b4097d3455525b40be5b3fb443935929c70 DOSBox Staging 0.75.0 (tar.xz) sha256: a28d8ba0481722c8343b7532299c7b9bb9e491c6832d9d05dd4704939287f776 DOSBox Staging 0.75.0-rc1 (tar.xz) sha256: 594ba45280af240cb18b3882f7ffa71169a697eb362b7d7a76c8ccda2b940e84 Building from source \u00b6 Of course you can always build DOSBox Staging straight from the source . Send us patches if you improve something!","title":"Linux"},{"location":"downloads/linux/#linux-builds","text":"","title":"Linux builds"},{"location":"downloads/linux/#packages","text":"","title":"Packages"},{"location":"downloads/linux/#fedora","text":"sudo dnf install dosbox-staging","title":"Fedora"},{"location":"downloads/linux/#gentoo","text":"emerge games-emulation/dosbox-staging","title":"Gentoo"},{"location":"downloads/linux/#ubuntu-mint","text":"Available via Personal Package Archive : sudo add-apt-repository ppa:feignint/dosbox-staging sudo apt-get update sudo apt install dosbox-staging","title":"Ubuntu, Mint"},{"location":"downloads/linux/#arch-manjaro","text":"Available via Arch User Repository . Vote for inclusion in the community repo!","title":"Arch, Manjaro"},{"location":"downloads/linux/#other-repositories","text":"","title":"Other repositories"},{"location":"downloads/linux/#tarball-download","text":"Download DOSBox Staging 0.80.0 (tar.xz) sha256: 3022bdd405dc1106007c3505e6a5d083de982d516c9bce499e2c4a02a697a1bd Our pre-compiled builds run on most Linux distributions (x86_64 only for now). They depend on the following packages:","title":"Tarball download"},{"location":"downloads/linux/#fedora_1","text":"sudo dnf install SDL2 SDL2_image SDL2_net opusfile","title":"Fedora"},{"location":"downloads/linux/#ubuntu-debian","text":"Ubuntu 18.04 or newer, and Debian 9 or newer is required. sudo apt install libsdl2-2.0-0 libsdl2-image-2.0-0 libsdl2-net-2.0-0 libopusfile0","title":"Ubuntu, Debian"},{"location":"downloads/linux/#arch-manjaro_1","text":"sudo pacman -S sdl2 sdl2_image sdl2_net opusfile","title":"Arch, Manjaro"},{"location":"downloads/linux/#steam","text":"You can easily configure your DOS games on Steam to use DOSBox Staging via Boxtron (community-developed Steam Play compatibility tool for DOS games). Boxtron will automatically use dosbox if found in your path, or can be configured to use a specific binary by editing the file ~/.config/boxtron.conf and overriding dosbox.cmd : cmd = ~/path-to-dosbox-staging/dosbox","title":" Steam"},{"location":"downloads/linux/#development-snapshot-builds","text":"You can always see what\u2019s cooking on the main branch! These snapshot builds might be slow or unstable as they are designed with developers and testers in mind.","title":"Development snapshot builds"},{"location":"downloads/linux/#older-builds","text":"DOSBox Staging 0.79.1 (tar.xz) sha256: aebf8619bb44934f18d0e219d50c4e2c03b179c37daa67a9b800e7bd3aefc262 DOSBox Staging 0.79.0 (tar.xz) sha256: 804adb294096ab651490b1664570203f24e460048d7e6e2e388d210a8380016a DOSBox Staging 0.78.1 (tar.xz) sha256: 8bd2a247ca960f6059276db2b0331f853e16bc8a090722b15f567782542b5fba DOSBox Staging 0.78.0 (tar.xz) sha256: 085e7cbe350546b3f25b0400c872a2766f9a49d16a5ca8d17a0a93aad6e37709 DOSBox Staging 0.77.1 (tar.xz) sha256: e2d475e4b1f80881ccafc4502b3884c096b51aa2fc2cfe89bb6c2b8ebfb7cc76 DOSBox Staging 0.76.0 (tar.xz) sha256: f8401bcd473d5b664eeb3a90e4dbb4bbf0cef5339adba867f361c00b7de9b2fe DOSBox Staging 0.76.0 (tar.xz) sha256: b14de58ba0f5dd192398cda58fa439b15512f50d1c88b5ded6f300d4a9212852 DOSBox Staging 0.75.2 (tar.xz) sha256: 0325a1860aea95e8117aa49b041bfd628ab20531a3abc7b0a67aff4c47049465 DOSBox Staging 0.75.1 (tar.xz) sha256: aef22e5ddf93ff826fc2d48a4c8c0b4097d3455525b40be5b3fb443935929c70 DOSBox Staging 0.75.0 (tar.xz) sha256: a28d8ba0481722c8343b7532299c7b9bb9e491c6832d9d05dd4704939287f776 DOSBox Staging 0.75.0-rc1 (tar.xz) sha256: 594ba45280af240cb18b3882f7ffa71169a697eb362b7d7a76c8ccda2b940e84","title":"Older builds"},{"location":"downloads/linux/#building-from-source","text":"Of course you can always build DOSBox Staging straight from the source . Send us patches if you improve something!","title":"Building from source"},{"location":"downloads/macos/","text":"macOS builds \u00b6 Download DOSBox Staging 0.80.0 Universal binary (dmg) sha256: 53f12aa63cf9d2a33a46149fb394947c6b12d5ab9b7ba41ee2d7eab1a990fa7a This package is compatible with macOS 10.15 (Catalina) or newer. Important macOS uses its Gatekeeper feature to prevent users from running externally-hosted 3 rd party software, such as DOSBox Staging. See the section below to learn how to fix it. Homebrew \u00b6 The Homebrew package is compatible with macOS 10.14 (Mojave) or newer. Learn how to setup Homebrew here . brew update brew install dosbox-staging MacPorts \u00b6 The MacPorts package should build on systems as old as macOS 10.7 (Lion, circa 2011) or newer. Learn how to setup MacPorts here . sudo port selfupdate sudo port install dosbox-staging If you\u2019re running an OS not longer maintained by Apple, then support is on a best-effort basis (as the team runs supported configurations and may not be able to reproduce some issues). Development snapshot builds \u00b6 You can always see what\u2019s cooking on the main branch! These snapshot builds might be slow or unstable as they are designed with developers and testers in mind. Apple Gatekeeper \u00b6 You\u2019ll need to do the following when launching DOSBox Staging for the first time (you\u2019ll need to repeat these steps every time after having upgraded to a newer version): Ctrl click (or right-click) on the DOSBox Staging app, and click Open . Click OK to close the resulting message. Open the app a second time (as per above); now Gatekeeper will show an Open button like this: Explanation \u00b6 Apple\u2019s Gatekeeper feature only permits the running of notarized software, one aspect of which involves developers making yearly payments to Apple. As DOSBox Staging is a volunteer effort, we are not in a position to make such payments and therefore ask users to bypass Apple\u2019s Gatekeeper manually. Older builds \u00b6 DOSBox Staging 0.79.1 Universal binary (dmg) sha256: 52547692be29949747bb8d3b59bf31dd22b4f49178316417cc8f1f468eeab387 DOSBox Staging 0.79.0 Universal binary (dmg) sha256: 1678f7458acabecdaf2b49e0d95a20d057734898b70c29d4e845f52a1aa26d46 DOSBox Staging 0.78.1 Universal binary (dmg) sha256: b9ddff89e9fc283493580d5fc021b05021a13d90305ae44e2867499b22e359c9 DOSBox Staging 0.78.0 Universal binary (dmg) sha256: 3997546560af542b7f3b55b1bc890ae4342144a72c21af9880449adf579db88b DOSBox Staging 0.77.1 x86-64 (dmg) sha256: 29964d79f0a85d593f8bafd30da854c726594c12474528f46758fc95c05f0c97 DOSBox Staging 0.77.1 ARM64 (dmg) sha256: 74a1c84bdda0db25091f749ba7a2e5e93f7849baf130817ea1bc182039bd3698 DOSBox Staging 0.77.0 x86-64 (dmg) (macOS 10.15 or newer) sha256: 3ca859573814b2c50065825c02d8a04eb6d95605830ec3af21de0d64a2e32314 DOSBox Staging 0.77.0 ARM64-testing (dmg) (macOS 11 or newer) sha256: e2eecb52777d5ed836ba1f772fe669c89e94ea9b67777aced5fef5b51051ccaf DOSBox Staging 0.76.0-3 (dmg) (macOS 10.15 or newer) sha256: f6048fa0e1a33a41f0018cb6d7139c4f7b4a60176bbe6a42f681aa8b5adcb73b DOSBox Staging 0.76.0 (dmg) (macOS 10.15 or newer) sha256: c9fa7b0bf6410f430b47daeb15a470e0105a147b555d3fbf574514406c71f492 DOSBox Staging 0.75.2 (dmg) (macOS 10.15 or newer) sha256: 272f01aa8598ecf3229d48680aa6ce6e5b88ebd0645b1f92b899bc0159afcf11 DOSBox Staging 0.75.1 (dmg) (macOS 10.15 or newer) sha256: 2508a87c6aceee63da13e4c76159734e3c9ee4e76fb22a3a7c0d66021e71a4eb DOSBox Staging 0.75.0 (dmg) (macOS 10.15 or newer) sha256: a0038c7401d239934d25517ca5e8e6006cc3f4cb7060f6ace56609d36bca12ef DOSBox Staging 0.75.0-rc1 (dmg) (macOS 10.15 or newer) sha256: 8a5c12d1b6567d6e981acd76e30dec41a73a699963b714f4f1dcf0fc853fc9f6 Building from source \u00b6 Of course you can always build DOSBox Staging straight from the source . Send us patches if you improve something!","title":"macOS"},{"location":"downloads/macos/#macos-builds","text":"Download DOSBox Staging 0.80.0 Universal binary (dmg) sha256: 53f12aa63cf9d2a33a46149fb394947c6b12d5ab9b7ba41ee2d7eab1a990fa7a This package is compatible with macOS 10.15 (Catalina) or newer. Important macOS uses its Gatekeeper feature to prevent users from running externally-hosted 3 rd party software, such as DOSBox Staging. See the section below to learn how to fix it.","title":"macOS builds"},{"location":"downloads/macos/#homebrew","text":"The Homebrew package is compatible with macOS 10.14 (Mojave) or newer. Learn how to setup Homebrew here . brew update brew install dosbox-staging","title":"Homebrew"},{"location":"downloads/macos/#macports","text":"The MacPorts package should build on systems as old as macOS 10.7 (Lion, circa 2011) or newer. Learn how to setup MacPorts here . sudo port selfupdate sudo port install dosbox-staging If you\u2019re running an OS not longer maintained by Apple, then support is on a best-effort basis (as the team runs supported configurations and may not be able to reproduce some issues).","title":"MacPorts"},{"location":"downloads/macos/#development-snapshot-builds","text":"You can always see what\u2019s cooking on the main branch! These snapshot builds might be slow or unstable as they are designed with developers and testers in mind.","title":"Development snapshot builds"},{"location":"downloads/macos/#apple-gatekeeper","text":"You\u2019ll need to do the following when launching DOSBox Staging for the first time (you\u2019ll need to repeat these steps every time after having upgraded to a newer version): Ctrl click (or right-click) on the DOSBox Staging app, and click Open . Click OK to close the resulting message. Open the app a second time (as per above); now Gatekeeper will show an Open button like this:","title":"Apple Gatekeeper"},{"location":"downloads/macos/#explanation","text":"Apple\u2019s Gatekeeper feature only permits the running of notarized software, one aspect of which involves developers making yearly payments to Apple. As DOSBox Staging is a volunteer effort, we are not in a position to make such payments and therefore ask users to bypass Apple\u2019s Gatekeeper manually.","title":"Explanation"},{"location":"downloads/macos/#older-builds","text":"DOSBox Staging 0.79.1 Universal binary (dmg) sha256: 52547692be29949747bb8d3b59bf31dd22b4f49178316417cc8f1f468eeab387 DOSBox Staging 0.79.0 Universal binary (dmg) sha256: 1678f7458acabecdaf2b49e0d95a20d057734898b70c29d4e845f52a1aa26d46 DOSBox Staging 0.78.1 Universal binary (dmg) sha256: b9ddff89e9fc283493580d5fc021b05021a13d90305ae44e2867499b22e359c9 DOSBox Staging 0.78.0 Universal binary (dmg) sha256: 3997546560af542b7f3b55b1bc890ae4342144a72c21af9880449adf579db88b DOSBox Staging 0.77.1 x86-64 (dmg) sha256: 29964d79f0a85d593f8bafd30da854c726594c12474528f46758fc95c05f0c97 DOSBox Staging 0.77.1 ARM64 (dmg) sha256: 74a1c84bdda0db25091f749ba7a2e5e93f7849baf130817ea1bc182039bd3698 DOSBox Staging 0.77.0 x86-64 (dmg) (macOS 10.15 or newer) sha256: 3ca859573814b2c50065825c02d8a04eb6d95605830ec3af21de0d64a2e32314 DOSBox Staging 0.77.0 ARM64-testing (dmg) (macOS 11 or newer) sha256: e2eecb52777d5ed836ba1f772fe669c89e94ea9b67777aced5fef5b51051ccaf DOSBox Staging 0.76.0-3 (dmg) (macOS 10.15 or newer) sha256: f6048fa0e1a33a41f0018cb6d7139c4f7b4a60176bbe6a42f681aa8b5adcb73b DOSBox Staging 0.76.0 (dmg) (macOS 10.15 or newer) sha256: c9fa7b0bf6410f430b47daeb15a470e0105a147b555d3fbf574514406c71f492 DOSBox Staging 0.75.2 (dmg) (macOS 10.15 or newer) sha256: 272f01aa8598ecf3229d48680aa6ce6e5b88ebd0645b1f92b899bc0159afcf11 DOSBox Staging 0.75.1 (dmg) (macOS 10.15 or newer) sha256: 2508a87c6aceee63da13e4c76159734e3c9ee4e76fb22a3a7c0d66021e71a4eb DOSBox Staging 0.75.0 (dmg) (macOS 10.15 or newer) sha256: a0038c7401d239934d25517ca5e8e6006cc3f4cb7060f6ace56609d36bca12ef DOSBox Staging 0.75.0-rc1 (dmg) (macOS 10.15 or newer) sha256: 8a5c12d1b6567d6e981acd76e30dec41a73a699963b714f4f1dcf0fc853fc9f6","title":"Older builds"},{"location":"downloads/macos/#building-from-source","text":"Of course you can always build DOSBox Staging straight from the source . Send us patches if you improve something!","title":"Building from source"},{"location":"downloads/windows/","text":"Windows builds \u00b6 Download DOSBox Staging 0.80.0 64-bit (installer) sha256: 84445c869e58f6b4591484f6178c7b5b3c8f284bf9460e9afc4502ba842ab039 Download DOSBox Staging 0.80.0 64-bit (zip) sha256: 075be379ed4475615e0e86953eb21f024c74b4cafd6914e9cf5ef40e3d9e26cd Important If Windows 8.x or Windows 10 prevents you from running DOSBox Staging via Microsoft Defender SmartScreen, see the section below . Development snapshot builds \u00b6 You can always see what\u2019s cooking on the main branch! These snapshot builds might be slow or unstable as they are designed with developers and testers in mind. Microsoft Defender SmartScreen \u00b6 You\u2019ll need to do the following when launching DOSBox Staging for the first time (you\u2019ll need to repeat these steps every time after having upgraded to a newer version). Method 1 \u00b6 Start the application, then click on More info in the appearing dialog. Click the Run anyway button in the second dialog. Method 2 \u00b6 In your installation folder, right-click on the dosbox.exe , select Properties , tick Unblock in the appearing dialog, then press Ok . Explanation \u00b6 Starting in Windows 8, Microsoft Defender SmartScreen\u2019s pop-up encumbers the execution of newly-developed applications. To prevent this, developers are expected to pay Microsoft\u2019s EV certification vendors a yearly fee and put the software on Windows Store. As DOSBox Staging is a volunteer effort, we are not in a position to make such payments. We therefore ask users to manually unblock DOSBox Staging and be patient while Microsoft\u2019s Application Reputation Scheme eventually whitelists DOSBox Staging. Older builds \u00b6 DOSBox Staging 0.79.1 64-bit (installer) sha256: 0045ac995ada0af955681983ae86c969a05030c25173618f8b1547a267046a27 DOSBox Staging 0.79.1 64-bit (zip) sha256: 8c7045dfea6dc20bb985cff516d2faee51d2ecaf054db60632857b6941d3d648 DOSBox Staging 0.79.0 64-bit (installer) sha256: 154c663f76d0ca46d1d23d8c2bcea2d83717f1ba9103067a6a6f5ce814cf0cb2 DOSBox Staging 0.79.0 64-bit (zip) sha256: b3633d425489fbb5f6f9b3de75e4c2c6dd0713c3aec504e42cac948cc1550bbe DOSBox Staging 0.78.1 64-bit (zip) sha256: 3c2f408125351154a37e93de8a4bd05d0c722bbf53e1f583909e4ca6c3eb9204 DOSBox Staging with built-in debugger 0.78.1 64-bit (zip) sha256: b99f3c354f831ed2b0ed04d215170f696b6fc18285b0c7192c0abab62c41bbc8 DOSBox Staging 0.78.0 64-bit (zip) sha256: f13cba664259fdb0db5e32826e13dcded4270557963f6e823a4731129f23a8a3 DOSBox Staging 0.78.0 32-bit (zip) sha256: 0ca9201cdf3f3a1576b97b0de0e87280b75c633976f0b179ba33a68d44f5ba56 DOSBox Staging 0.77.1 64-bit (zip) sha256: 11ba992ece6d3e4ef2046fcdb6d842da364b69720a921d61fdcc793eb52e7051 DOSBox Staging 0.77.1 32-bit (zip) sha256: a34883101486ce2af071a29c6390f2038889fc519e042101284f2a6999d9f0ef DOSBox Staging 0.77.0 64-bit (zip) sha256: cacdac418642fd8c7faf1e5955110c35d0c207392ae20835707fd2a1e1114b82 DOSBox Staging 0.77.0 32-bit (zip) sha256: f718d07bab69e3e1be0b28207039cea2746c7e45b8ba7a19b625011f477e609a DOSBox Staging 0.76.0 32-bit (zip) sha256: 646d2f3fa8189e411589fedcb8148a295361693a6ce95d08e06f4a70e5a36b16 DOSBox Staging 0.75.2 64-bit (zip) sha256: 09f0ca911813a64b8814880eb6e49ad4dcdac9a5bb9263c4887ad82b71fad292 DOSBox Staging 0.75.2 32-bit (zip) sha256: 51dc171ff52ea395c6a22f09ebb98a93974a95c701ca81008368c22a66deced2 DOSBox Staging 0.75.1 64-bit (zip) sha256: 80c60c4377ff2882649f113b3cb3bcd407c17acaac344c49fa1fc4229813f012 DOSBox Staging 0.75.1 32-bit (zip) sha256: 843c742a348f575862e152e02cf174be0ea1c52bdb6e4bffd65f34af88b566b7 DOSBox Staging 0.75.0 32-bit (zip) sha256: 69046adcef2ef9920fbba8d40fc9e51f3dd144ba4549787e1816cf1c2ae87d71 DOSBox Staging 0.75.0-rc1 32-bit (zip) sha256: 738d2ae2101384f2eeaf1895de64cf1b4c76eaf7873de7e15b7f52145dfed7e7 Building from source \u00b6 Of course you can always build DOSBox Staging straight from the source . Send us patches if you improve something!","title":"Windows"},{"location":"downloads/windows/#windows-builds","text":"Download DOSBox Staging 0.80.0 64-bit (installer) sha256: 84445c869e58f6b4591484f6178c7b5b3c8f284bf9460e9afc4502ba842ab039 Download DOSBox Staging 0.80.0 64-bit (zip) sha256: 075be379ed4475615e0e86953eb21f024c74b4cafd6914e9cf5ef40e3d9e26cd Important If Windows 8.x or Windows 10 prevents you from running DOSBox Staging via Microsoft Defender SmartScreen, see the section below .","title":"Windows builds"},{"location":"downloads/windows/#development-snapshot-builds","text":"You can always see what\u2019s cooking on the main branch! These snapshot builds might be slow or unstable as they are designed with developers and testers in mind.","title":"Development snapshot builds"},{"location":"downloads/windows/#microsoft-defender-smartscreen","text":"You\u2019ll need to do the following when launching DOSBox Staging for the first time (you\u2019ll need to repeat these steps every time after having upgraded to a newer version).","title":"Microsoft Defender SmartScreen"},{"location":"downloads/windows/#method-1","text":"Start the application, then click on More info in the appearing dialog. Click the Run anyway button in the second dialog.","title":"Method 1"},{"location":"downloads/windows/#method-2","text":"In your installation folder, right-click on the dosbox.exe , select Properties , tick Unblock in the appearing dialog, then press Ok .","title":"Method 2"},{"location":"downloads/windows/#explanation","text":"Starting in Windows 8, Microsoft Defender SmartScreen\u2019s pop-up encumbers the execution of newly-developed applications. To prevent this, developers are expected to pay Microsoft\u2019s EV certification vendors a yearly fee and put the software on Windows Store. As DOSBox Staging is a volunteer effort, we are not in a position to make such payments. We therefore ask users to manually unblock DOSBox Staging and be patient while Microsoft\u2019s Application Reputation Scheme eventually whitelists DOSBox Staging.","title":"Explanation"},{"location":"downloads/windows/#older-builds","text":"DOSBox Staging 0.79.1 64-bit (installer) sha256: 0045ac995ada0af955681983ae86c969a05030c25173618f8b1547a267046a27 DOSBox Staging 0.79.1 64-bit (zip) sha256: 8c7045dfea6dc20bb985cff516d2faee51d2ecaf054db60632857b6941d3d648 DOSBox Staging 0.79.0 64-bit (installer) sha256: 154c663f76d0ca46d1d23d8c2bcea2d83717f1ba9103067a6a6f5ce814cf0cb2 DOSBox Staging 0.79.0 64-bit (zip) sha256: b3633d425489fbb5f6f9b3de75e4c2c6dd0713c3aec504e42cac948cc1550bbe DOSBox Staging 0.78.1 64-bit (zip) sha256: 3c2f408125351154a37e93de8a4bd05d0c722bbf53e1f583909e4ca6c3eb9204 DOSBox Staging with built-in debugger 0.78.1 64-bit (zip) sha256: b99f3c354f831ed2b0ed04d215170f696b6fc18285b0c7192c0abab62c41bbc8 DOSBox Staging 0.78.0 64-bit (zip) sha256: f13cba664259fdb0db5e32826e13dcded4270557963f6e823a4731129f23a8a3 DOSBox Staging 0.78.0 32-bit (zip) sha256: 0ca9201cdf3f3a1576b97b0de0e87280b75c633976f0b179ba33a68d44f5ba56 DOSBox Staging 0.77.1 64-bit (zip) sha256: 11ba992ece6d3e4ef2046fcdb6d842da364b69720a921d61fdcc793eb52e7051 DOSBox Staging 0.77.1 32-bit (zip) sha256: a34883101486ce2af071a29c6390f2038889fc519e042101284f2a6999d9f0ef DOSBox Staging 0.77.0 64-bit (zip) sha256: cacdac418642fd8c7faf1e5955110c35d0c207392ae20835707fd2a1e1114b82 DOSBox Staging 0.77.0 32-bit (zip) sha256: f718d07bab69e3e1be0b28207039cea2746c7e45b8ba7a19b625011f477e609a DOSBox Staging 0.76.0 32-bit (zip) sha256: 646d2f3fa8189e411589fedcb8148a295361693a6ce95d08e06f4a70e5a36b16 DOSBox Staging 0.75.2 64-bit (zip) sha256: 09f0ca911813a64b8814880eb6e49ad4dcdac9a5bb9263c4887ad82b71fad292 DOSBox Staging 0.75.2 32-bit (zip) sha256: 51dc171ff52ea395c6a22f09ebb98a93974a95c701ca81008368c22a66deced2 DOSBox Staging 0.75.1 64-bit (zip) sha256: 80c60c4377ff2882649f113b3cb3bcd407c17acaac344c49fa1fc4229813f012 DOSBox Staging 0.75.1 32-bit (zip) sha256: 843c742a348f575862e152e02cf174be0ea1c52bdb6e4bffd65f34af88b566b7 DOSBox Staging 0.75.0 32-bit (zip) sha256: 69046adcef2ef9920fbba8d40fc9e51f3dd144ba4549787e1816cf1c2ae87d71 DOSBox Staging 0.75.0-rc1 32-bit (zip) sha256: 738d2ae2101384f2eeaf1895de64cf1b4c76eaf7873de7e15b7f52145dfed7e7","title":"Older builds"},{"location":"downloads/windows/#building-from-source","text":"Of course you can always build DOSBox Staging straight from the source . Send us patches if you improve something!","title":"Building from source"},{"location":"downloads/release-notes/0.75.0-rc1/","text":"0.75.0-RC1 release notes \u00b6 Release date: 2020-04-22 Installation instructions \u00b6 Linux (or Steam on Linux ) Windows macOS This release is significant for several reasons: It\u2019s our first stable release. From this point forward, the 0.75.x series will only contain bugfixes. It kicks off the 0.76 development cycle, for which a number of features are already lined up. The new project homepage makes the downloads publicly accessible, without the need for a GitHub account. There\u2019s no human-readable changelog just yet\u2014there are ~1500 commits to comb through. Hopefully, within a couple of days, we\u2019ll be able to write a nice summary with a description of new features, improvements, and bugfixes. In the meantime, we invite everyone to start testing RC1 builds; there are some rough edges for sure\u2014if you find any bugs, please report them in our bugtracker . You can also ask questions on the #dosbox\u2011staging channel in Luxtorpeda Discord Server . This release includes all upstream changes until SVN r4336, and 857 Git commits on top of that. Have fun! The DOSBox Staging team","title":"0.75.0"},{"location":"downloads/release-notes/0.75.0-rc1/#0750-rc1-release-notes","text":"Release date: 2020-04-22","title":"0.75.0-RC1 release notes"},{"location":"downloads/release-notes/0.75.0-rc1/#installation-instructions","text":"Linux (or Steam on Linux ) Windows macOS This release is significant for several reasons: It\u2019s our first stable release. From this point forward, the 0.75.x series will only contain bugfixes. It kicks off the 0.76 development cycle, for which a number of features are already lined up. The new project homepage makes the downloads publicly accessible, without the need for a GitHub account. There\u2019s no human-readable changelog just yet\u2014there are ~1500 commits to comb through. Hopefully, within a couple of days, we\u2019ll be able to write a nice summary with a description of new features, improvements, and bugfixes. In the meantime, we invite everyone to start testing RC1 builds; there are some rough edges for sure\u2014if you find any bugs, please report them in our bugtracker . You can also ask questions on the #dosbox\u2011staging channel in Luxtorpeda Discord Server . This release includes all upstream changes until SVN r4336, and 857 Git commits on top of that. Have fun! The DOSBox Staging team","title":"Installation instructions"},{"location":"downloads/release-notes/0.75.0/","text":"0.75.0 release notes \u00b6 Release date: 2020-05-06 Summary \u00b6 This document contains the release notes for DOSBox Staging 0.75. It describes recently added, changed, or deleted features of DOSBox Staging. All users are encouraged to consult the New features in detail and Known issues sections before using DOSBox Staging, as these describe important interface changes as well as information discovered late in the release cycle or after the release. Installation instructions \u00b6 Linux (or Steam on Linux ) Windows macOS The DOSBox Staging project was created September 15, 2019 as a soft-fork of the SourceForge-based DOSBox project, which is a separate project having its own schedule and development priorities. New features in detail \u00b6 New features originating from our upstream (DOSBox) are marked with SVN . Upgrade to SDL 2.0 \u00b6 SDL 2.0 is a major update to the SDL 1.2 codebase, which has been unmaintained since 2013. SDL 2.0 supports more input devices; more output interfaces such as Wayland, and OpenGLES 1 and 2; low-latency audio using OpenSL ES; and improves cross-platform consistency. The migration to SDL 2.0: Dropped 3,211 lines of SDL 1.2 code in place of 1,664 lines, for just under a 50% reduction in code-size. Eliminated several OS-specific branches and all SDL1-specific kludges. Eased support for modern graphic APIs, and opened the field for new features and improvements. One example includes the new texture output mode, which uses SDL\u2019s 2D hardware-accelerated API rendering to a platform-specific backend. For example, Windows users can test: [sdl] output = texture texture_renderer = direct3d11 macOS users can try Metal: [sdl] output = texture texture_renderer = metal And everyone can use OpenGL as texture backend: [sdl] output = texture texture_renderer = opengl Or just use texture_renderer = auto to let SDL pick the backend appropriate for your operating system. Support FLAC, Opus, and MP3 CD-DA tracks \u00b6 FLAC, Opus, and MP3 (as well as MP2 and MP1) encoded audio can be imgmount ed as CD-DA tracks in DOSBox Staging, in addition to the usual WAV and Vorbis tracks supported by DOSBox. WAV support has been expanded to include Sony\u2019s Wave64 format. DOSBox Staging also supports tracks having sample resolutions of 24 and 16-bit; sampling rates of 96, 88.2, 48, 44.1, 22.05, and 11.025 kHz; and stereo or mono channel counts (to the extent each codec supports these variations). You can mix-and-match these properties and track types to best suit each track\u2019s content. The following sample CUE file depicts the use of every codec supported by DOSBox Staging: FILE \"data.iso\" BINARY TRACK 01 MODE1/2048 INDEX 01 00:00:00 FILE \"track02.opus\" OPUS TRACK 02 AUDIO PREGAP 00:02:00 INDEX 01 00:00:00 FILE \"track03.flac\" FLAC TRACK 03 AUDIO INDEX 01 00:00:00 FILE \"track04.mp3\" MP3 TRACK 04 AUDIO INDEX 01 00:00:00 FILE \"track05.w64\" W64 TRACK 05 AUDIO INDEX 01 00:00:00 FILE \"track06.ogg\" OGG TRACK 06 AUDIO INDEX 01 00:00:00 FILE \"track07.wav\" WAV TRACK 07 AUDIO INDEX 01 00:00:00 For devices with sufficient storage, we recommend ripping your CD-ROM audio to (lossless) FLAC tracks and adding seek-points using: flac -8 --output-name=trackXY.flac trackXY.wav metaflac --add-seekpoint=1s trackXY.flac FLAC typically achieves between 50% and 35% compression while producing binary-identical output versus WAV files. For limited-storage devices such as ARM single-board computers, Opus provides state-of-the-art lossy compression that exceeds all other formats, including Apple\u2019s AAC and AAC High-Efficiency formats. Opus allows even further space savings over MP3 or Vorbis track while matching or exceeding them in output quality. For example, CD-DA tracks consisting of monaural speech can be encoded with: opusenc --speech --bitrate 24 --downmix-mono trackXY.wav trackXY.opus When applied to Sierra\u2019s Jones in the Fast Lane audio track, Opus compresses it from 373 MB down to 6.4 MB (98.2% savings in disk space) with no discernible loss in quality. For CD-DA tracks consisting of sound effects and relatively simple music, Opus does fine with a bitrate between 54 and 70, whereas more complex musical tracks might need a bitrate of up to 84. Experiment and find your sweet spot! opusenc --bitrate 70 trackXY.wav trackXY.opus If your CD-DA tracks are encoded at 48 kHz (which is Opus\u2019s default internal rate), then feel free to configure DOSBox Staging\u2019s mixer rate to match, which ensures your CD-DA will not be resampled through your audio chain; as your sound card, USB speakers, and HDMI interface all (likely) operate at a native rate of 48 kHz. [mixer] rate = 48000 Pixel-perfect scaling mode \u00b6 Pixel-perfect output scales the image by the largest integer multiplier that fits within your monitor\u2019s native resolution. For example, given a 1920\u00d71080 monitor and a 320\u00d7200 game requiring aspect-correction, each of its pixels would be scaled by 4\u00d75 to produce a 1280\u00d71000 image. This preserves the original artwork without any edge blurring. To enable pixel-perfect output, apply the following settings to the indicated sections of your DOSBox Staging configuration file, as follows: [sdl] fullscreen = true output = texturepp [render] scaler = none glshader = none Pixel-perfect looks like this on a 1080p screen: Heroes of Might and Magic 2 (1996) \u2014 640\u00d7480 with a pixel aspect ratio (PAR) of 1:1, upscaled to 2\u00d72 Wolfenstein 3D (1992) \u2014 320\u00d7200 with a PAR of 1:1.2 (non-square pixels), upscaled to 4\u00d75 with a PAR of 1:1.25 Resizable window \u00b6 Being able to click and drag to resize an application\u2019s window is not a revolutionary feature by any measure; however it\u2019s a welcome addition for DOSBox Staging! Star Wars: Dark Forces (1995) intro playing while the DOSBox window is being resized vigorously This feature is a work-in-progress: it\u2019s available on Linux by default, and can be enabled for testing on Windows and macOS by setting the following (but note that it does not yet work correctly on these systems): [sdl] windowresolution = resizable On all systems, the resizable window is only available for output = opengl and glshader = sharp . Support will be expanded to more outputs and shaders in the future versions. AUTOTYPE command \u00b6 AUTOTYPE is a command-line tool provided by DOSBox Staging that performs scripted keyboard entry into the running DOS program or game. It can be used to reliably skip intros, provide input to answer initial startup or configuration questions, or conduct a simple demo. Simply run the command to learn more: Z:> autotype Some games that benefit from AUTOTYPE on startup are listed on the wiki page . Changed rendering defaults \u00b6 The following default configuration settings were changed to improve the out-of-the-box experience for the majority of games running on modern hardware. The default video settings now use SDL\u2019s OpenGL rendering backend, apply a 4:3 aspect ratio correction, and scale the image using the sharp OpenGL shader to provide relatively sharp pixels when in fullscreen mode. Battle Chess (1988) \u2014 at 1080p using the default settings Expand mouse control methods \u00b6 The prior \u201cautolocking\u201d mouse option used by DOSBox has been renamed in DOSBox Staging to capture_mouse , which is configured using two values defining how the mouse behaves. The first value defines how the mouse is controlled: onclick : the mouse will be captured with a click inside the window onstart : the mouse is captured immediately on start (similar to real DOS) seamless : the mouse will move seamlessly in and out of the window and cannot be captured nomouse : the mouse is disabled and hidden without any input sent to the game The second value defines how middle-clicks are handled: middlegame : middle-clicks are sent to the game (not used to uncapture the mouse) middlerelease : middle-click will uncapture the mouse when windowed (not sent to the game) For example: [sdl] capture_mouse = onclick middlerelease This will capture the mouse on the first click inside DOSBox Staging\u2019s window, and a middle-click will release the mouse. Note that the prior method to release the mouse still works (pressing Ctrl + F10 ). Note DOSBox Staging defaults to seamless mouse capture both to simplify multi-tasking in windowed-mode and provide a frustration-free experience for new users. However, some games and Windows 3.1 make their own adjustments to the mouse position and will cause an offset-effect. In these cases, we recommend switching to fullscreen ( Alt + Enter ) or configuring the mouse to capture onclick or onstart . Important These options do not affect the mouse behavior in fullscreen ( Alt + Enter ), as the mouse is always captured. Nuked OPL v1.8 \u00b6 The cycle-accurate Nuked OPL3 emulator is now used by default, this change improves AdLib and Sound Blaster FM music emulation accuracy. This improved accuracy comes at a slightly higher CPU use-cost, which is insignificant for the vast majority of users on typical desktop or laptop hardware. However, those using DOSBox Staging on old or CPU-limited hardware (capable of 30,000 dosbox \u201ccycles\u201d or less, such as the Raspberry Pi 3) will be served best using the fast OPL emulator (see the oplemu documentation provided in the configuration file). Reload key bindings at runtime \u00b6 The built-in CONFIG shell command is a bit old, but a little-known feature allows users to reconfigure DOSBox Staging at runtime. This is a nifty way to change configuration using batch scripts based on user input. Reloading key bindings \u00b6 You can now change key bindings at runtime by loading them from a file: Z:\\> config -set \"sdl mapperfile=<path-to-file>\" Other new options (SVN) \u00b6 DOSBox added a number of features to the CONFIG command. To list them all, run: Z:\\> config /? Configuration file locations \u00b6 Linux \u00b6 DOSBox Staging\u2019s configuration-file location has been updated to comply wit the XDG Base Directory Specification . This means DOSBox Staging will no longer going create configuration directories directly in your home directory. Configuration files are now located in: ~/.config/dosbox/ Users can customize the parent ( .config/ ) location by setting the XDG_CONFIG_HOME environment variable, according to the XDG Specification . macOS \u00b6 The path was slightly changed to avoid spaces in the default configuration filename and to group all configuration files in a single directory: ~/Library/Preferences/DOSBox/ Windows \u00b6 No changes; the configuration files are created in: C:\\Users\\<username>\\AppData\\Local\\DOSBox\\ Modem phonebook \u00b6 You can map fake phone numbers to Internet addresses which is useful for programs where limitations on phone number input field are too strict. Create a text file with the name specified in phonebookfile entry in the [serial] section in the DOSBox configuration file and add phone-address pairs per line, for example: 5551234 towel.blinkenlights.nl:23 Now you can dial the specified phone number and the emulated modem will connect to the address it\u2019s mapped to. Note that phone book does not allow any characters in the phone number that are ignored or denied by a real Hayes compatible modem. 64-bit dynamic recompilation (SVN) \u00b6 DOSBox has had dynamic recompilation support for a long time, but it was limited to 32-bit builds. Support for 64-bit dynarec improves CPU emulation speed and quality across the board\u2014this is especially visible to Linux and macOS users 1 . Stargunner (1996, freeware) \u2014 running on Linux x86\\_64 via Boxtron Before 64-bit dynarec, this game had serious emulation problems resulting in fluctuating emulation speed (sometimes too fast, sometimes too slow - regardless of cycles settings). This game was designed to run with constant 70 FPS and now it runs with constant 70 FPS. CGA improvements \u00b6 Maniac Mansion (1987) \u2014 with forced CGA mode: top-left: CGA, default palette; top-right: CGA mono, green tint; bottom-left: CGA composite, early model, default hue; bottom-right: CGA composite, late model, default hue. CGA monochrome mode \u00b6 Many CGA games from the 80\u2019s were designed to support monochromatic cathode-ray tube (CRT) monitors that used either an amber, green, or grayscale-shaded phosphor coating. As such, some games look much better when rendered using a similar monochrome palette. This mode is designed to emulate such displays. Use machine = cga_mono to turn on the feature. You can switch between green, amber, white, and paper-white palettes at runtime by pressing F11 . CGA Composite mode (SVN) \u00b6 Technical artifacts caused by the composite video format were cleverly used by game developers to generate extra colors (versus non-composite CGA) by manipulating pixel positions on the screen. For example, adjacent pixels would be partly \u201caveraged\u201d (through horizontal overlap), producing interposed solid colors or generating rudimentary transparency effects. Composite mode was added to DOSBox\u2019s CGA emulator in 2012, but was never back-ported to any of its stable releases. Most users are familiar this mode as its commonly included in other DOSBox forks. Once enabled, you can switch between color and composite modes, early and late CGA models, and adjust the hue at runtime. Note The default keybinding for manipulating CGA modes conflict with other essential bindings; it\u2019s advisable to change them if you plan to use this feature. The default key for turning on composite mode is F12 . GLSL shader support (SVN) \u00b6 Shaders written in OpenGL Shading Language (GLSL) offload the task of processing the emulated game\u2019s output to your GPU hardware. This allows the image to be altered in many ways, such as emulating the analog artifacts (scanlines, shadow masks, and phosphor glow) present in circa-1980s and 90s CRT monitor on modern 1080p and greater LCD panels. You can can select the shader to use by setting the glshader config param: [render] glshader = sharp It\u2019s also possible to provide your shader implementations by placing .glsl files in the configuration directory: Linux ~/.config/dosbox/glshaders/ macOS ~/Library/Preferences/DOSBox/glshaders/ Windows C:\\Users\\<USERNAME>\\AppData\\Local\\DOSBox\\glshaders\\ E.g. if you put a shader file called test.glsl in your config directory, you can select it as follows: glshader = test.glsl Note When using a GLSL shader, we recommend setting the scaler type to none to ensure image post-processing is performed exclusively by the shader (and not a mix of the two). Star Wars\u2122 \u2013 X-Wing: Collector's CD-ROM Edition (1994) Using CRT-Lottes shader on a 1080p screen; click on the image to enlarge it to see the fine details. This shader is not bundled with DOSBox Staging (yet); you can download it from here DATE and TIME commands (SVN) \u00b6 The traditional DATE and TIME DOS commands have been added to DOSBox. This allows the user to change the date seen by the software running inside the emulated environment: Z:\\> date Current date: Fri 05/01/2020 Type 'date MM-DD-YYYY' to change. Z:\\> time Current time: 11:08:23,34 Note that while the date can be changed, the time cannot. This feature is useful for running old batch scripts and bypassing date checks in some old software. Mount overlay support \u00b6 This feature allows the user to redirect new and changed files to a different location transparently. The files in the overlay and normal drives are merged at startup and kept up to date when the game writes to the disk. This feature is useful for redirecting save files or configuration files to a different location (e.g. for backup or cloud saves). Example usage: Z:\\> mount C real Drive C is mounted as local directory real/ Z:\\> mount C backup -t overlay Overlay backup/ on drive C mounted. Z:\\> C: C:\\> echo foo > test.txt C:\\> type TEST.TXT foo File TEST.TXT is written to the directory backup , and not to real . Overview of changes \u00b6 Removed features \u00b6 DOSBox Staging does not run on Operating System/2 (OS/2) or derivatives. DOSBox Staging does not run on Windows XP or earlier Windows versions. Removed support for old DirectDraw ( ddraw ) output. Use output = texture , texture_renderer = directx11 instead. Removed support for old overlay output. Use any other output. Removed support for relative window size ( windowresolution = X% ). Removed support for 64-bit Zip Motion Blocks Video (ZMBV) codec (old 32-bit codec still works). Removed support for CD-DA playback from physical disks. It is still possible to install games distributed on CDs by mounting them as directories. See #260 . Removed CD-DA playback support for tracks using the Audio Interchange File Format AIFF audio codec. Development changes \u00b6 Migrated the DOSBox source from Apache\u2019s Subversion (SVN) software versioning and revision control system to the Git distributed version-control system using GitHub, while preserving all publicly available project history. Active SVN branch paths were imported as Git branches (named svn/<name> ). SVN tag paths were imported as Git lightweight tags (named svn/<tag-name> ). Ongoing upstream SVN development work is being imported in a timely manner to the Git branch named svn/trunk . C++11 language constructs are now allowed. Implemented a Continuous Integration (CI) system that builds on every code push to provide immediate feedback to developers regarding build-success and warning-counts on: Windows x86_64 using GCC 32 and 64-bit, Clang 32 and 64-bit, and VisualStudio 64-bit compilers macOS x86_64 using GCC and Clang compilers Linux x86_64, ARMv6, ARMv7, IBM LinuxONE, and IBM POWER8 platforms using various versions of GCC and Clang Added static analysis checks performed by LLVM\u2019s Clang, Synopsys\u2019s Coverity, and VIVA64\u2019s Program Verification Systems (PVS) Studio. Added dynamic analysis checks performed by Clang\u2019s undefined-behavior (UB) sanitizer and GCC\u2019s UB and Address sanitizers. The CI system includes gated checks that allow maintainers to focus on code functionality and correctness. These automated checks guarantee that new code: builds cleanly on all supported platforms and compilers, adds no new compiler warnings, and adds no new static or dynamic analysis issues. Notable progress has been made in reducing the number of warnings and analysis issues flagged by these tools. Windows: the build-system was adjusted to allow easy compilation, without manual download or patching of dependencies. We use vcpkg to manage dependencies. The solution file was fixed to work with Visual Studio 2019. Linux and macOS: implemented a number of small build-system improvements. Automated the compilation of release-style builds against the latest main and feature branches. These not only save time for testers wanting to verify new features and bugfixes, but also ensures they\u2019re running builds compiled using would-be release settings. macOS: release binaries are compiled with optimizations supporting Intel Nehalem-based instructions (and newer), as this matches the minimum processor requirements set by macOS Catalina. Release packages are scanned using up-to-date Antivirus software: ClamAV for Linux and macOS, and Windows Defender for Windows. The project has published a Code of Conduct along with clear Contributor Guidelines. Known issues \u00b6 Inconsistent minimum window size with windowresolution = resizable when leaving fullscreen. Windows, macOS: Window content is not refreshed when resizing. Windows, macOS: Emulation stops when moving or resizing window. Linux: Wayland crashes (Wayland support is \u201cexperimental\u201d at the moment). Linux: Splash screen is sometimes transparent or corrupted on KDE. Submit new issues or learn more about existing ones using our bug-tracker . Contributors \u00b6 During the DOSBox Staging 0.75 development period: 11 DOSBox Staging contributors submitted 208 pull requests comprised of 780 commits written by 18 authors . 69 DOSBox Staging issues were reported and addressed. 54 DOSBox Staging wiki updates were made. Three DOSBox (SVN) maintainers committed 76 changes written by 5 authors. These changes have been incorporated into DOSBox Staging. Maintainers \u00b6 Patryk Obara kcgen Anton Shepelev (ant-222) Direct contributors \u00b6 Anton Shepelev (ant-222) Joshua Fern kcgen Marco Maccaferri NicknineTheEagle Nopey Nope numberZero Patrick McMorris Patryk Obara Troy Campbell Wouter Wijsman Testers and wiki contributors \u00b6 GranMinigun kas1e nemo93 rderooy Indirect contributors \u00b6 Library or patch authors, upstream SVN developers, etc. Alexey Khokholov (nukeykt) Arthur Ouellet David Reid jmarsh NY00123 Peter Veenstra ripsaw8080 Ryan C. Gordon Sean Barrett Sjoerd van der Berg VileRancour Yann Collet Changelog \u00b6 You can read detailed changelog via Git, e.g. using the following command: git shortlog ^v0.75.0-pre v0.75.0 --no-merges Merged-in community patches and libraries \u00b6 The following lists those merges performed by maintainers either on behalf-of or making use of patches or libraries authored by community members (in alphabetic order). kcgen Add built-in xxHash (v0.7.3) (Yann Collet) Add built-in Vorbis codec: (v1.17) (Sean Barrett) Add built-in SDL_sound r599 (LGPL) (Ryan C. Gordon) Add built-in C++ object serializer (Arthur Cuellet) Add built-in FLAC codec: dr_flac v0.12.11 (David Reid) Add built-in MP3 codec: dr_mp3 v0.6.4 (David Reid) Add built-in WAV codec: dr_wav v0.12.1 (David Reid) Patryk Obara Replace SDL 1.2 with SDL 2.0 (based on work of NY00123) Add Nuked OPL3 emulator v1.8 (Alexey Khokholov) Peter Veenstra Changes merged-in to SVN Add OpenGL shader support (ny00123 and refined by jmarsh) Add several builtin shaders that mimic the scalers and some extra (jmarsh) Fix xcmpchg in dyn_x86 core. Allows Quickview to work in that core (jmarsh) Additional refinements and speed ups (jmarsh) Fix some issues with commit 4282 (Patryk Obara and jmarsh) Switch to a different way to calculate the table offsets (jmarsh) Fix boundary checks for word/dword memory access. Speeds up dynamic 32 bit core a bit (jmarsh) Add 64-bit support to dynamic_x86 core from vogons topic 67673 (jmarsh) Michael Zijlstra: Add cga_mono machine (VileRancour) Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project. DOSBox Staging 0.75.0 stable Windows build is still 32-bit; Linux and macOS builds are 64-bits. \u21a9","title":"0.75.0"},{"location":"downloads/release-notes/0.75.0/#0750-release-notes","text":"Release date: 2020-05-06","title":"0.75.0 release notes"},{"location":"downloads/release-notes/0.75.0/#summary","text":"This document contains the release notes for DOSBox Staging 0.75. It describes recently added, changed, or deleted features of DOSBox Staging. All users are encouraged to consult the New features in detail and Known issues sections before using DOSBox Staging, as these describe important interface changes as well as information discovered late in the release cycle or after the release.","title":"Summary"},{"location":"downloads/release-notes/0.75.0/#installation-instructions","text":"Linux (or Steam on Linux ) Windows macOS The DOSBox Staging project was created September 15, 2019 as a soft-fork of the SourceForge-based DOSBox project, which is a separate project having its own schedule and development priorities.","title":"Installation instructions"},{"location":"downloads/release-notes/0.75.0/#new-features-in-detail","text":"New features originating from our upstream (DOSBox) are marked with SVN .","title":"New features in detail"},{"location":"downloads/release-notes/0.75.0/#upgrade-to-sdl-20","text":"SDL 2.0 is a major update to the SDL 1.2 codebase, which has been unmaintained since 2013. SDL 2.0 supports more input devices; more output interfaces such as Wayland, and OpenGLES 1 and 2; low-latency audio using OpenSL ES; and improves cross-platform consistency. The migration to SDL 2.0: Dropped 3,211 lines of SDL 1.2 code in place of 1,664 lines, for just under a 50% reduction in code-size. Eliminated several OS-specific branches and all SDL1-specific kludges. Eased support for modern graphic APIs, and opened the field for new features and improvements. One example includes the new texture output mode, which uses SDL\u2019s 2D hardware-accelerated API rendering to a platform-specific backend. For example, Windows users can test: [sdl] output = texture texture_renderer = direct3d11 macOS users can try Metal: [sdl] output = texture texture_renderer = metal And everyone can use OpenGL as texture backend: [sdl] output = texture texture_renderer = opengl Or just use texture_renderer = auto to let SDL pick the backend appropriate for your operating system.","title":"Upgrade to SDL 2.0"},{"location":"downloads/release-notes/0.75.0/#support-flac-opus-and-mp3-cd-da-tracks","text":"FLAC, Opus, and MP3 (as well as MP2 and MP1) encoded audio can be imgmount ed as CD-DA tracks in DOSBox Staging, in addition to the usual WAV and Vorbis tracks supported by DOSBox. WAV support has been expanded to include Sony\u2019s Wave64 format. DOSBox Staging also supports tracks having sample resolutions of 24 and 16-bit; sampling rates of 96, 88.2, 48, 44.1, 22.05, and 11.025 kHz; and stereo or mono channel counts (to the extent each codec supports these variations). You can mix-and-match these properties and track types to best suit each track\u2019s content. The following sample CUE file depicts the use of every codec supported by DOSBox Staging: FILE \"data.iso\" BINARY TRACK 01 MODE1/2048 INDEX 01 00:00:00 FILE \"track02.opus\" OPUS TRACK 02 AUDIO PREGAP 00:02:00 INDEX 01 00:00:00 FILE \"track03.flac\" FLAC TRACK 03 AUDIO INDEX 01 00:00:00 FILE \"track04.mp3\" MP3 TRACK 04 AUDIO INDEX 01 00:00:00 FILE \"track05.w64\" W64 TRACK 05 AUDIO INDEX 01 00:00:00 FILE \"track06.ogg\" OGG TRACK 06 AUDIO INDEX 01 00:00:00 FILE \"track07.wav\" WAV TRACK 07 AUDIO INDEX 01 00:00:00 For devices with sufficient storage, we recommend ripping your CD-ROM audio to (lossless) FLAC tracks and adding seek-points using: flac -8 --output-name=trackXY.flac trackXY.wav metaflac --add-seekpoint=1s trackXY.flac FLAC typically achieves between 50% and 35% compression while producing binary-identical output versus WAV files. For limited-storage devices such as ARM single-board computers, Opus provides state-of-the-art lossy compression that exceeds all other formats, including Apple\u2019s AAC and AAC High-Efficiency formats. Opus allows even further space savings over MP3 or Vorbis track while matching or exceeding them in output quality. For example, CD-DA tracks consisting of monaural speech can be encoded with: opusenc --speech --bitrate 24 --downmix-mono trackXY.wav trackXY.opus When applied to Sierra\u2019s Jones in the Fast Lane audio track, Opus compresses it from 373 MB down to 6.4 MB (98.2% savings in disk space) with no discernible loss in quality. For CD-DA tracks consisting of sound effects and relatively simple music, Opus does fine with a bitrate between 54 and 70, whereas more complex musical tracks might need a bitrate of up to 84. Experiment and find your sweet spot! opusenc --bitrate 70 trackXY.wav trackXY.opus If your CD-DA tracks are encoded at 48 kHz (which is Opus\u2019s default internal rate), then feel free to configure DOSBox Staging\u2019s mixer rate to match, which ensures your CD-DA will not be resampled through your audio chain; as your sound card, USB speakers, and HDMI interface all (likely) operate at a native rate of 48 kHz. [mixer] rate = 48000","title":"Support FLAC, Opus, and MP3 CD-DA tracks"},{"location":"downloads/release-notes/0.75.0/#pixel-perfect-scaling-mode","text":"Pixel-perfect output scales the image by the largest integer multiplier that fits within your monitor\u2019s native resolution. For example, given a 1920\u00d71080 monitor and a 320\u00d7200 game requiring aspect-correction, each of its pixels would be scaled by 4\u00d75 to produce a 1280\u00d71000 image. This preserves the original artwork without any edge blurring. To enable pixel-perfect output, apply the following settings to the indicated sections of your DOSBox Staging configuration file, as follows: [sdl] fullscreen = true output = texturepp [render] scaler = none glshader = none Pixel-perfect looks like this on a 1080p screen: Heroes of Might and Magic 2 (1996) \u2014 640\u00d7480 with a pixel aspect ratio (PAR) of 1:1, upscaled to 2\u00d72 Wolfenstein 3D (1992) \u2014 320\u00d7200 with a PAR of 1:1.2 (non-square pixels), upscaled to 4\u00d75 with a PAR of 1:1.25","title":"Pixel-perfect scaling mode"},{"location":"downloads/release-notes/0.75.0/#resizable-window","text":"Being able to click and drag to resize an application\u2019s window is not a revolutionary feature by any measure; however it\u2019s a welcome addition for DOSBox Staging! Star Wars: Dark Forces (1995) intro playing while the DOSBox window is being resized vigorously This feature is a work-in-progress: it\u2019s available on Linux by default, and can be enabled for testing on Windows and macOS by setting the following (but note that it does not yet work correctly on these systems): [sdl] windowresolution = resizable On all systems, the resizable window is only available for output = opengl and glshader = sharp . Support will be expanded to more outputs and shaders in the future versions.","title":"Resizable window"},{"location":"downloads/release-notes/0.75.0/#autotype-command","text":"AUTOTYPE is a command-line tool provided by DOSBox Staging that performs scripted keyboard entry into the running DOS program or game. It can be used to reliably skip intros, provide input to answer initial startup or configuration questions, or conduct a simple demo. Simply run the command to learn more: Z:> autotype Some games that benefit from AUTOTYPE on startup are listed on the wiki page .","title":"AUTOTYPE command"},{"location":"downloads/release-notes/0.75.0/#changed-rendering-defaults","text":"The following default configuration settings were changed to improve the out-of-the-box experience for the majority of games running on modern hardware. The default video settings now use SDL\u2019s OpenGL rendering backend, apply a 4:3 aspect ratio correction, and scale the image using the sharp OpenGL shader to provide relatively sharp pixels when in fullscreen mode. Battle Chess (1988) \u2014 at 1080p using the default settings","title":"Changed rendering defaults"},{"location":"downloads/release-notes/0.75.0/#expand-mouse-control-methods","text":"The prior \u201cautolocking\u201d mouse option used by DOSBox has been renamed in DOSBox Staging to capture_mouse , which is configured using two values defining how the mouse behaves. The first value defines how the mouse is controlled: onclick : the mouse will be captured with a click inside the window onstart : the mouse is captured immediately on start (similar to real DOS) seamless : the mouse will move seamlessly in and out of the window and cannot be captured nomouse : the mouse is disabled and hidden without any input sent to the game The second value defines how middle-clicks are handled: middlegame : middle-clicks are sent to the game (not used to uncapture the mouse) middlerelease : middle-click will uncapture the mouse when windowed (not sent to the game) For example: [sdl] capture_mouse = onclick middlerelease This will capture the mouse on the first click inside DOSBox Staging\u2019s window, and a middle-click will release the mouse. Note that the prior method to release the mouse still works (pressing Ctrl + F10 ). Note DOSBox Staging defaults to seamless mouse capture both to simplify multi-tasking in windowed-mode and provide a frustration-free experience for new users. However, some games and Windows 3.1 make their own adjustments to the mouse position and will cause an offset-effect. In these cases, we recommend switching to fullscreen ( Alt + Enter ) or configuring the mouse to capture onclick or onstart . Important These options do not affect the mouse behavior in fullscreen ( Alt + Enter ), as the mouse is always captured.","title":"Expand mouse control methods"},{"location":"downloads/release-notes/0.75.0/#nuked-opl-v18","text":"The cycle-accurate Nuked OPL3 emulator is now used by default, this change improves AdLib and Sound Blaster FM music emulation accuracy. This improved accuracy comes at a slightly higher CPU use-cost, which is insignificant for the vast majority of users on typical desktop or laptop hardware. However, those using DOSBox Staging on old or CPU-limited hardware (capable of 30,000 dosbox \u201ccycles\u201d or less, such as the Raspberry Pi 3) will be served best using the fast OPL emulator (see the oplemu documentation provided in the configuration file).","title":"Nuked OPL v1.8"},{"location":"downloads/release-notes/0.75.0/#reload-key-bindings-at-runtime","text":"The built-in CONFIG shell command is a bit old, but a little-known feature allows users to reconfigure DOSBox Staging at runtime. This is a nifty way to change configuration using batch scripts based on user input.","title":"Reload key bindings at runtime"},{"location":"downloads/release-notes/0.75.0/#reloading-key-bindings","text":"You can now change key bindings at runtime by loading them from a file: Z:\\> config -set \"sdl mapperfile=<path-to-file>\"","title":"Reloading key bindings"},{"location":"downloads/release-notes/0.75.0/#other-new-options-svn","text":"DOSBox added a number of features to the CONFIG command. To list them all, run: Z:\\> config /?","title":"Other new options (SVN)"},{"location":"downloads/release-notes/0.75.0/#configuration-file-locations","text":"","title":"Configuration file locations"},{"location":"downloads/release-notes/0.75.0/#linux","text":"DOSBox Staging\u2019s configuration-file location has been updated to comply wit the XDG Base Directory Specification . This means DOSBox Staging will no longer going create configuration directories directly in your home directory. Configuration files are now located in: ~/.config/dosbox/ Users can customize the parent ( .config/ ) location by setting the XDG_CONFIG_HOME environment variable, according to the XDG Specification .","title":"Linux"},{"location":"downloads/release-notes/0.75.0/#macos","text":"The path was slightly changed to avoid spaces in the default configuration filename and to group all configuration files in a single directory: ~/Library/Preferences/DOSBox/","title":"macOS"},{"location":"downloads/release-notes/0.75.0/#windows","text":"No changes; the configuration files are created in: C:\\Users\\<username>\\AppData\\Local\\DOSBox\\","title":"Windows"},{"location":"downloads/release-notes/0.75.0/#modem-phonebook","text":"You can map fake phone numbers to Internet addresses which is useful for programs where limitations on phone number input field are too strict. Create a text file with the name specified in phonebookfile entry in the [serial] section in the DOSBox configuration file and add phone-address pairs per line, for example: 5551234 towel.blinkenlights.nl:23 Now you can dial the specified phone number and the emulated modem will connect to the address it\u2019s mapped to. Note that phone book does not allow any characters in the phone number that are ignored or denied by a real Hayes compatible modem.","title":"Modem phonebook"},{"location":"downloads/release-notes/0.75.0/#64-bit-dynamic-recompilation-svn","text":"DOSBox has had dynamic recompilation support for a long time, but it was limited to 32-bit builds. Support for 64-bit dynarec improves CPU emulation speed and quality across the board\u2014this is especially visible to Linux and macOS users 1 . Stargunner (1996, freeware) \u2014 running on Linux x86\\_64 via Boxtron Before 64-bit dynarec, this game had serious emulation problems resulting in fluctuating emulation speed (sometimes too fast, sometimes too slow - regardless of cycles settings). This game was designed to run with constant 70 FPS and now it runs with constant 70 FPS.","title":"64-bit dynamic recompilation (SVN)"},{"location":"downloads/release-notes/0.75.0/#cga-improvements","text":"Maniac Mansion (1987) \u2014 with forced CGA mode: top-left: CGA, default palette; top-right: CGA mono, green tint; bottom-left: CGA composite, early model, default hue; bottom-right: CGA composite, late model, default hue.","title":"CGA improvements"},{"location":"downloads/release-notes/0.75.0/#cga-monochrome-mode","text":"Many CGA games from the 80\u2019s were designed to support monochromatic cathode-ray tube (CRT) monitors that used either an amber, green, or grayscale-shaded phosphor coating. As such, some games look much better when rendered using a similar monochrome palette. This mode is designed to emulate such displays. Use machine = cga_mono to turn on the feature. You can switch between green, amber, white, and paper-white palettes at runtime by pressing F11 .","title":"CGA monochrome mode"},{"location":"downloads/release-notes/0.75.0/#cga-composite-mode-svn","text":"Technical artifacts caused by the composite video format were cleverly used by game developers to generate extra colors (versus non-composite CGA) by manipulating pixel positions on the screen. For example, adjacent pixels would be partly \u201caveraged\u201d (through horizontal overlap), producing interposed solid colors or generating rudimentary transparency effects. Composite mode was added to DOSBox\u2019s CGA emulator in 2012, but was never back-ported to any of its stable releases. Most users are familiar this mode as its commonly included in other DOSBox forks. Once enabled, you can switch between color and composite modes, early and late CGA models, and adjust the hue at runtime. Note The default keybinding for manipulating CGA modes conflict with other essential bindings; it\u2019s advisable to change them if you plan to use this feature. The default key for turning on composite mode is F12 .","title":"CGA Composite mode (SVN)"},{"location":"downloads/release-notes/0.75.0/#glsl-shader-support-svn","text":"Shaders written in OpenGL Shading Language (GLSL) offload the task of processing the emulated game\u2019s output to your GPU hardware. This allows the image to be altered in many ways, such as emulating the analog artifacts (scanlines, shadow masks, and phosphor glow) present in circa-1980s and 90s CRT monitor on modern 1080p and greater LCD panels. You can can select the shader to use by setting the glshader config param: [render] glshader = sharp It\u2019s also possible to provide your shader implementations by placing .glsl files in the configuration directory: Linux ~/.config/dosbox/glshaders/ macOS ~/Library/Preferences/DOSBox/glshaders/ Windows C:\\Users\\<USERNAME>\\AppData\\Local\\DOSBox\\glshaders\\ E.g. if you put a shader file called test.glsl in your config directory, you can select it as follows: glshader = test.glsl Note When using a GLSL shader, we recommend setting the scaler type to none to ensure image post-processing is performed exclusively by the shader (and not a mix of the two). Star Wars\u2122 \u2013 X-Wing: Collector's CD-ROM Edition (1994) Using CRT-Lottes shader on a 1080p screen; click on the image to enlarge it to see the fine details. This shader is not bundled with DOSBox Staging (yet); you can download it from here","title":"GLSL shader support (SVN)"},{"location":"downloads/release-notes/0.75.0/#date-and-time-commands-svn","text":"The traditional DATE and TIME DOS commands have been added to DOSBox. This allows the user to change the date seen by the software running inside the emulated environment: Z:\\> date Current date: Fri 05/01/2020 Type 'date MM-DD-YYYY' to change. Z:\\> time Current time: 11:08:23,34 Note that while the date can be changed, the time cannot. This feature is useful for running old batch scripts and bypassing date checks in some old software.","title":"DATE and TIME commands (SVN)"},{"location":"downloads/release-notes/0.75.0/#mount-overlay-support","text":"This feature allows the user to redirect new and changed files to a different location transparently. The files in the overlay and normal drives are merged at startup and kept up to date when the game writes to the disk. This feature is useful for redirecting save files or configuration files to a different location (e.g. for backup or cloud saves). Example usage: Z:\\> mount C real Drive C is mounted as local directory real/ Z:\\> mount C backup -t overlay Overlay backup/ on drive C mounted. Z:\\> C: C:\\> echo foo > test.txt C:\\> type TEST.TXT foo File TEST.TXT is written to the directory backup , and not to real .","title":"Mount overlay support"},{"location":"downloads/release-notes/0.75.0/#overview-of-changes","text":"","title":"Overview of changes"},{"location":"downloads/release-notes/0.75.0/#removed-features","text":"DOSBox Staging does not run on Operating System/2 (OS/2) or derivatives. DOSBox Staging does not run on Windows XP or earlier Windows versions. Removed support for old DirectDraw ( ddraw ) output. Use output = texture , texture_renderer = directx11 instead. Removed support for old overlay output. Use any other output. Removed support for relative window size ( windowresolution = X% ). Removed support for 64-bit Zip Motion Blocks Video (ZMBV) codec (old 32-bit codec still works). Removed support for CD-DA playback from physical disks. It is still possible to install games distributed on CDs by mounting them as directories. See #260 . Removed CD-DA playback support for tracks using the Audio Interchange File Format AIFF audio codec.","title":"Removed features"},{"location":"downloads/release-notes/0.75.0/#development-changes","text":"Migrated the DOSBox source from Apache\u2019s Subversion (SVN) software versioning and revision control system to the Git distributed version-control system using GitHub, while preserving all publicly available project history. Active SVN branch paths were imported as Git branches (named svn/<name> ). SVN tag paths were imported as Git lightweight tags (named svn/<tag-name> ). Ongoing upstream SVN development work is being imported in a timely manner to the Git branch named svn/trunk . C++11 language constructs are now allowed. Implemented a Continuous Integration (CI) system that builds on every code push to provide immediate feedback to developers regarding build-success and warning-counts on: Windows x86_64 using GCC 32 and 64-bit, Clang 32 and 64-bit, and VisualStudio 64-bit compilers macOS x86_64 using GCC and Clang compilers Linux x86_64, ARMv6, ARMv7, IBM LinuxONE, and IBM POWER8 platforms using various versions of GCC and Clang Added static analysis checks performed by LLVM\u2019s Clang, Synopsys\u2019s Coverity, and VIVA64\u2019s Program Verification Systems (PVS) Studio. Added dynamic analysis checks performed by Clang\u2019s undefined-behavior (UB) sanitizer and GCC\u2019s UB and Address sanitizers. The CI system includes gated checks that allow maintainers to focus on code functionality and correctness. These automated checks guarantee that new code: builds cleanly on all supported platforms and compilers, adds no new compiler warnings, and adds no new static or dynamic analysis issues. Notable progress has been made in reducing the number of warnings and analysis issues flagged by these tools. Windows: the build-system was adjusted to allow easy compilation, without manual download or patching of dependencies. We use vcpkg to manage dependencies. The solution file was fixed to work with Visual Studio 2019. Linux and macOS: implemented a number of small build-system improvements. Automated the compilation of release-style builds against the latest main and feature branches. These not only save time for testers wanting to verify new features and bugfixes, but also ensures they\u2019re running builds compiled using would-be release settings. macOS: release binaries are compiled with optimizations supporting Intel Nehalem-based instructions (and newer), as this matches the minimum processor requirements set by macOS Catalina. Release packages are scanned using up-to-date Antivirus software: ClamAV for Linux and macOS, and Windows Defender for Windows. The project has published a Code of Conduct along with clear Contributor Guidelines.","title":"Development changes"},{"location":"downloads/release-notes/0.75.0/#known-issues","text":"Inconsistent minimum window size with windowresolution = resizable when leaving fullscreen. Windows, macOS: Window content is not refreshed when resizing. Windows, macOS: Emulation stops when moving or resizing window. Linux: Wayland crashes (Wayland support is \u201cexperimental\u201d at the moment). Linux: Splash screen is sometimes transparent or corrupted on KDE. Submit new issues or learn more about existing ones using our bug-tracker .","title":"Known issues"},{"location":"downloads/release-notes/0.75.0/#contributors","text":"During the DOSBox Staging 0.75 development period: 11 DOSBox Staging contributors submitted 208 pull requests comprised of 780 commits written by 18 authors . 69 DOSBox Staging issues were reported and addressed. 54 DOSBox Staging wiki updates were made. Three DOSBox (SVN) maintainers committed 76 changes written by 5 authors. These changes have been incorporated into DOSBox Staging.","title":"Contributors"},{"location":"downloads/release-notes/0.75.0/#maintainers","text":"Patryk Obara kcgen Anton Shepelev (ant-222)","title":"Maintainers"},{"location":"downloads/release-notes/0.75.0/#direct-contributors","text":"Anton Shepelev (ant-222) Joshua Fern kcgen Marco Maccaferri NicknineTheEagle Nopey Nope numberZero Patrick McMorris Patryk Obara Troy Campbell Wouter Wijsman","title":"Direct contributors"},{"location":"downloads/release-notes/0.75.0/#testers-and-wiki-contributors","text":"GranMinigun kas1e nemo93 rderooy","title":"Testers and wiki contributors"},{"location":"downloads/release-notes/0.75.0/#indirect-contributors","text":"Library or patch authors, upstream SVN developers, etc. Alexey Khokholov (nukeykt) Arthur Ouellet David Reid jmarsh NY00123 Peter Veenstra ripsaw8080 Ryan C. Gordon Sean Barrett Sjoerd van der Berg VileRancour Yann Collet","title":"Indirect contributors"},{"location":"downloads/release-notes/0.75.0/#changelog","text":"You can read detailed changelog via Git, e.g. using the following command: git shortlog ^v0.75.0-pre v0.75.0 --no-merges","title":"Changelog"},{"location":"downloads/release-notes/0.75.0/#merged-in-community-patches-and-libraries","text":"The following lists those merges performed by maintainers either on behalf-of or making use of patches or libraries authored by community members (in alphabetic order). kcgen Add built-in xxHash (v0.7.3) (Yann Collet) Add built-in Vorbis codec: (v1.17) (Sean Barrett) Add built-in SDL_sound r599 (LGPL) (Ryan C. Gordon) Add built-in C++ object serializer (Arthur Cuellet) Add built-in FLAC codec: dr_flac v0.12.11 (David Reid) Add built-in MP3 codec: dr_mp3 v0.6.4 (David Reid) Add built-in WAV codec: dr_wav v0.12.1 (David Reid) Patryk Obara Replace SDL 1.2 with SDL 2.0 (based on work of NY00123) Add Nuked OPL3 emulator v1.8 (Alexey Khokholov) Peter Veenstra Changes merged-in to SVN Add OpenGL shader support (ny00123 and refined by jmarsh) Add several builtin shaders that mimic the scalers and some extra (jmarsh) Fix xcmpchg in dyn_x86 core. Allows Quickview to work in that core (jmarsh) Additional refinements and speed ups (jmarsh) Fix some issues with commit 4282 (Patryk Obara and jmarsh) Switch to a different way to calculate the table offsets (jmarsh) Fix boundary checks for word/dword memory access. Speeds up dynamic 32 bit core a bit (jmarsh) Add 64-bit support to dynamic_x86 core from vogons topic 67673 (jmarsh) Michael Zijlstra: Add cga_mono machine (VileRancour)","title":"Merged-in community patches and libraries"},{"location":"downloads/release-notes/0.75.0/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project. DOSBox Staging 0.75.0 stable Windows build is still 32-bit; Linux and macOS builds are 64-bits. \u21a9","title":"Thank you"},{"location":"downloads/release-notes/0.75.1/","text":"0.75.1 release notes \u00b6 Release date: 2020-08-19 Summary \u00b6 This is a small bugfix release from 0.75.x stable branch\u2014it includes a few changes and bugfixes backported from upcoming 0.76.x version. How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Brave souls interested in the latest features can test our work-in-progress 0.76.x alpha builds . Please report any issues in our bugtracker . Also, check out our growing Wiki . New features in detail \u00b6 Add support for binding more controller axes \u00b6 Users can now comfortably use both sticks, as commonly found on modern controllers (like DualShock or any Xbox controller). Previously, only one stick could be mapped. This change does not make old games \u201cmagically\u201d recognize all features of modern controllers. You need to map additional controller events to emulated keyboard, mouse, or joystick events using DOSBox\u2019s keymapper ( Ctrl + F1 ). This was a highly-requested community patches that wasn\u2019t accepted by the upstream DOSBox project. We\u2019ve included the 10-axes per controller version of the patch in DOSBox Staging. Provide Windows x64 builds \u00b6 Windows 64-bit builds are now provided alongside 32-bit builds. Additional performance optimizations ( WPO ) are enabled for both builds. Linux and macOS builds have been similarly optimized using LTO since the 0.75.0 release. Both Windows builds now require SSE 4.2 instruction set, which is now on par with the Linux and macOS builds that have required SSE 4.2 support since the 0.75.0 release. Steam Hardware survey indicates that 97.45% users have CPUs supporting SSE 4.2, so your CPU is very likely good enough Log base address of emulated memory \u00b6 This change was created per request from users of Cheat Engine, but it might be useful for other memory scanners/debuggers as well. Base memory address of DOS\u2019s emulated memory region is now logged to the console: MEMORY: Base address: 0x5c758e0 MEMORY: Using 4096 DOS memory pages (16 MiB) Users previously had to debug the dosbox binary to discover the base address; an easy but tedious process. Bugfixes \u00b6 Correct CD audio playback for games using single BIN/CUE; fixes a regression in The Secret of Monkey Island . ( #385 ) Fix build issue for Windows x64 target after VS2019 update. ( #389 ) Fix a crash happening after bindings for 2 controllers were added and then one controller is disconnected. ( #405 ) Fix a crash on exit after removing controller actions bound to keyboard events. ( #405 ) Prevent crash on SDL2 re-creating OpenGL window. ( #509 ) Provide detailed help for dir /? command. ( #506 ) Fix pixel-perfect mode not respecting aspect = false setting. ( #544 ) Contributors \u00b6 Maintainers \u00b6 Patryk Obara kcgen Direct contributors \u00b6 Expack3 kcgen nemo93 Patryk Obara WengierWu Indirect contributors \u00b6 cfoesch Changelog \u00b6 You can read detailed changelog via Git, e.g. using the following command: git shortlog ^v0.75.0 v0.75.1 Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"0.75.1"},{"location":"downloads/release-notes/0.75.1/#0751-release-notes","text":"Release date: 2020-08-19","title":"0.75.1 release notes"},{"location":"downloads/release-notes/0.75.1/#summary","text":"This is a small bugfix release from 0.75.x stable branch\u2014it includes a few changes and bugfixes backported from upcoming 0.76.x version.","title":"Summary"},{"location":"downloads/release-notes/0.75.1/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Brave souls interested in the latest features can test our work-in-progress 0.76.x alpha builds . Please report any issues in our bugtracker . Also, check out our growing Wiki .","title":"How to upgrade"},{"location":"downloads/release-notes/0.75.1/#new-features-in-detail","text":"","title":"New features in detail"},{"location":"downloads/release-notes/0.75.1/#add-support-for-binding-more-controller-axes","text":"Users can now comfortably use both sticks, as commonly found on modern controllers (like DualShock or any Xbox controller). Previously, only one stick could be mapped. This change does not make old games \u201cmagically\u201d recognize all features of modern controllers. You need to map additional controller events to emulated keyboard, mouse, or joystick events using DOSBox\u2019s keymapper ( Ctrl + F1 ). This was a highly-requested community patches that wasn\u2019t accepted by the upstream DOSBox project. We\u2019ve included the 10-axes per controller version of the patch in DOSBox Staging.","title":"Add support for binding more controller axes"},{"location":"downloads/release-notes/0.75.1/#provide-windows-x64-builds","text":"Windows 64-bit builds are now provided alongside 32-bit builds. Additional performance optimizations ( WPO ) are enabled for both builds. Linux and macOS builds have been similarly optimized using LTO since the 0.75.0 release. Both Windows builds now require SSE 4.2 instruction set, which is now on par with the Linux and macOS builds that have required SSE 4.2 support since the 0.75.0 release. Steam Hardware survey indicates that 97.45% users have CPUs supporting SSE 4.2, so your CPU is very likely good enough","title":"Provide Windows x64 builds"},{"location":"downloads/release-notes/0.75.1/#log-base-address-of-emulated-memory","text":"This change was created per request from users of Cheat Engine, but it might be useful for other memory scanners/debuggers as well. Base memory address of DOS\u2019s emulated memory region is now logged to the console: MEMORY: Base address: 0x5c758e0 MEMORY: Using 4096 DOS memory pages (16 MiB) Users previously had to debug the dosbox binary to discover the base address; an easy but tedious process.","title":"Log base address of emulated memory"},{"location":"downloads/release-notes/0.75.1/#bugfixes","text":"Correct CD audio playback for games using single BIN/CUE; fixes a regression in The Secret of Monkey Island . ( #385 ) Fix build issue for Windows x64 target after VS2019 update. ( #389 ) Fix a crash happening after bindings for 2 controllers were added and then one controller is disconnected. ( #405 ) Fix a crash on exit after removing controller actions bound to keyboard events. ( #405 ) Prevent crash on SDL2 re-creating OpenGL window. ( #509 ) Provide detailed help for dir /? command. ( #506 ) Fix pixel-perfect mode not respecting aspect = false setting. ( #544 )","title":"Bugfixes"},{"location":"downloads/release-notes/0.75.1/#contributors","text":"","title":"Contributors"},{"location":"downloads/release-notes/0.75.1/#maintainers","text":"Patryk Obara kcgen","title":"Maintainers"},{"location":"downloads/release-notes/0.75.1/#direct-contributors","text":"Expack3 kcgen nemo93 Patryk Obara WengierWu","title":"Direct contributors"},{"location":"downloads/release-notes/0.75.1/#indirect-contributors","text":"cfoesch","title":"Indirect contributors"},{"location":"downloads/release-notes/0.75.1/#changelog","text":"You can read detailed changelog via Git, e.g. using the following command: git shortlog ^v0.75.0 v0.75.1","title":"Changelog"},{"location":"downloads/release-notes/0.75.1/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"Thank you"},{"location":"downloads/release-notes/0.75.2/","text":"0.75.2 release notes \u00b6 Release date: 2020-10-26 Summary \u00b6 This is a maintenance release from the 0.75.x stable branch. How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. New features in detail \u00b6 Select monochrome palette colour \u00b6 When emulating monochrome displays (via machine = hercules or machine = cga_mono ), the default colour palette can now be set to either white , paperwhite , green , or amber in the configuration file, as follows: [render] monochrome_palette = amber See: #607 Raw mouse input \u00b6 You can enable this option to bypass the operating system\u2019s mouse acceleration and sensitivity settings. This works in fullscreen or when the mouse is captured in windowed mode. The option can be set in the [sdl] section of the configuration file: [sdl] raw_mouse_input = true The feature is disabled by default, but some games (e.g. FPS titles, like DOOM or Dark Forces ) work better with raw input enabled (especially when used with modern, very sensitive gaming mice). See: #636 Bugfixes \u00b6 Bundle C++ runtime libraries with Windows builds for users on Windows 7, 8.x, and those who disabled Windows 10 update mechanism. ( #675 ) Reimplement CLS command to prevent text mode reset. ( #639 ) Fix whitespace handling in modem ATD command. ( #652 ) Fix boot failure when using HDD image. ( #522 ) Notes for packagers \u00b6 This release includes numerous fixes affecting our build system and other changes relevant for packaging (contributed by Gentoo packagers, and people preparing Debian, Fedora, and Flatpak packages)\u2014prompt upgrade is recommended. If you\u2019re packaging DOSBox Staging for your OS, we have a few tips: We strongly suggest keeping our default binary name: dosbox . DOSBox Staging is a drop-in replacement for older DOSBox versions\u2014some existing and popular programs, such as Wine and GUI frontends, depend on the dosbox binary name. It\u2019s also the default name of our man page and appears in the documentation. You don\u2019t need to generate your own desktop entry, appstream metadata ( metainfo.xml ), nor package description: please see the relevant files in the contrib/linux/ directory. We provide desktop icons in scalable or raster formats (optimized for small sizes). Find them in the contrib/icons/ directory. During the configuration step, remember to add -DNDEBUG to preprocessor flags (it\u2019s important!), as well as using -O3 in both C and C++ compiler flags, for example: ./configure CPPFLAGS=\"-DNDEBUG\" CFLAGS=\"-O3\" CXXFLAGS=\"-O3\" Our testing indicates that GCC generates faster binaries than Clang, but use whatever compiler is more appropriate for your OS. The license is \u201cGNU GPL version 2.0 or later \u201d (SPDX: GPL-2.0-or-later ). GitHub does not show \u201cor later\u201d, but our packages should show the proper license info. To all our package maintainers: thank you! Contributors \u00b6 Maintainers \u00b6 Patryk Obara kcgen nemo93 Contributors \u00b6 Bernard Cafarelli David Heidelberg Feignint MasterO2 NicknineTheEagle WengierWu Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"0.75.2"},{"location":"downloads/release-notes/0.75.2/#0752-release-notes","text":"Release date: 2020-10-26","title":"0.75.2 release notes"},{"location":"downloads/release-notes/0.75.2/#summary","text":"This is a maintenance release from the 0.75.x stable branch.","title":"Summary"},{"location":"downloads/release-notes/0.75.2/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.75.2/#new-features-in-detail","text":"","title":"New features in detail"},{"location":"downloads/release-notes/0.75.2/#select-monochrome-palette-colour","text":"When emulating monochrome displays (via machine = hercules or machine = cga_mono ), the default colour palette can now be set to either white , paperwhite , green , or amber in the configuration file, as follows: [render] monochrome_palette = amber See: #607","title":"Select monochrome palette colour"},{"location":"downloads/release-notes/0.75.2/#raw-mouse-input","text":"You can enable this option to bypass the operating system\u2019s mouse acceleration and sensitivity settings. This works in fullscreen or when the mouse is captured in windowed mode. The option can be set in the [sdl] section of the configuration file: [sdl] raw_mouse_input = true The feature is disabled by default, but some games (e.g. FPS titles, like DOOM or Dark Forces ) work better with raw input enabled (especially when used with modern, very sensitive gaming mice). See: #636","title":"Raw mouse input"},{"location":"downloads/release-notes/0.75.2/#bugfixes","text":"Bundle C++ runtime libraries with Windows builds for users on Windows 7, 8.x, and those who disabled Windows 10 update mechanism. ( #675 ) Reimplement CLS command to prevent text mode reset. ( #639 ) Fix whitespace handling in modem ATD command. ( #652 ) Fix boot failure when using HDD image. ( #522 )","title":"Bugfixes"},{"location":"downloads/release-notes/0.75.2/#notes-for-packagers","text":"This release includes numerous fixes affecting our build system and other changes relevant for packaging (contributed by Gentoo packagers, and people preparing Debian, Fedora, and Flatpak packages)\u2014prompt upgrade is recommended. If you\u2019re packaging DOSBox Staging for your OS, we have a few tips: We strongly suggest keeping our default binary name: dosbox . DOSBox Staging is a drop-in replacement for older DOSBox versions\u2014some existing and popular programs, such as Wine and GUI frontends, depend on the dosbox binary name. It\u2019s also the default name of our man page and appears in the documentation. You don\u2019t need to generate your own desktop entry, appstream metadata ( metainfo.xml ), nor package description: please see the relevant files in the contrib/linux/ directory. We provide desktop icons in scalable or raster formats (optimized for small sizes). Find them in the contrib/icons/ directory. During the configuration step, remember to add -DNDEBUG to preprocessor flags (it\u2019s important!), as well as using -O3 in both C and C++ compiler flags, for example: ./configure CPPFLAGS=\"-DNDEBUG\" CFLAGS=\"-O3\" CXXFLAGS=\"-O3\" Our testing indicates that GCC generates faster binaries than Clang, but use whatever compiler is more appropriate for your OS. The license is \u201cGNU GPL version 2.0 or later \u201d (SPDX: GPL-2.0-or-later ). GitHub does not show \u201cor later\u201d, but our packages should show the proper license info. To all our package maintainers: thank you!","title":"Notes for packagers"},{"location":"downloads/release-notes/0.75.2/#contributors","text":"","title":"Contributors"},{"location":"downloads/release-notes/0.75.2/#maintainers","text":"Patryk Obara kcgen nemo93","title":"Maintainers"},{"location":"downloads/release-notes/0.75.2/#contributors_1","text":"Bernard Cafarelli David Heidelberg Feignint MasterO2 NicknineTheEagle WengierWu","title":"Contributors"},{"location":"downloads/release-notes/0.75.2/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"Thank you"},{"location":"downloads/release-notes/0.76.0/","text":"0.76.0 release notes \u00b6 Release date: 2020-12-03 How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Summary \u00b6 This release introduces significant enhancements to the quality of audio emulation (GUS, built-in MIDI, PC speaker), improved support for PowerPC and POWER8 architectures, and a healthy mix of usability, documentation, code quality improvements. Enjoy! New features in detail \u00b6 Gravis UltraSound emulation improvements \u00b6 Sample from Rise of the Triad (1995). For other comparisons see link . Using headphones is highly recommended! GUS emulator Sample (FLAC) Old implementation Your browser does not support the audio element. New implementation (with improvements) Your browser does not support the audio element. Several changes have been made to the GUS emulation resulting in (sometimes) audible differences, as follows: Output volume is now typically on-par with other audio devices. Panning of voices is now performed using constant-power, as described in the Gravis\u2019 SDK documentation. Constant-power panning was originally researched by the British Broadcasting Corporation (BBC) and found to produce the most realistic perception of voice placement on a radial axis from the listener. When quitting DOSBox Staging, information about the game\u2019s GUS audio stream will be provided, such as the breakdown of 8-bit versus 16-bit samples. A potential suggestion to adjust the game\u2019s GUS mixer level, either upward or downward may also be provided, which you could paste into your game\u2019s startup batch file or [autoexec] section. We recommend using GUS emulation for the handful of DOS games that natively support the GUS\u2019s multi-voice feature. For a list of these games, see: GUS Native games . For more details about DOSBox Staging\u2019s GUS support and enhancements, see: GUS Enhancements . For information about constant-power panning, see pages 7 and 8 of the BBC R&D White Paper . Built-in GLSL shaders \u00b6 Two high-quality shaders that emulate the visual look of an analog CRT monitor are now included: glshader = crt-easymode-flat : for DOS games using resolutions 640\u00d7400 or higher. glshader = crt-fakelottes-flat : for DOS games using smaller resolutions (e.g. 320\u00d7200). Jazz Jackrabbit (Holiday Hare 1995 Edition) \u2014 showcasing crt-fakelottes-flat Built-in MIDI support via FluidSynth \u00b6 FluidSynth 2.x , a powerful and accurate MIDI synthesizer, has been integrated into DOSBox to directly support MIDI playback. This means you no longer need to use an external MIDI synthesizer (but it\u2019s still possible, of course). Configure your game to use General MIDI (GM) output on port 330 and update your DOSBOX Staging config as follows to start using it: [midi] mididevice = fluidsynth mpu401 = intelligent [fluidsynth] soundfont = my-favourite-soundfont.sf2 DOSBox will look for soundfont files in the soundfonts directory within your configuration directory and in additional platform-specific directories (e.g. /usr/share/soundfonts/ on Linux). You can also use absolute paths or paths relative to the current working directory (for bundling .sf2 files in game directories). Fine-grained MIDI level controls \u00b6 Some SoundFonts can be \u201clouder\u201d than others, such as Timbres of Heaven . You can provide an optional volume-scaling percentage after the SF2 filename, such as: soundfont = timbres_of_heaven.sf2 20 This will reduce the SoundFont\u2019s volume to 20%. Most games that play MIDI music provide an in-game volume adjustment, but some games may not save your settings while others may not even allow this adjustment. For these games, use the mixer FSYNTH command to set your desired MIDI output volume either in your startup batch file or the [autoexec] section in the game\u2019s config file, e.g.: C:\\>mixer FSYNTH 33 What soundfont should I use? \u00b6 This is very much a matter of personal opinion. We\u2019ve compiled a list of SoundFont recommendations suitable for DOS gaming on our wiki . Linux users: if you have the fluid-soundfont installed on your OS, it will be picked up automatically by default. Integer scaling (pixel-perfect) option for OpenGL output \u00b6 Integer scaling (aka pixel-perfect mode) is now also available via OpenGL. You can test integer scaling by setting the following output options: output = openglpp \u2014 OpenGL + integer scaling. This option is used to provide backwards compatibility with other DOSBox forks. output = texturepp \u2014 SDL2 texture backend + integer scaling. This option was added in 0.75.0. These two options behave pretty much the same, except Linux users can enjoy resizable windows with output = openglpp . Examples running fullscreen on 1080p display: The Lost Vikings (1993) with integer scaling Epic Pinball (1993) with integer scaling Tip Integer scaling works best for games that use square pixels; most DOS games use non-square pixels (often using resolution 320\u00d7200 / PAR 5:6)\u2014for those titles sharp-bilinear scaling (DOSBox Staging default setting) works better. This video essay by Displaced Gamers provides a great explanation: DOS Gaming Aspect Ratio \u2014 320\u00d7200 The output = openglpp option with windowresolution = resizable is also a good choice for text mode DOS applications as it produces sharp text (but sacrifices the proper DOS font aspect ratio): Dynamic recompilation for PowerPC and POWER8 (ppc64le) \u00b6 Roughly two years ago jmarsh of the vogons.org forums published a feature-complete dynamic recompilation patch supporting the PowerPC (32-bit) architecture. This was quickly expanded by the community to support the POWER8 (64-bit) architecture as well. Both patches (with slight improvements) were merged to DOSBox Staging. Shoutout to the AmigaOS community for the help with thoroughly testing this significant PowerPC contribution! Quick-edit and find your configuration file \u00b6 It can be cumbersome to edit and find your default dosbox-staging.conf file. You might not know where it\u2019s located or it might be hidden away due to certain OS settings. These two command-line options can help: dosbox --editconf , opens the .conf file in a text editor. This option respects the EDITOR environment variable if set to your prefered editor. Otherwise, it uses one of the following: nano , vim , vi , notepad++.exe , or notepad.exe . dosbox --printconf , prints the path to the .conf file. LS command \u00b6 The ls (list directory contents) command is widely available across Unix-based operating systems. Most users of modern OSes are more likely to have it in their muscle memory rather than the DIR DOS command. A very simple implementation of ls has been added that resembles the default operation of GNU ls : Fits as many directory entries as possible on the screen Differentiates directories, executables, and plain files using color Prints files in lowercase and directories in uppercase, Norton Commander style Windows 3.11 listed using dir /w /p \u2014 not enough space to show all files, hard to distinguish between files and directories The same directory listed using ls \u2014 more efficient utilisation of space in 80\u00d725 DOS text mode, easier to read Rapid DC offset correction for the emulated PC speaker \u00b6 Audio speakers work by pushing and pulling their diaphragm at a rate equal to the audio\u2019s frequency. Physical PC speakers can sometimes be left in a pushed-out or pulled-in state through constant voltage, called DC offset, which typically isn\u2019t a problem on real hardware. However in DOSBox, the PC speaker\u2019s offset samples mix with those from other audio sources such as the Sound Blaster or Adlib, which can: Cause a pop if the next sample played has a position significantly different from the position of the DC offset. Harm accurate sound reproduction of other sound devices by moving half the waveform further away from the center line (making it louder) and the other half of the waveform closer to the center line (making it quieter). This new configuration option, zero_offset under the [speaker] section, defaults to 'auto' . It\u2019s enabled for non-Windows systems and disabled on Windows as some of its audio drivers appear to attempt their own DC offset correction. The game has left the PC speaker in an offset position, which is detected and silently \"wound down\" in a fraction of a second. For more details about this change, see: #480 For a discussion about Windows 10 performing DC offset correction, see: #625 Audio pop and click prevention \u00b6 Some games generate audio pops or clicks during startup. We\u2019ve added two changes to reduce these occurences: Initial audio by all emulated devices is fed through a 15-ms envelope specifically timed to prevent unnatural electronic pops and clicks, yet fast enough to ensure that sharp-attack natural sounds (such as a cymbal crash) are not affected. On startup, the game greets our ears with an unatural instantaneous pop. In the second image, we see the enveloper briefly in action ramping the instaneous volume to prevent the pop. For more visuals and detail about the enveloper, see: #442 Some games test their interface to the Sound Blaster 16 using one or more small \u201cjunk\u201d DMA transfers. Unfortunately on actual hardware, these result in startup clicks and pops, which can be jarring when using a headset. We now suppress these initial junk transfers. On startup, Lands of Lore The Throne of Chaos's audio driver blasts our ears with two instantaneous pops, which are eliminated after suppression. For a list of many more games that had their pops cleaned up, see: #411 Splash screen and help banner verbosity control \u00b6 The splash screen and its delay, as well as the blue help banner, can now be skipped using the startup_verbosity setting in the [dosbox] section in the config file. The verbosity can be set as follows: high shows everything: the splash screen, blue help banner, and initial console output. medium skips just the splash screen and its delay, but still shows the blue help banner and initial console output. low skips both the splash screen, delay, and blue help banner, but still shows initial console output. quiet skips all of the above. The first output will either be the command prompt or output from startup executables or batch files. By default, the verbosity is set to auto , which is either low when an executable or directory is passed on the command-line or high when DOSBox Staging is started without initial commands. For a visual depiction of the options, see: #477 Revise help messages for MOUNT and IMGMOUNT commands \u00b6 These commands are usually thoroughly documented in the manual , but having usage examples at your fingertips is more convenient. Help can be invoked by passing one of the following parameters: /? (DOS style), or -h , --help (GNU style). Revised help messages provide usage examples, common parameter description, and use a limited set of colours to improve readability. Read more in: #729 Improve Telnet-mode handling for modem emulation \u00b6 For those hosting a BBS behind a Telnet interface, you can now pre-configure your serial port in Telnet-mode with the telnet:1 argument, as follows: [serial] serial1 = modem telnet:1 listenport:2323 For those dialling BBSs hosted behind a Telnet interface, use the following dial-prefix: AT+NET1DT . In general, the +NET1 or +NET0 AT-command will enable or disable Telnet-mode, respectively. This change brings Telnet-mode in-line with the Hayes multi-character command specification, which should be compatible with existing BBS software. When telnet-mode is set according to the remote BBS's needs, you will experience fast and corruption-free transfers. For more background about this change, see: #582 Fix setting file timestamp \u00b6 DOS function 5701h \u201cSet File Time/Date\u201d was implemented. This corrects a long-standing emulation issue when it comes to date handling of files created in DOS (e.g. when files are being unpacked from an archive). This fixes some game installers and other software that checks file modification times. Case-insensitive paths handling \u00b6 Paths passed to commands mount , imgmount , and audio track paths in .cue and .ins files are now treated as case-insensitive, regardless of the operating system. Fixes numerous issues with running DOS games on Linux or FreeBSD. This change alone corrects the vast majority of Windows-only DOS game releases on GOG or Steam (such as e.g. Settlers II , Redneck Rampage , or Mortal Kombat * series)\u2014users no longer need to manually adjust the paths after unpacking games from Windows installer. This should significantly improve the quality of Lutris installers as well. Revise default keyboard shortcuts \u00b6 The default keyboard shortcuts were revised to avoid triggering conflicting OS default shortcuts. We\u2019ve only changed those that that were not typically used by general users. The list of new default shortcuts are: Alt + Enter \u2013 Switch between fullscreen and window mode Alt + Pause \u2013 Pause/Unpause emulator Ctrl + F1 \u2013 Start the keymapper Ctrl + F4 \u2013 Change between mounted floppy/CD images Ctrl + F5 \u2013 Save a screenshot Ctrl + F6 \u2013 Start/Stop recording sound output to a wave file Ctrl + F7 \u2013 Start/Stop recording video output to a zmbv file Ctrl + F9 \u2013 Shutdown emulator Ctrl + F10 \u2013 Capture/Release the mouse Ctrl + F11 \u2013 Slow down emulation Ctrl + F12 \u2013 Speed up emulation Ctrl + Alt + Home \u2013 Restart emulator Hold Alt + F12 \u2013 Fast forward Keymapper received tiny usability improvements as well: it displays the keyboard shortcut (binding) for the selected action. Monochrome palette colour setting \u00b6 When emulating monochrome displays (Hercules or CGA/monochrome), the default colour palette can now be selected in the configuration file. This feature was backported to 0.75.2 release; read more . Raw mouse input setting \u00b6 User can now bypass the operating system\u2019s mouse acceleration and sensitivity settings. This works in fullscreen or when the mouse is captured in window mode. This feature was backported to 0.75.2 release; read more . 10-axis controller support \u00b6 Old joysticks compatible with DOS games can be emulated using modern 10-axis controllers (like DualShock or Xbox controllers). This feature was backported to 0.75.1 release; read more . Log memory base address \u00b6 The base memory address of DOS\u2019s emulated memory region is now logged to the console to help some users of external software, such as Cheat Engine . This feature was backported to 0.75.1 release; read more . Bugfixes \u00b6 Some notable bugfixes: Prevent SDL2 crash on exit when using Wayland. ( #336 ) Fix sound effects in Prince of Persia on Tandy. ( #457 ) Prevent crash on SDL2 re-creating OpenGL window. ( #510 ) Fix dir /p in non-standard text modes. ( #528 ) Prevent injection of spurious newlines in autoexec and bat files. ( #536 ) Fix capture_mouse middlegame setting. ( #563 ) Fix a CD-DA roll-over bug when calculating PCM frames. ( #569 ) Fix boot failure from an image mounted as C:. ( #589 ) Fix memory leak in the modem phone book. ( #622 ) Fix cls command. ( #639 ) Increase default DOS file limit for emulation of program Subiekt 4. ( #656 ) Fix Pentium CPUID to indicate CPU without FDIV bug. ( #694 ) (from SVN) Multiple bugfixes and regression fixes for various games or demoscene productions, such as Clue: Master Detective (1989), ( 8c002 ), Pleasure\u2019n Pain demo ( 8c07c , e9a67 ), MayDay demo ( b6e77 ), PC Tools 9, and others. (from SVN) Set Precision Exception in FRNDINT (Round to Integer instruction), to avoid bug when running Borland Pascal pow implementation. ( 7892b ) Known issues \u00b6 (added on 2020-12-04) Windows x64 builds are not available for now due to regression after building in Visual Studio 16.8.2. ( #746 ) The W^X memory protection (enabled by default via e.g. SELinux) prevents dynamic recompiler from working. ( #253 ) Keymapper has problems with mapping multiple axes when multiple controllers are plugged in (e.g. notably when using modern joysticks and throttles connected at the same time). ( #342 ) GLSL shader implementation crashes on certain Intel GPUs on Arch. ( #319 ) Mapping key scancodes on X11 using xmodmap can break SDL2 ability to detect your keyboard layout and leave you with non-functional keyboard input. Use udev instead of xmodmap to prevent this problem. Some users of Gnome 3.38.1 experience problems when toggling fullscreen (both X11 and Wayland). This seems to be a Gnome issue; if you experience it as well, please make a report in the bugtracker. Removed features \u00b6 Option gusrate in the [gus] section was removed. The revised Gravis UltraSound emulation implementation made this option obsolete. Option oplrate in the [sblaster] section was removed. This value is now automatically tied to rate in [mixer] to avoid resampling (so users do not need to manually correlate values for these two options any more). Notes for developers \u00b6 Project switched to using C++14. We introduced unit tests (using Google Test framework). At the moment, unit tests are running on Linux only\u2014to build them use --enable-tests configure flag and make test to run them. They are included in CI gating. Windows x64 builds were added to Visual Studio solution (both Debug and Release profiles). CI was extended with gating based on MSVC (32-bit and 64-bit builds) Due to instability and extremely slow installation times MSYS2 was removed from gating CI. It is still included in our daily builds, but we do not recommend using MSYS2 for development. Linux builds for ARMv6, ARMv7, ARMv8 (AArch64), ppc64le, and s390x architectures were added to our set of daily builds. We fixed all -Wall -Weffc++ warnings on Linux and macOS and corrected a large number of issues detected via static and dynamic code analysis tools. When the project started we inherited 1411 warnings from DOSBox; as of November 2020 the builds are finally clean, so it's easier to make sure we do not introduce new warnings. Changes merged from upstream projects \u00b6 Merge DOSBox SVN changes up to revision 4392 Sync dr_mp3 v0.6.11 from upstream Sync dr_flac v0.12.13 from upstream Sync dr_wav v0.12.4 from upstream Sync xxhash 0.8.0 from upstream Sync stb header v2.36 from upstream Sync stb_vorbis v1.19 from upstream Contributors \u00b6 During DOSBox Staging 0.76 development period we merged 1035 commits, including 55 commits originating from the DOSBox project. Maintainers \u00b6 Patryk Obara kcgen nemo93 Direct contributors \u00b6 Affonso Amendola Bernard Cafarelli cfoesch ClassicHasClass David Heidelberg drfiemost Edward Betts Erlotinib Expack3 Feignint Jonathan Campbell MasterO2 NicknineTheEagle Nikos Chantziaras Robert de Rooy Troy Campbell Tyrell Sassen Vladimir Serbinenko Wengier DOSBox contributors \u00b6 SVN r4336:r4392 Harekiet jmarsh Jonathan Campbell NewRisingSun Qbix ripsaw8080 Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"0.76.0"},{"location":"downloads/release-notes/0.76.0/#0760-release-notes","text":"Release date: 2020-12-03","title":"0.76.0 release notes"},{"location":"downloads/release-notes/0.76.0/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.76.0/#summary","text":"This release introduces significant enhancements to the quality of audio emulation (GUS, built-in MIDI, PC speaker), improved support for PowerPC and POWER8 architectures, and a healthy mix of usability, documentation, code quality improvements. Enjoy!","title":"Summary"},{"location":"downloads/release-notes/0.76.0/#new-features-in-detail","text":"","title":"New features in detail"},{"location":"downloads/release-notes/0.76.0/#gravis-ultrasound-emulation-improvements","text":"Sample from Rise of the Triad (1995). For other comparisons see link . Using headphones is highly recommended! GUS emulator Sample (FLAC) Old implementation Your browser does not support the audio element. New implementation (with improvements) Your browser does not support the audio element. Several changes have been made to the GUS emulation resulting in (sometimes) audible differences, as follows: Output volume is now typically on-par with other audio devices. Panning of voices is now performed using constant-power, as described in the Gravis\u2019 SDK documentation. Constant-power panning was originally researched by the British Broadcasting Corporation (BBC) and found to produce the most realistic perception of voice placement on a radial axis from the listener. When quitting DOSBox Staging, information about the game\u2019s GUS audio stream will be provided, such as the breakdown of 8-bit versus 16-bit samples. A potential suggestion to adjust the game\u2019s GUS mixer level, either upward or downward may also be provided, which you could paste into your game\u2019s startup batch file or [autoexec] section. We recommend using GUS emulation for the handful of DOS games that natively support the GUS\u2019s multi-voice feature. For a list of these games, see: GUS Native games . For more details about DOSBox Staging\u2019s GUS support and enhancements, see: GUS Enhancements . For information about constant-power panning, see pages 7 and 8 of the BBC R&D White Paper .","title":"Gravis UltraSound emulation improvements"},{"location":"downloads/release-notes/0.76.0/#built-in-glsl-shaders","text":"Two high-quality shaders that emulate the visual look of an analog CRT monitor are now included: glshader = crt-easymode-flat : for DOS games using resolutions 640\u00d7400 or higher. glshader = crt-fakelottes-flat : for DOS games using smaller resolutions (e.g. 320\u00d7200). Jazz Jackrabbit (Holiday Hare 1995 Edition) \u2014 showcasing crt-fakelottes-flat","title":"Built-in GLSL shaders"},{"location":"downloads/release-notes/0.76.0/#built-in-midi-support-via-fluidsynth","text":"FluidSynth 2.x , a powerful and accurate MIDI synthesizer, has been integrated into DOSBox to directly support MIDI playback. This means you no longer need to use an external MIDI synthesizer (but it\u2019s still possible, of course). Configure your game to use General MIDI (GM) output on port 330 and update your DOSBOX Staging config as follows to start using it: [midi] mididevice = fluidsynth mpu401 = intelligent [fluidsynth] soundfont = my-favourite-soundfont.sf2 DOSBox will look for soundfont files in the soundfonts directory within your configuration directory and in additional platform-specific directories (e.g. /usr/share/soundfonts/ on Linux). You can also use absolute paths or paths relative to the current working directory (for bundling .sf2 files in game directories).","title":"Built-in MIDI support via FluidSynth"},{"location":"downloads/release-notes/0.76.0/#fine-grained-midi-level-controls","text":"Some SoundFonts can be \u201clouder\u201d than others, such as Timbres of Heaven . You can provide an optional volume-scaling percentage after the SF2 filename, such as: soundfont = timbres_of_heaven.sf2 20 This will reduce the SoundFont\u2019s volume to 20%. Most games that play MIDI music provide an in-game volume adjustment, but some games may not save your settings while others may not even allow this adjustment. For these games, use the mixer FSYNTH command to set your desired MIDI output volume either in your startup batch file or the [autoexec] section in the game\u2019s config file, e.g.: C:\\>mixer FSYNTH 33","title":"Fine-grained MIDI level controls"},{"location":"downloads/release-notes/0.76.0/#what-soundfont-should-i-use","text":"This is very much a matter of personal opinion. We\u2019ve compiled a list of SoundFont recommendations suitable for DOS gaming on our wiki . Linux users: if you have the fluid-soundfont installed on your OS, it will be picked up automatically by default.","title":"What soundfont should I use?"},{"location":"downloads/release-notes/0.76.0/#integer-scaling-pixel-perfect-option-for-opengl-output","text":"Integer scaling (aka pixel-perfect mode) is now also available via OpenGL. You can test integer scaling by setting the following output options: output = openglpp \u2014 OpenGL + integer scaling. This option is used to provide backwards compatibility with other DOSBox forks. output = texturepp \u2014 SDL2 texture backend + integer scaling. This option was added in 0.75.0. These two options behave pretty much the same, except Linux users can enjoy resizable windows with output = openglpp . Examples running fullscreen on 1080p display: The Lost Vikings (1993) with integer scaling Epic Pinball (1993) with integer scaling Tip Integer scaling works best for games that use square pixels; most DOS games use non-square pixels (often using resolution 320\u00d7200 / PAR 5:6)\u2014for those titles sharp-bilinear scaling (DOSBox Staging default setting) works better. This video essay by Displaced Gamers provides a great explanation: DOS Gaming Aspect Ratio \u2014 320\u00d7200 The output = openglpp option with windowresolution = resizable is also a good choice for text mode DOS applications as it produces sharp text (but sacrifices the proper DOS font aspect ratio):","title":"Integer scaling (pixel-perfect) option for OpenGL output"},{"location":"downloads/release-notes/0.76.0/#dynamic-recompilation-for-powerpc-and-power8-ppc64le","text":"Roughly two years ago jmarsh of the vogons.org forums published a feature-complete dynamic recompilation patch supporting the PowerPC (32-bit) architecture. This was quickly expanded by the community to support the POWER8 (64-bit) architecture as well. Both patches (with slight improvements) were merged to DOSBox Staging. Shoutout to the AmigaOS community for the help with thoroughly testing this significant PowerPC contribution!","title":"Dynamic recompilation for PowerPC and POWER8 (ppc64le)"},{"location":"downloads/release-notes/0.76.0/#quick-edit-and-find-your-configuration-file","text":"It can be cumbersome to edit and find your default dosbox-staging.conf file. You might not know where it\u2019s located or it might be hidden away due to certain OS settings. These two command-line options can help: dosbox --editconf , opens the .conf file in a text editor. This option respects the EDITOR environment variable if set to your prefered editor. Otherwise, it uses one of the following: nano , vim , vi , notepad++.exe , or notepad.exe . dosbox --printconf , prints the path to the .conf file.","title":"Quick-edit and find your configuration file"},{"location":"downloads/release-notes/0.76.0/#ls-command","text":"The ls (list directory contents) command is widely available across Unix-based operating systems. Most users of modern OSes are more likely to have it in their muscle memory rather than the DIR DOS command. A very simple implementation of ls has been added that resembles the default operation of GNU ls : Fits as many directory entries as possible on the screen Differentiates directories, executables, and plain files using color Prints files in lowercase and directories in uppercase, Norton Commander style Windows 3.11 listed using dir /w /p \u2014 not enough space to show all files, hard to distinguish between files and directories The same directory listed using ls \u2014 more efficient utilisation of space in 80\u00d725 DOS text mode, easier to read","title":"LS command"},{"location":"downloads/release-notes/0.76.0/#rapid-dc-offset-correction-for-the-emulated-pc-speaker","text":"Audio speakers work by pushing and pulling their diaphragm at a rate equal to the audio\u2019s frequency. Physical PC speakers can sometimes be left in a pushed-out or pulled-in state through constant voltage, called DC offset, which typically isn\u2019t a problem on real hardware. However in DOSBox, the PC speaker\u2019s offset samples mix with those from other audio sources such as the Sound Blaster or Adlib, which can: Cause a pop if the next sample played has a position significantly different from the position of the DC offset. Harm accurate sound reproduction of other sound devices by moving half the waveform further away from the center line (making it louder) and the other half of the waveform closer to the center line (making it quieter). This new configuration option, zero_offset under the [speaker] section, defaults to 'auto' . It\u2019s enabled for non-Windows systems and disabled on Windows as some of its audio drivers appear to attempt their own DC offset correction. The game has left the PC speaker in an offset position, which is detected and silently \"wound down\" in a fraction of a second. For more details about this change, see: #480 For a discussion about Windows 10 performing DC offset correction, see: #625","title":"Rapid DC offset correction for the emulated PC speaker"},{"location":"downloads/release-notes/0.76.0/#audio-pop-and-click-prevention","text":"Some games generate audio pops or clicks during startup. We\u2019ve added two changes to reduce these occurences: Initial audio by all emulated devices is fed through a 15-ms envelope specifically timed to prevent unnatural electronic pops and clicks, yet fast enough to ensure that sharp-attack natural sounds (such as a cymbal crash) are not affected. On startup, the game greets our ears with an unatural instantaneous pop. In the second image, we see the enveloper briefly in action ramping the instaneous volume to prevent the pop. For more visuals and detail about the enveloper, see: #442 Some games test their interface to the Sound Blaster 16 using one or more small \u201cjunk\u201d DMA transfers. Unfortunately on actual hardware, these result in startup clicks and pops, which can be jarring when using a headset. We now suppress these initial junk transfers. On startup, Lands of Lore The Throne of Chaos's audio driver blasts our ears with two instantaneous pops, which are eliminated after suppression. For a list of many more games that had their pops cleaned up, see: #411","title":"Audio pop and click prevention"},{"location":"downloads/release-notes/0.76.0/#splash-screen-and-help-banner-verbosity-control","text":"The splash screen and its delay, as well as the blue help banner, can now be skipped using the startup_verbosity setting in the [dosbox] section in the config file. The verbosity can be set as follows: high shows everything: the splash screen, blue help banner, and initial console output. medium skips just the splash screen and its delay, but still shows the blue help banner and initial console output. low skips both the splash screen, delay, and blue help banner, but still shows initial console output. quiet skips all of the above. The first output will either be the command prompt or output from startup executables or batch files. By default, the verbosity is set to auto , which is either low when an executable or directory is passed on the command-line or high when DOSBox Staging is started without initial commands. For a visual depiction of the options, see: #477","title":"Splash screen and help banner verbosity control"},{"location":"downloads/release-notes/0.76.0/#revise-help-messages-for-mount-and-imgmount-commands","text":"These commands are usually thoroughly documented in the manual , but having usage examples at your fingertips is more convenient. Help can be invoked by passing one of the following parameters: /? (DOS style), or -h , --help (GNU style). Revised help messages provide usage examples, common parameter description, and use a limited set of colours to improve readability. Read more in: #729","title":"Revise help messages for MOUNT and IMGMOUNT commands"},{"location":"downloads/release-notes/0.76.0/#improve-telnet-mode-handling-for-modem-emulation","text":"For those hosting a BBS behind a Telnet interface, you can now pre-configure your serial port in Telnet-mode with the telnet:1 argument, as follows: [serial] serial1 = modem telnet:1 listenport:2323 For those dialling BBSs hosted behind a Telnet interface, use the following dial-prefix: AT+NET1DT . In general, the +NET1 or +NET0 AT-command will enable or disable Telnet-mode, respectively. This change brings Telnet-mode in-line with the Hayes multi-character command specification, which should be compatible with existing BBS software. When telnet-mode is set according to the remote BBS's needs, you will experience fast and corruption-free transfers. For more background about this change, see: #582","title":"Improve Telnet-mode handling for modem emulation"},{"location":"downloads/release-notes/0.76.0/#fix-setting-file-timestamp","text":"DOS function 5701h \u201cSet File Time/Date\u201d was implemented. This corrects a long-standing emulation issue when it comes to date handling of files created in DOS (e.g. when files are being unpacked from an archive). This fixes some game installers and other software that checks file modification times.","title":"Fix setting file timestamp"},{"location":"downloads/release-notes/0.76.0/#case-insensitive-paths-handling","text":"Paths passed to commands mount , imgmount , and audio track paths in .cue and .ins files are now treated as case-insensitive, regardless of the operating system. Fixes numerous issues with running DOS games on Linux or FreeBSD. This change alone corrects the vast majority of Windows-only DOS game releases on GOG or Steam (such as e.g. Settlers II , Redneck Rampage , or Mortal Kombat * series)\u2014users no longer need to manually adjust the paths after unpacking games from Windows installer. This should significantly improve the quality of Lutris installers as well.","title":"Case-insensitive paths handling"},{"location":"downloads/release-notes/0.76.0/#revise-default-keyboard-shortcuts","text":"The default keyboard shortcuts were revised to avoid triggering conflicting OS default shortcuts. We\u2019ve only changed those that that were not typically used by general users. The list of new default shortcuts are: Alt + Enter \u2013 Switch between fullscreen and window mode Alt + Pause \u2013 Pause/Unpause emulator Ctrl + F1 \u2013 Start the keymapper Ctrl + F4 \u2013 Change between mounted floppy/CD images Ctrl + F5 \u2013 Save a screenshot Ctrl + F6 \u2013 Start/Stop recording sound output to a wave file Ctrl + F7 \u2013 Start/Stop recording video output to a zmbv file Ctrl + F9 \u2013 Shutdown emulator Ctrl + F10 \u2013 Capture/Release the mouse Ctrl + F11 \u2013 Slow down emulation Ctrl + F12 \u2013 Speed up emulation Ctrl + Alt + Home \u2013 Restart emulator Hold Alt + F12 \u2013 Fast forward Keymapper received tiny usability improvements as well: it displays the keyboard shortcut (binding) for the selected action.","title":"Revise default keyboard shortcuts"},{"location":"downloads/release-notes/0.76.0/#monochrome-palette-colour-setting","text":"When emulating monochrome displays (Hercules or CGA/monochrome), the default colour palette can now be selected in the configuration file. This feature was backported to 0.75.2 release; read more .","title":"Monochrome palette colour setting"},{"location":"downloads/release-notes/0.76.0/#raw-mouse-input-setting","text":"User can now bypass the operating system\u2019s mouse acceleration and sensitivity settings. This works in fullscreen or when the mouse is captured in window mode. This feature was backported to 0.75.2 release; read more .","title":"Raw mouse input setting"},{"location":"downloads/release-notes/0.76.0/#10-axis-controller-support","text":"Old joysticks compatible with DOS games can be emulated using modern 10-axis controllers (like DualShock or Xbox controllers). This feature was backported to 0.75.1 release; read more .","title":"10-axis controller support"},{"location":"downloads/release-notes/0.76.0/#log-memory-base-address","text":"The base memory address of DOS\u2019s emulated memory region is now logged to the console to help some users of external software, such as Cheat Engine . This feature was backported to 0.75.1 release; read more .","title":"Log memory base address"},{"location":"downloads/release-notes/0.76.0/#bugfixes","text":"Some notable bugfixes: Prevent SDL2 crash on exit when using Wayland. ( #336 ) Fix sound effects in Prince of Persia on Tandy. ( #457 ) Prevent crash on SDL2 re-creating OpenGL window. ( #510 ) Fix dir /p in non-standard text modes. ( #528 ) Prevent injection of spurious newlines in autoexec and bat files. ( #536 ) Fix capture_mouse middlegame setting. ( #563 ) Fix a CD-DA roll-over bug when calculating PCM frames. ( #569 ) Fix boot failure from an image mounted as C:. ( #589 ) Fix memory leak in the modem phone book. ( #622 ) Fix cls command. ( #639 ) Increase default DOS file limit for emulation of program Subiekt 4. ( #656 ) Fix Pentium CPUID to indicate CPU without FDIV bug. ( #694 ) (from SVN) Multiple bugfixes and regression fixes for various games or demoscene productions, such as Clue: Master Detective (1989), ( 8c002 ), Pleasure\u2019n Pain demo ( 8c07c , e9a67 ), MayDay demo ( b6e77 ), PC Tools 9, and others. (from SVN) Set Precision Exception in FRNDINT (Round to Integer instruction), to avoid bug when running Borland Pascal pow implementation. ( 7892b )","title":"Bugfixes"},{"location":"downloads/release-notes/0.76.0/#known-issues","text":"(added on 2020-12-04) Windows x64 builds are not available for now due to regression after building in Visual Studio 16.8.2. ( #746 ) The W^X memory protection (enabled by default via e.g. SELinux) prevents dynamic recompiler from working. ( #253 ) Keymapper has problems with mapping multiple axes when multiple controllers are plugged in (e.g. notably when using modern joysticks and throttles connected at the same time). ( #342 ) GLSL shader implementation crashes on certain Intel GPUs on Arch. ( #319 ) Mapping key scancodes on X11 using xmodmap can break SDL2 ability to detect your keyboard layout and leave you with non-functional keyboard input. Use udev instead of xmodmap to prevent this problem. Some users of Gnome 3.38.1 experience problems when toggling fullscreen (both X11 and Wayland). This seems to be a Gnome issue; if you experience it as well, please make a report in the bugtracker.","title":"Known issues"},{"location":"downloads/release-notes/0.76.0/#removed-features","text":"Option gusrate in the [gus] section was removed. The revised Gravis UltraSound emulation implementation made this option obsolete. Option oplrate in the [sblaster] section was removed. This value is now automatically tied to rate in [mixer] to avoid resampling (so users do not need to manually correlate values for these two options any more).","title":"Removed features"},{"location":"downloads/release-notes/0.76.0/#notes-for-developers","text":"Project switched to using C++14. We introduced unit tests (using Google Test framework). At the moment, unit tests are running on Linux only\u2014to build them use --enable-tests configure flag and make test to run them. They are included in CI gating. Windows x64 builds were added to Visual Studio solution (both Debug and Release profiles). CI was extended with gating based on MSVC (32-bit and 64-bit builds) Due to instability and extremely slow installation times MSYS2 was removed from gating CI. It is still included in our daily builds, but we do not recommend using MSYS2 for development. Linux builds for ARMv6, ARMv7, ARMv8 (AArch64), ppc64le, and s390x architectures were added to our set of daily builds. We fixed all -Wall -Weffc++ warnings on Linux and macOS and corrected a large number of issues detected via static and dynamic code analysis tools. When the project started we inherited 1411 warnings from DOSBox; as of November 2020 the builds are finally clean, so it's easier to make sure we do not introduce new warnings.","title":"Notes for developers"},{"location":"downloads/release-notes/0.76.0/#changes-merged-from-upstream-projects","text":"Merge DOSBox SVN changes up to revision 4392 Sync dr_mp3 v0.6.11 from upstream Sync dr_flac v0.12.13 from upstream Sync dr_wav v0.12.4 from upstream Sync xxhash 0.8.0 from upstream Sync stb header v2.36 from upstream Sync stb_vorbis v1.19 from upstream","title":"Changes merged from upstream projects"},{"location":"downloads/release-notes/0.76.0/#contributors","text":"During DOSBox Staging 0.76 development period we merged 1035 commits, including 55 commits originating from the DOSBox project.","title":"Contributors"},{"location":"downloads/release-notes/0.76.0/#maintainers","text":"Patryk Obara kcgen nemo93","title":"Maintainers"},{"location":"downloads/release-notes/0.76.0/#direct-contributors","text":"Affonso Amendola Bernard Cafarelli cfoesch ClassicHasClass David Heidelberg drfiemost Edward Betts Erlotinib Expack3 Feignint Jonathan Campbell MasterO2 NicknineTheEagle Nikos Chantziaras Robert de Rooy Troy Campbell Tyrell Sassen Vladimir Serbinenko Wengier","title":"Direct contributors"},{"location":"downloads/release-notes/0.76.0/#dosbox-contributors","text":"SVN r4336:r4392 Harekiet jmarsh Jonathan Campbell NewRisingSun Qbix ripsaw8080","title":"DOSBox contributors"},{"location":"downloads/release-notes/0.76.0/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"Thank you"},{"location":"downloads/release-notes/0.77.0/","text":"0.77.0 release notes \u00b6 Release date: 2021-07-02 How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Significant changes \u00b6 Migrated Staging from autotools to the Meson build system. Those building from source, please see BUILD.md in the repository. Added write-xor-execute page support to comply with the latest macOS and SELinux security policies. Thanks to jmarsh and Jonathan Campbell for discussions on vogons. Added variable expansion to the interactive DOS shell. Finished FluidSynth integration , which is now included in all release binaries. See the wiki notes for how to use it. Run mixer /listmidi in the DOS shell to see your available soundfonts. Thanks to Christian Lestrade for authoring this support in 2005, and all subsequent maintainers. Thanks to Meson for adding FluidSynth to the WrapDB. Finished MT-32 integration , which is now included in all release binaries. See the wiki notes for how to use it. Run mixer /listmidi in the DOS shell to see the available MT-32 models and versions. See the list of unmissable MT-32 experiences , courtesy vogons.org forum user Shreddoc and contributors. Thanks to Canadacow for authoring MT-32 emulation in 2003, KingGuppy and Mok for the follow-on work, and SergM who continues to maintain and improve the Munt project today. Thanks to Meson for adding libmt32emu to the WrapDB. Thanks to Microsoft for adding libmt32emu to Vcpkg. Added IBM PS/1 Audio device support. See the wiki notes for how to use it. Thanks to JMK for authoring PS/1 Audio emulation in 2008. Added Innovation SSI-2001 audio device support. See the wiki notes for how to use it. Thanks to Vasyl for authoring SSI-2001 emulation in 2006. Thanks to Dag Lem for authoring, and Antti Lankila and Leandro Nini for improving the SID chip emulator. Replaced the default Ctrl + F1 - F12 hotkeys on macOS with Cmd + F1 - F12 to reduce conflicts with the OS. Thanks to Antti Peltola , Burrito78 , and Kirk Klobe for guidance and testing. Added or improved translations for French, Italian, Polish, Russian, and Spanish. Thanks to Draky50110 (fr), Kappa971 (it), dreamer (po), IlyaIndigo (ru), and Peluchito (es). Added splash_only to the startup_verbosity settings. This shows the splash but skips the help banner. Three relative window sizes: small , medium , or large are now understood by the windowresolution config setting. These T-shirt sizes correspond to a window that\u2019s 25%, 50%, or 80% of your desktop\u2019s area, regardless of DPI or type of monitor (be it 720p, 1080p, or 4K). Window resizing using corner-drag is now auto-enabled on all platforms when conditions permit. Bugfixes \u00b6 The following user-visible bugs were fixed: Will no longer lose focus on Raspberry Pi when launched fullscreen in an Xorg session. ( #995 ) Release builds now use dosbox-staging.conf as the primary config file instead of dosbox-staging-git.conf . ( #932 ) Windows release builds once again mount Opus CD-DA tracks, which was a regression in 0.76. ( #885 ) AUTOTYPE now works with all games. Until now, a subset of games didn\u2019t respond to its keystrokes. ( #942 ) Shoulder triggers on some six-axis controllers, such as the PS4 and Logitech\u2019s F310 and F710 controllers, can now be mapped. ( #944 ) When toggling out of fullscreen mode, in some corner cases this resulted in a blank window . This is now fixed. ( #1096 ) Contributions \u00b6 The 0.77 release includes 920 commits plus 35 commits originating from the DOSBox project. DOSBox Staging members \u00b6 The following members actively supported the project during the 0.77 timeframe: Antti Peltola (macOS testing and feedback) Brandon Munger (collaborator) Burrito78 (macOS testing and feedback) GranMinigun (testing and triage) kcgen (maintainer) Kirk Klobe (maintainer) Dennis L\u00fchring (collaborator) nemo93 (Wiki maintainer) Patryk Obara (maintainer) Ruben Genoese (testing and triage) Wengier (collaborator) Direct contributors \u00b6 The following authors, co-authors, wiki editors, translators, testers, and bug reporters directly contributed to the 0.77 release: Allofich Antti Peltola Brandon Munger Burrito78 Dennis L\u00fchring Didu Draky50110 Dugan Chen eli-schwart Emmanuel Gil Peyrot Feignint Gilles GranMinigun hail-to-the-ryzen IlyaIndigo IPeluchito jmarsh Joshua Kr\u00e4mer Kappa971 kcgen Ken H\u00e4ndel Kirk Klobe mdmallard nemo93 Otto Urpelainen Patryk Obara Peluchito Ruben Genoese rhys073 Sarah Whitman Toby Jennings warpdesign Wengier DOSBox contributors \u00b6 The following DOSBox authors\u2019 SVN commits (r4393 through r4459) were merged during the 0.77 timeframe: jmarsh Peter Veenstra ripsaw8080 Sjoerd van der Berg Indirect contributors \u00b6 The following patch or external project authors\u2019 sources were merged during the 0.77 timeframe: Antti S. Lankila (reSIDfp maintainer) Dag Lem (original reSID author) David Reid (dr_libs audio codecs author) Dean Beeler (original MT-32 patch author) Jason Kim (PS/1 patch author) Jonathan Campbell (DOSBox-X maintainer) nukeykt (Nuked OPL emulator author) sergm (Munt and MT-32 patch maintainer) Vasyl Tsvirkunov (SS1-2001 patch author) Wengier (DOSBox-X maintainer) ykhwong (DOSBox Daum maintainer) Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project. The project maintains original authorship on all commits (including those from upstream, patches, and external projects) to ensure correct attribution is recorded in the version control system.","title":"0.77.0"},{"location":"downloads/release-notes/0.77.0/#0770-release-notes","text":"Release date: 2021-07-02","title":"0.77.0 release notes"},{"location":"downloads/release-notes/0.77.0/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.77.0/#significant-changes","text":"Migrated Staging from autotools to the Meson build system. Those building from source, please see BUILD.md in the repository. Added write-xor-execute page support to comply with the latest macOS and SELinux security policies. Thanks to jmarsh and Jonathan Campbell for discussions on vogons. Added variable expansion to the interactive DOS shell. Finished FluidSynth integration , which is now included in all release binaries. See the wiki notes for how to use it. Run mixer /listmidi in the DOS shell to see your available soundfonts. Thanks to Christian Lestrade for authoring this support in 2005, and all subsequent maintainers. Thanks to Meson for adding FluidSynth to the WrapDB. Finished MT-32 integration , which is now included in all release binaries. See the wiki notes for how to use it. Run mixer /listmidi in the DOS shell to see the available MT-32 models and versions. See the list of unmissable MT-32 experiences , courtesy vogons.org forum user Shreddoc and contributors. Thanks to Canadacow for authoring MT-32 emulation in 2003, KingGuppy and Mok for the follow-on work, and SergM who continues to maintain and improve the Munt project today. Thanks to Meson for adding libmt32emu to the WrapDB. Thanks to Microsoft for adding libmt32emu to Vcpkg. Added IBM PS/1 Audio device support. See the wiki notes for how to use it. Thanks to JMK for authoring PS/1 Audio emulation in 2008. Added Innovation SSI-2001 audio device support. See the wiki notes for how to use it. Thanks to Vasyl for authoring SSI-2001 emulation in 2006. Thanks to Dag Lem for authoring, and Antti Lankila and Leandro Nini for improving the SID chip emulator. Replaced the default Ctrl + F1 - F12 hotkeys on macOS with Cmd + F1 - F12 to reduce conflicts with the OS. Thanks to Antti Peltola , Burrito78 , and Kirk Klobe for guidance and testing. Added or improved translations for French, Italian, Polish, Russian, and Spanish. Thanks to Draky50110 (fr), Kappa971 (it), dreamer (po), IlyaIndigo (ru), and Peluchito (es). Added splash_only to the startup_verbosity settings. This shows the splash but skips the help banner. Three relative window sizes: small , medium , or large are now understood by the windowresolution config setting. These T-shirt sizes correspond to a window that\u2019s 25%, 50%, or 80% of your desktop\u2019s area, regardless of DPI or type of monitor (be it 720p, 1080p, or 4K). Window resizing using corner-drag is now auto-enabled on all platforms when conditions permit.","title":"Significant changes"},{"location":"downloads/release-notes/0.77.0/#bugfixes","text":"The following user-visible bugs were fixed: Will no longer lose focus on Raspberry Pi when launched fullscreen in an Xorg session. ( #995 ) Release builds now use dosbox-staging.conf as the primary config file instead of dosbox-staging-git.conf . ( #932 ) Windows release builds once again mount Opus CD-DA tracks, which was a regression in 0.76. ( #885 ) AUTOTYPE now works with all games. Until now, a subset of games didn\u2019t respond to its keystrokes. ( #942 ) Shoulder triggers on some six-axis controllers, such as the PS4 and Logitech\u2019s F310 and F710 controllers, can now be mapped. ( #944 ) When toggling out of fullscreen mode, in some corner cases this resulted in a blank window . This is now fixed. ( #1096 )","title":"Bugfixes"},{"location":"downloads/release-notes/0.77.0/#contributions","text":"The 0.77 release includes 920 commits plus 35 commits originating from the DOSBox project.","title":"Contributions"},{"location":"downloads/release-notes/0.77.0/#dosbox-staging-members","text":"The following members actively supported the project during the 0.77 timeframe: Antti Peltola (macOS testing and feedback) Brandon Munger (collaborator) Burrito78 (macOS testing and feedback) GranMinigun (testing and triage) kcgen (maintainer) Kirk Klobe (maintainer) Dennis L\u00fchring (collaborator) nemo93 (Wiki maintainer) Patryk Obara (maintainer) Ruben Genoese (testing and triage) Wengier (collaborator)","title":"DOSBox Staging members"},{"location":"downloads/release-notes/0.77.0/#direct-contributors","text":"The following authors, co-authors, wiki editors, translators, testers, and bug reporters directly contributed to the 0.77 release: Allofich Antti Peltola Brandon Munger Burrito78 Dennis L\u00fchring Didu Draky50110 Dugan Chen eli-schwart Emmanuel Gil Peyrot Feignint Gilles GranMinigun hail-to-the-ryzen IlyaIndigo IPeluchito jmarsh Joshua Kr\u00e4mer Kappa971 kcgen Ken H\u00e4ndel Kirk Klobe mdmallard nemo93 Otto Urpelainen Patryk Obara Peluchito Ruben Genoese rhys073 Sarah Whitman Toby Jennings warpdesign Wengier","title":"Direct contributors"},{"location":"downloads/release-notes/0.77.0/#dosbox-contributors","text":"The following DOSBox authors\u2019 SVN commits (r4393 through r4459) were merged during the 0.77 timeframe: jmarsh Peter Veenstra ripsaw8080 Sjoerd van der Berg","title":"DOSBox contributors"},{"location":"downloads/release-notes/0.77.0/#indirect-contributors","text":"The following patch or external project authors\u2019 sources were merged during the 0.77 timeframe: Antti S. Lankila (reSIDfp maintainer) Dag Lem (original reSID author) David Reid (dr_libs audio codecs author) Dean Beeler (original MT-32 patch author) Jason Kim (PS/1 patch author) Jonathan Campbell (DOSBox-X maintainer) nukeykt (Nuked OPL emulator author) sergm (Munt and MT-32 patch maintainer) Vasyl Tsvirkunov (SS1-2001 patch author) Wengier (DOSBox-X maintainer) ykhwong (DOSBox Daum maintainer)","title":"Indirect contributors"},{"location":"downloads/release-notes/0.77.0/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project. The project maintains original authorship on all commits (including those from upstream, patches, and external projects) to ensure correct attribution is recorded in the version control system.","title":"Thank you"},{"location":"downloads/release-notes/0.77.1/","text":"0.77.1 release notes \u00b6 Release date: 2021-08-28 How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Bugfixes \u00b6 The following user-visible bugs were fixed in 0.77.1 (reported-by; fixed-by) : Fix crash when using 32-bit build and the dynamic-core on Windows 10 (Banjo-Oz; kklobe) . Fix crash when using 32-bit build and the dynamic-core on Raspbian (nemo93; kklobe) . Fix degraded joystick control during once-a-month integer time-rollover event (cimarronm) . Fix inability for a program to use its own bundled HELP and CHOICE executables (SmilingSpectre; Wengier) . Fix inability to map joystick events when joysticktype was configured as none (GranMinigun; kcgen) . Fix incorrect setup of the joystick when type configured as 2axis (choum; kcgen) . Fix input control lag on some Windows systems and on macOS when the \u201cMagnet\u201d GUI management program is running (Burrito78; kcgen) . Fix mouse control in Alive \u2013 Behind the Moon (DOSBox SVN r4461/ripsaw8080) . Fix performance regression when building releases on arm-based Linux SBC (mrfixit2001) . Fix potential Tseng ET3000 video mode corruption (DOSBox SVN r4460; ripsaw8080) . Fix resizing of window impacting the debugger TUI on Windows (DOSBox SVN r4462; ripsaw8080) . Fix potential crash when quickly Alt + Tab ing on Windows (kklobe) . Fix size and placement of video content when using a resizeable window mode (bmunger; kcgen) . Fix unformattable content in translation files (dreamer; kcgen) . Synchronize Italian translation files (Kappa971) . Synchronize German translation files (Burrito78) . Generate macOS Universal Binary supporting x86_64 and arm64 (Kirk Klobe ) Translations pack included \u00b6 French, German, Italian, Polish, Russian, and Spanish users: move the bundled translations directory into your DOSBox Staging configuration directory. macOS users Right click the dosbox-staging.app file and select \u201cShow Package Contents\u201d. The translations folder is inside Contents/resources/ . After the move, you will have: Linux /home/username/.config/dosbox/translations/ macOS ~/Library/Preferences/DOSBox/translations/ Windows C:\\Users\\<username>\\AppData\\Local\\DOSBox\\translations\\ Load your language on the command-line: dosbox -lang de dosbox -lang es dosbox -lang fr dosbox -lang it dosbox -lang pl dosbox -lang ru Or via primary or local config file: [dosbox] language = de # de, es, fr, it, pl, ru Tip Use dosbox -editconf to open your config file. For future reference, the above is also discussed in the README. Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox Team and the DOSBox-X Team. DOSBox Staging maintains original authorship on all commits to ensure attribution is recorded in the version control system (git).","title":"0.77.1"},{"location":"downloads/release-notes/0.77.1/#0771-release-notes","text":"Release date: 2021-08-28","title":"0.77.1 release notes"},{"location":"downloads/release-notes/0.77.1/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.77.1/#bugfixes","text":"The following user-visible bugs were fixed in 0.77.1 (reported-by; fixed-by) : Fix crash when using 32-bit build and the dynamic-core on Windows 10 (Banjo-Oz; kklobe) . Fix crash when using 32-bit build and the dynamic-core on Raspbian (nemo93; kklobe) . Fix degraded joystick control during once-a-month integer time-rollover event (cimarronm) . Fix inability for a program to use its own bundled HELP and CHOICE executables (SmilingSpectre; Wengier) . Fix inability to map joystick events when joysticktype was configured as none (GranMinigun; kcgen) . Fix incorrect setup of the joystick when type configured as 2axis (choum; kcgen) . Fix input control lag on some Windows systems and on macOS when the \u201cMagnet\u201d GUI management program is running (Burrito78; kcgen) . Fix mouse control in Alive \u2013 Behind the Moon (DOSBox SVN r4461/ripsaw8080) . Fix performance regression when building releases on arm-based Linux SBC (mrfixit2001) . Fix potential Tseng ET3000 video mode corruption (DOSBox SVN r4460; ripsaw8080) . Fix resizing of window impacting the debugger TUI on Windows (DOSBox SVN r4462; ripsaw8080) . Fix potential crash when quickly Alt + Tab ing on Windows (kklobe) . Fix size and placement of video content when using a resizeable window mode (bmunger; kcgen) . Fix unformattable content in translation files (dreamer; kcgen) . Synchronize Italian translation files (Kappa971) . Synchronize German translation files (Burrito78) . Generate macOS Universal Binary supporting x86_64 and arm64 (Kirk Klobe )","title":"Bugfixes"},{"location":"downloads/release-notes/0.77.1/#translations-pack-included","text":"French, German, Italian, Polish, Russian, and Spanish users: move the bundled translations directory into your DOSBox Staging configuration directory. macOS users Right click the dosbox-staging.app file and select \u201cShow Package Contents\u201d. The translations folder is inside Contents/resources/ . After the move, you will have: Linux /home/username/.config/dosbox/translations/ macOS ~/Library/Preferences/DOSBox/translations/ Windows C:\\Users\\<username>\\AppData\\Local\\DOSBox\\translations\\ Load your language on the command-line: dosbox -lang de dosbox -lang es dosbox -lang fr dosbox -lang it dosbox -lang pl dosbox -lang ru Or via primary or local config file: [dosbox] language = de # de, es, fr, it, pl, ru Tip Use dosbox -editconf to open your config file. For future reference, the above is also discussed in the README.","title":"Translations pack included"},{"location":"downloads/release-notes/0.77.1/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox Team and the DOSBox-X Team. DOSBox Staging maintains original authorship on all commits to ensure attribution is recorded in the version control system (git).","title":"Thank you"},{"location":"downloads/release-notes/0.78.0/","text":"0.78.0 release notes \u00b6 Release date: 2021-12-25 How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Significant changes \u00b6 Added Universal binary for macOS, supporting x86-64 and ARM64 (Kirk Klobe) Added a workaround for vsync lag, which is useful for video outputs that enforce vsync (Kirk Klobe) Added window size and placement customizations (John Novak) Added full /help output text for the AUTOTYPE , BOOT , CALL , CHOICE , CLS , COPY , DIR , ECHO , EXIT , GOTO , HELP , IF , INTRO , KEYB , LS , MD / MKDIR , MEM , RD / RMDIR , REN / RENAME , RESCAN , SHIFT , SUBST , and TYPE commands (Wengier) Added MSYS2-based release builds and instuctions for those on Windows using MSYS2 (Sherman Perry) Merged PCjr composite patch by NewRisingSun. Thanks to JKapp76 for testing and feedback (NewRisingSun) Merged CGA composite improvement patch by reenigne, respectively. Thanks to JKapp76 for testing and feedback (reenigne) Added bash-shell completion. See contrib/linux/bash-completion/README for adding this to your shell (FeignInt) Added Loguru, a fast cross-platform logging subsystem. Logs are now time-stamped and warnings are now colorized (Kirk Klobe) Merged S3 video patch by s3freak . This adds more video modes and supports up to 8 MiB of video memory, vmemsize = 8 , when using machine = svga_s3 . Thanks to Zorix , Grounded0 , Brandon Roberts , GranMinigun , Kirk Klobe , and nemo93 for testing (s3freak) Added configurable FluidSynth chorus and reverb settings. Thanks to GranMinigun for the extensive listening tests (kcgen) Added auto-exit. When an executable that\u2019s passed on the command-line exits, then so too will the emulator. This is equivalent to manually adding the -exit command-line flag. Thanks to Burrito78 for testing (kcgen) Added layered and portable configuration file handling. Thanks to JKapp76 , Grounded0 , and Burrito78 for testing (kcgen) Added ENet (reliable UDP) as an option for modem and null-modem transport, as well as SERIAL.COM for runtime serial-port configuration (Scott Duensing) Added support for virtual Ethernet and TCP/IP networking via slirp (Jookia) Added support for networking in Windows for Workgroups 3.11 from the shell . Previously networking in WfW was only possible when booting a real MS-DOS installation from a bootable HDD image (Wengier, nanshiki) Added IDE controller support, authored by joncampbell123 of the DOSBox-X project, for CD-ROM image-mounts, which is useful for CD-ROM based games that also happen to need a real DOS environment such as Revell\u2019s car games, like European Racers (joncampbell123, Wengier) Bugfixes \u00b6 Fixed 32-bit dynamic core crashes (Kirk Klobe) Fixed regression when setting windowresolution in the config file. Thanks to arrowgent for the report and testing (kcgen) Fixed hanging in Mortal Kombat Trilogy when joysticktype = none . Thanks to nemo93 for the report and GranMinigun for also testing (kcgen) Fixed regression during shutdown while using the ALSA sequencer. Thanks to AaronBPaden for the report and testing (kcgen) Fixed zero-offset PC Speaker issue on Windows 11. Thanks to ggpettas for reporting (kcgen) Fixed regression that broke video recording. Thanks to Grounded0 for reporting and testing (kcgen) Fixed ability to run an application-provided help.exe|com program. Thanks to SmilingSpectre for reporting (Wengier) Removed VESA modes 320\u00d7200\u00d715/16/24, which were added late in the 90s and were not properly supported by some games (NicknineTheEagle) Translation updates \u00b6 Italian (Kappa971) German (Burrito78) Russian (GranMinigun) Translations (de, es, fr, it, pl, and ru) are included with the release package and can be selected using the two-letter country code either via environment variable ( LANG=de ), config file ( [dosbox] language = it ), or command-line ( -lang ru ). See Section 14 in the README file for more details. Repository authors \u00b6 To ensure authors are credited for their work, the project records authorship on all commits in the version control system, including all works from the upstream DOSBox project, patch authors, and external projects. 0.78 author Lines changed arrowgent 361 Brandon Roberts 1495 Burrito78 1882 Christer Solskogen 4 Dan Church 2 David Reid 6733 Eli Schwartz 6 GranMinigun 1204 Gregory Pakosz 1178 John Novak 668 Jookia 2296 Kappa971 2773 kcgen 63022 Kirk Klobe 1658 llm 6 NicknineTheEagle 30 Patryk Obara 103 ripsaw8080 59 s3freak 648 Scott Duensing 7330 Sherman Perry 5408 Sjoerd van der Berg 28 Wengier 5430 Yann Collet 2438 ykhwong 7 During the 0.78 timeframe, DOSBox SVN commits r4466 through r4471 were merged to the project and authorship is reflected above. Wiki authors \u00b6 0.78 wiki author Lines changed Alberto Salvia Novella 164 Burrito78 2 Grounded0 557 John Novak 12 Joshua Fern 30 kcgen 243 Kirk Klobe 2 LowLevelMahn 14 MasterO2 395 nemo93 5370 Tobias Gruetzmacher 5 Financial contributors \u00b6 Antti Peltola : Project sponsor. His combined contribution of 4,000 USD spanning the 2021 period to maintainers and the project has allowed the team to add a dedicated Apple M1 build host. Thank you! Burrito78 : Project backer. Thank you! To support our work, join the Open Collective . Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"0.78.0"},{"location":"downloads/release-notes/0.78.0/#0780-release-notes","text":"Release date: 2021-12-25","title":"0.78.0 release notes"},{"location":"downloads/release-notes/0.78.0/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.78.0/#significant-changes","text":"Added Universal binary for macOS, supporting x86-64 and ARM64 (Kirk Klobe) Added a workaround for vsync lag, which is useful for video outputs that enforce vsync (Kirk Klobe) Added window size and placement customizations (John Novak) Added full /help output text for the AUTOTYPE , BOOT , CALL , CHOICE , CLS , COPY , DIR , ECHO , EXIT , GOTO , HELP , IF , INTRO , KEYB , LS , MD / MKDIR , MEM , RD / RMDIR , REN / RENAME , RESCAN , SHIFT , SUBST , and TYPE commands (Wengier) Added MSYS2-based release builds and instuctions for those on Windows using MSYS2 (Sherman Perry) Merged PCjr composite patch by NewRisingSun. Thanks to JKapp76 for testing and feedback (NewRisingSun) Merged CGA composite improvement patch by reenigne, respectively. Thanks to JKapp76 for testing and feedback (reenigne) Added bash-shell completion. See contrib/linux/bash-completion/README for adding this to your shell (FeignInt) Added Loguru, a fast cross-platform logging subsystem. Logs are now time-stamped and warnings are now colorized (Kirk Klobe) Merged S3 video patch by s3freak . This adds more video modes and supports up to 8 MiB of video memory, vmemsize = 8 , when using machine = svga_s3 . Thanks to Zorix , Grounded0 , Brandon Roberts , GranMinigun , Kirk Klobe , and nemo93 for testing (s3freak) Added configurable FluidSynth chorus and reverb settings. Thanks to GranMinigun for the extensive listening tests (kcgen) Added auto-exit. When an executable that\u2019s passed on the command-line exits, then so too will the emulator. This is equivalent to manually adding the -exit command-line flag. Thanks to Burrito78 for testing (kcgen) Added layered and portable configuration file handling. Thanks to JKapp76 , Grounded0 , and Burrito78 for testing (kcgen) Added ENet (reliable UDP) as an option for modem and null-modem transport, as well as SERIAL.COM for runtime serial-port configuration (Scott Duensing) Added support for virtual Ethernet and TCP/IP networking via slirp (Jookia) Added support for networking in Windows for Workgroups 3.11 from the shell . Previously networking in WfW was only possible when booting a real MS-DOS installation from a bootable HDD image (Wengier, nanshiki) Added IDE controller support, authored by joncampbell123 of the DOSBox-X project, for CD-ROM image-mounts, which is useful for CD-ROM based games that also happen to need a real DOS environment such as Revell\u2019s car games, like European Racers (joncampbell123, Wengier)","title":"Significant changes"},{"location":"downloads/release-notes/0.78.0/#bugfixes","text":"Fixed 32-bit dynamic core crashes (Kirk Klobe) Fixed regression when setting windowresolution in the config file. Thanks to arrowgent for the report and testing (kcgen) Fixed hanging in Mortal Kombat Trilogy when joysticktype = none . Thanks to nemo93 for the report and GranMinigun for also testing (kcgen) Fixed regression during shutdown while using the ALSA sequencer. Thanks to AaronBPaden for the report and testing (kcgen) Fixed zero-offset PC Speaker issue on Windows 11. Thanks to ggpettas for reporting (kcgen) Fixed regression that broke video recording. Thanks to Grounded0 for reporting and testing (kcgen) Fixed ability to run an application-provided help.exe|com program. Thanks to SmilingSpectre for reporting (Wengier) Removed VESA modes 320\u00d7200\u00d715/16/24, which were added late in the 90s and were not properly supported by some games (NicknineTheEagle)","title":"Bugfixes"},{"location":"downloads/release-notes/0.78.0/#translation-updates","text":"Italian (Kappa971) German (Burrito78) Russian (GranMinigun) Translations (de, es, fr, it, pl, and ru) are included with the release package and can be selected using the two-letter country code either via environment variable ( LANG=de ), config file ( [dosbox] language = it ), or command-line ( -lang ru ). See Section 14 in the README file for more details.","title":"Translation updates"},{"location":"downloads/release-notes/0.78.0/#repository-authors","text":"To ensure authors are credited for their work, the project records authorship on all commits in the version control system, including all works from the upstream DOSBox project, patch authors, and external projects. 0.78 author Lines changed arrowgent 361 Brandon Roberts 1495 Burrito78 1882 Christer Solskogen 4 Dan Church 2 David Reid 6733 Eli Schwartz 6 GranMinigun 1204 Gregory Pakosz 1178 John Novak 668 Jookia 2296 Kappa971 2773 kcgen 63022 Kirk Klobe 1658 llm 6 NicknineTheEagle 30 Patryk Obara 103 ripsaw8080 59 s3freak 648 Scott Duensing 7330 Sherman Perry 5408 Sjoerd van der Berg 28 Wengier 5430 Yann Collet 2438 ykhwong 7 During the 0.78 timeframe, DOSBox SVN commits r4466 through r4471 were merged to the project and authorship is reflected above.","title":"Repository authors"},{"location":"downloads/release-notes/0.78.0/#wiki-authors","text":"0.78 wiki author Lines changed Alberto Salvia Novella 164 Burrito78 2 Grounded0 557 John Novak 12 Joshua Fern 30 kcgen 243 Kirk Klobe 2 LowLevelMahn 14 MasterO2 395 nemo93 5370 Tobias Gruetzmacher 5","title":"Wiki authors"},{"location":"downloads/release-notes/0.78.0/#financial-contributors","text":"Antti Peltola : Project sponsor. His combined contribution of 4,000 USD spanning the 2021 period to maintainers and the project has allowed the team to add a dedicated Apple M1 build host. Thank you! Burrito78 : Project backer. Thank you! To support our work, join the Open Collective .","title":"Financial contributors"},{"location":"downloads/release-notes/0.78.0/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"Thank you"},{"location":"downloads/release-notes/0.78.1/","text":"0.78.1 release notes \u00b6 Release date: 2022-01-07 How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Fixes and regressions \u00b6 Maintenance changes to 0.78.1 are as follows (reported-by; fixed-by) : Fixed a crash when exiting fullscreen mode and also using OpenGL output (NicknineTheEagle; kcgen) Fixed a crash and host input lockup when using SDL\u2019s kmsdrm video driver (GranMinigun) Fixed an early exit bug when using the -exit and -c exit command-line arguments (pheener and d10sfan, kcgen) Fixed a memory leak when changing one or more serial port types at runtime (kcgen) Fixed a regression that failed to apply aspect correction when using pixel-perfect output modes (Diduz; kcgen) Fixed a regression that disabled the keyboard input when using the debugger (LowLevelMahn; kcgen) Fixed a regression that impacted 32-bit performance on some Windows systems (RaymanXY; Kirk Klobe and kcgen) Fixed a regression that causes a crash when opening UPX-compressed code-page files (FeralChild64; Wengier) Functionality refinements \u00b6 Improved the modem\u2019s command-mode handling (NicknineTheEagle) Corrected the modem\u2019s DTR drop delay units from ms to hundredths of a second (NicknineTheEagle) Reverted the allowance that let the VESA refresh rate use the host rate (RaymanXY; kcgen) Allowed read-only image mounting for write-protected disk and floppy images (Burrito78; Wengier) Documentation-related improvements \u00b6 Updated the German messages and config file text (Burrito78) Updated the Italian messages and config file text (Kappa971) Fixed a documentation conflict describing the command line\u2019s version flag (arrowgent) Documented how to install gmock, a dependency added during 0.78.0, on Fedora (oturpe) Development and packaging fixes \u00b6 Fixed a compilation issue with Loguru on ARM32 using GCC 8 (rtissera; kcgen) Fixed a compilation issue with older C++17 compilers missing std::filesystem support (jowtron; gulrak and kcgen) Fixed a build tool-specific bug that exposed the UI when running gmock tests (oturpe and voyageur; brandonrobertz and kcgen) Known issues \u00b6 The MSYS2-built debugger will fail to open if launched from the Windows UI. As a work-around, run it from within a command console. Thanks to Sherman Perry for investigating this issue and isolating it to the Windows Console API. Audio might stutter on some Windows platforms. If your system is affected, adjust the mixer\u2019s settings in your config file as follows: [mixer] blocksize = 1024 prebuffer = 25 Tip Run dosbox -editconf to open your config file. Thanks to Genju for reporting this regression and isolating the solution. Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"0.78.1"},{"location":"downloads/release-notes/0.78.1/#0781-release-notes","text":"Release date: 2022-01-07","title":"0.78.1 release notes"},{"location":"downloads/release-notes/0.78.1/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.78.1/#fixes-and-regressions","text":"Maintenance changes to 0.78.1 are as follows (reported-by; fixed-by) : Fixed a crash when exiting fullscreen mode and also using OpenGL output (NicknineTheEagle; kcgen) Fixed a crash and host input lockup when using SDL\u2019s kmsdrm video driver (GranMinigun) Fixed an early exit bug when using the -exit and -c exit command-line arguments (pheener and d10sfan, kcgen) Fixed a memory leak when changing one or more serial port types at runtime (kcgen) Fixed a regression that failed to apply aspect correction when using pixel-perfect output modes (Diduz; kcgen) Fixed a regression that disabled the keyboard input when using the debugger (LowLevelMahn; kcgen) Fixed a regression that impacted 32-bit performance on some Windows systems (RaymanXY; Kirk Klobe and kcgen) Fixed a regression that causes a crash when opening UPX-compressed code-page files (FeralChild64; Wengier)","title":"Fixes and regressions"},{"location":"downloads/release-notes/0.78.1/#functionality-refinements","text":"Improved the modem\u2019s command-mode handling (NicknineTheEagle) Corrected the modem\u2019s DTR drop delay units from ms to hundredths of a second (NicknineTheEagle) Reverted the allowance that let the VESA refresh rate use the host rate (RaymanXY; kcgen) Allowed read-only image mounting for write-protected disk and floppy images (Burrito78; Wengier)","title":"Functionality refinements"},{"location":"downloads/release-notes/0.78.1/#documentation-related-improvements","text":"Updated the German messages and config file text (Burrito78) Updated the Italian messages and config file text (Kappa971) Fixed a documentation conflict describing the command line\u2019s version flag (arrowgent) Documented how to install gmock, a dependency added during 0.78.0, on Fedora (oturpe)","title":"Documentation-related improvements"},{"location":"downloads/release-notes/0.78.1/#development-and-packaging-fixes","text":"Fixed a compilation issue with Loguru on ARM32 using GCC 8 (rtissera; kcgen) Fixed a compilation issue with older C++17 compilers missing std::filesystem support (jowtron; gulrak and kcgen) Fixed a build tool-specific bug that exposed the UI when running gmock tests (oturpe and voyageur; brandonrobertz and kcgen)","title":"Development and packaging fixes"},{"location":"downloads/release-notes/0.78.1/#known-issues","text":"The MSYS2-built debugger will fail to open if launched from the Windows UI. As a work-around, run it from within a command console. Thanks to Sherman Perry for investigating this issue and isolating it to the Windows Console API. Audio might stutter on some Windows platforms. If your system is affected, adjust the mixer\u2019s settings in your config file as follows: [mixer] blocksize = 1024 prebuffer = 25 Tip Run dosbox -editconf to open your config file. Thanks to Genju for reporting this regression and isolating the solution.","title":"Known issues"},{"location":"downloads/release-notes/0.78.1/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"Thank you"},{"location":"downloads/release-notes/0.79.0/","text":"0.79.0 release notes \u00b6 Release date: 2022-09-19 How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. What you can expect \u00b6 It should run everything that prior versions did. The default settings will give you improved audio, refined graphical scaling and colour accuracy, more robust mouse handling, and a more usable shell. There are new and some deprecated config settings: your console log will inform you with orange-coloured warning messages to help you. For performance-demanding games that use max cycles, it should provide just as much performance (or a bit more) than prior versions. International users : it should detect your language and keyboard layout on startup. We recommend reading the Localisation section for details. Repo packagers : learn about bundled resource files and the updated Meson build settings . Read on for all the details! Audio improvements \u00b6 AdLib Gold Surround Module emulation \u00b6 The ultra-rare AdLib Gold surround sound daughterboard is now emulated, which makes it possible to finally enjoy the Dune soundtrack in its full glory! That\u2019s the only game in existence that makes use of the surround module. The following config is recommended for Dune . The setup utility should auto-detect AdLib Gold and the surround module correctly with these settings. [sblaster] sbtype = sb16 oplmode = opl3gold Sound card output filter emulation \u00b6 Most DOS-era sound cards feature an output low-pass filter (and sometimes a high-pass filter too) that play an important role in giving their sound its character. DOSBox Staging can now accurately emulate these analog output stage filters for all supported sound devices. Sound Blaster \u00b6 For backward compatibility reasons, the sb_filter config parameter defaults to the newly introduced modern filter, which uses the simple linear interpolation method of previous DOSBox versions. To turn on accurate analog output filter emulation, set the sb_filter to auto . This will set the correct filters for each Sound Blaster model depending on the sb_type value. You can also set a model-specific filter manually if you wish, e.g. this is how to use a Sound Blaster 16 but with Sound Blaster Pro filters: [sblaster] sbtype = sb16 sb_filter = sbpro1 Some Sound Blaster models can toggle the filter on and off in software; you can force the filter to be always on by setting sb_filter_always_on to true . OPL and CMS filters are also accurately emulated; please refer to the descriptions of the opl_filter and cms_filter config parameters for further details. Small-speaker systems \u00b6 Filters are enabled by default for all small-speaker audio systems (PC Speaker, PS/1 Audio, Tandy, and the various LPT DAC options). Depending on the particular device, these filters either emulate the analog output filters of the original device, or the sound coming out of a small band-limited speaker in an acoustic environment. Either way, the result is a more period-accurate and pleasant listening experience, especially on headphones. Small-speaker filters are controlled by the following config parameters: lpt_dac_filter pcspeaker_filter ps1audio_dac_filter ps1audio_filter tandy_dac_filter tandy_filter Custom filters \u00b6 Advanced users can specify custom filter settings for any of the supported sound devices. You can specify either a high-pass filter, a low-pass filter, or both at the same time using the following format TYPE ORDER FREQ [TYPE ORDER FREQ] where TYPE can be hpf (high-pass) or lpf (low-pass), ORDER is the order of the filter from 1 to 16 (1 st order results in a 6dB per octave slope, 2 nd order in a 12dB per octave slope, etc.), and FREQ is the filter\u2019s cutoff frequency in Hz. For example, to use a 2 nd order (12dB/oct) low-pass filter at 8 kHz for the Sound Blaster: sb_filter = lpf 2 8000 To use a 3 rd order (18dB/oct) high-pass filter at 120 Hz, and a 1 st order (6dB/oct) low-pass filter at 6.5 kHz for the PC Speaker: pcspeaker_filter = hpf 3 120 lfp 1 6500 In addition to the sound devices mentioned above, you use custom filters even with devices that don\u2019t filter the output in the original hardware (e.g. GUS, MT-32), and the FluidSynth virtual MIDI device via the following config parameters: fsynth_filter gus_filter innovation_filter mt32_filter Crossfeed \u00b6 Listening to audio material on headphones where certain sounds are only present in either the left or the right channel can be a rather distracting and unpleasant experience. This is most noticeable on certain Dual OPL game soundtracks and tracker music (e.g. MOD, XM, S3M, IT, etc.) The new crossfeed feature remedies that; by enabling crossfeed in the [mixer] section, a certain percentage of the left channel is mixed into the right, and vice versa. The default crossfeed strength is 40% which is a good general setting, but you can provide a custom percentage value as well (e.g. crossfeed = 55 ). The amount of crossfeed can be fine-tuned per individual channels via mixer commands; please type MIXER /? in the DOSBox prompt for further details. Reverb and chorus \u00b6 Reverb \u00b6 One of the most exciting new audio features is the ability to add reverb (the emulation of real acoustic spaces) and chorus effects to any mixer channel. This can add a lot of atmosphere to dry-sounding synth soundtracks (typically OPL music) and elevate them to a whole new level! Enabling reverb and chorus processing is especially useful for headphone-listening. The quickest way to enable the reverb effect globally is to put reverb = on in the [mixer] config section. This will add reverb to all synth channels (e.g. PC Speaker, OPL, CMS), and a lesser amount to digital audio channels (e.g. Sound Blaster, GUS). While the default setting works well in most games, it\u2019s highly recommended to experiment with the five available reverb presets to find the optimal setting for each game: tiny simulates the sound of a small integrated speaker in a domestic room. This preset is specifically tailored for small-speaker audio systems (PC Speaker, Tandy, PS/1 Audio, and LPT DAC devices). small adds a subtle sense of space; it\u2019s best suited for games that use a single synth channel (typically OPL) for both the music and the sound effects. medium is the default preset; it\u2019s a middle-of-the-road setting that works well with a wide variety of games. large is a large hall-style reverb that is recommended for games that use separate audio channels for music and digital audio (e.g. OPL audio and Sound Blaster digital sound.) huge is a stronger variant of the large hall preset which is ideal for slower-paced, atmospheric music. Chorus \u00b6 Another way to add a sense of space to the sound is by enabling the chorus effect . This adds stereo movement and increases the perceived stereo width, which is especially noticeable on purely mono signals on headphones (e.g. PC Speaker or OPL2 music). To enable it, just put chorus = on into the [mixer] config section, or select one of three predefined chorus strength presets, light , normal or strong . Similarly to crossfeed, per-channel reverb and chorus settings can be tweaked by mixer commands; please type MIXER /? in the DOSBox prompt for details. Audio Examples Naturally, you can combine chorus and reverb, and it\u2019s not only possible to do so, but highly recommended for achieving the best results! The below recordings showcase how crossfeed, reverb, chorus, and output stage filters can work in tandem to give old DOS game soundtracks a new life. The exact settings used for these recordings are documented on the wiki , along with suggested audio configs for many other games. Make sure to check them out and experiment with the settings yourself! \ud83d\ude0e \ud83d\udd09 \ud83c\udfa7 Your browser does not support the video element. Alone in the Dark (1992, floppy version) \u2014 introduction Game Type Audio Example Alone in the Dark (floppy version) OPL2 Your browser does not support the audio element. Warcraft: Orcs & Humans OPL3 Your browser does not support the audio element. Dungeon Master II: The Legend of Skullkeep Dual OPL2 Your browser does not support the audio element. Ultima Underworld I: The Stygian Abyss Dual OPL2 Your browser does not support the audio element. Elvira: Mistress of the Dark Dual OPL2 Your browser does not support the audio element. Skate or Die! Tandy Your browser does not support the audio element. Zak McKracken and the Alien Mindbenders Tandy Your browser does not support the audio element. Budokan: The Martial Spirit CMS Your browser does not support the audio element. The Secret of Monkey Island CMS Your browser does not support the audio element. Master compressor \u00b6 An auto-levelling dynamic range compressor has been introduced to the master channel to ensure that the audio output never gets distorted, no matter how high the volume levels are. This is on by default and is virtually transparent when the output is not driven into clipping. However, purists can disable it by setting compressor to off , and then ensure correct non-clipping output levels manually. General mixer improvements \u00b6 The mixer now uses a full floating-point processing path internally, which means you can no longer overload individual mixer channels into clipping by using high per-channel volume settings. As long as the summed master output is not clipping, it\u2019s guaranteed that nothing else will. A fixed high-pass filter at 20 Hz has been introduced right before the final output that gets rid of any DC-offset and subsonic rumble globally. The MIXER command has received an overhaul too. First of all, the status output looks better, and the following improvements have been made: Now you can set reverb, chorus, and crossfeed levels per mixer channel; type MIXER /? in the DOSBox prompt for further details. The FM channel has been renamed to OPL . The SPKR channel has been renamed to PCSPEAKER . The sample rate column has been removed (it served no useful purpose, and the displayed values were often technically correct but misleading). For a high-level overview of the new mixer architecture, please refer to this diagram . \u201cOne OPL mode to rule them all\u201d \ud83d\udc8d \u00b6 NukedOPL has long been the default OPL mode in Staging. As it\u2019s basically a bit-perfect emulation of the Yamaha YMF262 OPL3 chip , and it runs fast enough even on low-end hardware such as the Raspberry Pi 4, all other less accurate OPL emulation modes have been removed. FluidSynth configuration changes \u00b6 FluidSynth Reverb and Chorus \u00b6 Due to the introduction of the new mixer-level reverb and chorus effects , the FluidSynth reverb and chorus config parameters have been renamed to fsynth_reverb and fsynth_chorus , respectively. To maintain backward compatibility with existing configurations, the FluidSynth reverb and chorus effects are enabled by default, so all your SoundFonts will sound just like in previous DOSBox versions. If you enable the mixer-level reverb (or chorus) as well (e.g. by putting reverb = on in the [mixer] section), you would get a second round of reverb (or chorus) processing on the FluidSynth output. This is by design as it allows users the greatest level of control over customising SoundFonts (e.g. some would sound best with the FluidSynth reverb only, some with both, etc.) Note In the SF2 format the reverb and chorus amounts are specified on a per-instrument basis, while the mixer-level effects are applied \u201cglobally\u201d to all instruments in the summed FluidSynth output. Therefore, what works best really depends on the particular SoundFont in question and on individual user preference (see this discussion for further technical details). Volume Scaling \u00b6 Previously, it was possible to specify a percentage after the SoundFont\u2019s name in the config to adjust its volume (e.g. soundfont = way_too_loud.sf2 30 ). This was introduced as a workaround for certain loud SoundFonts that tended to clip the mixer channel internally. With the new floating-pointing mixer signal path, it\u2019s no longer possible to drive any of the mixer channels into clipping, therefore this workaround has been deprecated. Please use standard mixer commands to lower the volume of the FSYNTH channel if you wish to do so. ripa\u2019s PC speaker patch \u00b6 We\u2019ve integrated ripa\u2019s impulse-model PC speaker patch alongside DOSBox\u2019s existing (discrete-model) PC speaker implementation, which is still the default. To use it, set the pcspeaker config setting to impulse (or go back to default with discrete ). James-F and VileRancour have mentioned in the linked thread that it generally improves the accuracy of square-wave effects, such as in Commander Keen and Duke Nukem (2D). This patch also can produce sounds when none previously existed, such as in Wizball , as noted by ripsaw8080 . For example, here\u2019s Wizball using the settings below: [mixer] rate = 32000 [speaker] pcspeaker = discrete Your browser does not support the video element. Wizball (1987) \u2014 using discrete PC speaker emulation Note There are some audible regressions and harmonics that still exist in some games, so that\u2019s why this is an alternative and not the default. Parallel port DAC models: Disney, Covox, and Stereo-On-1 \u00b6 Those familiar with DOSBox know that these three devices are emulated with the universal disney = true setting. Like sbtype , we wanted the model of LPT DAC to be configurable, and so Staging\u2019s deprecated the disney setting in favour of lpt_dac that takes any of the following: disney , for the Disney Sound Source covox , for the Covox Speech Thing ston1 , for the Stereo-on-1 DAC device off/none , to disable the DAC (default) This is paired with a corresponding filter setting, lpt_dac_filter , which approximates how the original device sounded. This means that the Disney Sound Source (which included a little speaker inside it) will sound a lot like you might remember. lpt_dac Examples (ModPlay Pro & Star Control II\u2019s 8-bit Pkunk MOD) disney Your browser does not support the audio element. covox Your browser does not support the audio element. ston1 Your browser does not support the audio element. Like the other audio filters settings, the lpt_dac_filter can be toggled on, off, or customised. Audio mute and pause \u00b6 The audio stream can now be manually muted with Ctrl + F8 (or Cmd + F8 on macOS). You can also mute the audio automatically when DOSBox Staging goes to the background with this config setting: [sdl] mute_when_inactive = true Or you can pause emulation entirely when in the background with: [sdl] pause_when_inactive = true Graphical improvements \u00b6 Shader reload shortcut \u00b6 As DOSBox Staging currently lacks a shader preset system, tweaking shader parameters can only be accomplished by making changes to the shader source files themselves. Previously, you had to restart DOSBox to see the effects of such changes, which made fine-tuning shaders quite cumbersome, to say the least. Now you can just use the Ctrl + F2 shortcut ( Cmd + F2 on macOS) to reload the current shader at any time. Progress! \ud83d\ude0e CGA palette override \u00b6 Now it is possible to override the default, canonical interpretation of the 16-colour CGA/EGA RGBI palette. The feature overrides the CGA colours in any CGA/EGA-like mode, so it even works in CGA/EGA modes with an emulated VGA or TGA (Tandy) graphics adapter. Several presets have been included (e.g. Amiga and Atari ST colours for Sierra games, and various CGA/EGA monitor emulations), and you can specify custom palettes as well. Make sure to check out the description of the cga_colors config parameter for the list of available presets (you can read more about them here ). Defender of the Crown tandy-warm emulates the colours as they appear on an actual Tandy monitor, which results in more subdued and pleasant colours. This is especially apparent on the greens. default tandy-warm Gold Rush The Amiga/Atari ST ports of Sierra AGI games feature a tweaked CGA palette with improved skin tones and sky colours. default agi-amigaish Zak McKracken and the Alien Mindbenders Now you can play the PC version of this classic adventure with Tandy sound and Commodore 64 colours! default colodore Scaled image quality improvements \u00b6 When the image is scaled by non-integer ratios (e.g. when aspect correction is enabled with the default sharp OpenGL shader), previously the interpolation was performed in a gamma-incorrect way, leading to various unwanted artifacts. These were most noticeable on checkerboard dither patterns (used frequently in EGA games), appearing as interference (moir\u00e9) patterns, and on high-contrast antialiased text (e.g. regular black text on white background appeared bold). macOS notes All Mac browsers tend to display the below images with incorrect gamma on the built-in MacBook displays, which makes the \u201cbad\u201d images look less wrong, and there are slight interference patterns on the \u201cgood\u201d images. Please download the images and view them in the Preview app instead, which displays them correctly. Time Quest Good Bad Space Quest III: The Pirates of Pestulon Good Bad Windwalker Good Bad High DPI on macOS \u00b6 The backstory: DOSBox Staging uses OpenGL output with the sharp bilinear scaling shader to keep the picture crisp no matter how big or small the image is, and minimise blurring on pixel transitions. Due to the way macOS handles DPI scaling, the image was drawn at a much lower resolution, usually just a quarter of the window size. Then it was stretched by the system, producing an unpleasantly mushy presentation. But we want our pixels to be so sharp they could cut one\u2019s eyes Before After Now DOSBox Staging can handle high DPI displays, be it Retina or not, so you and shaders alike can see all the (physical) pixels. Please note that this is currently experimental: only macOS is currently supported, and we haven\u2019t thoroughly tested multi-display setups. Please report any weird behaviour! Support for Windows will come in the future, and for Linux, it is still uncertain. Also note that due to the way rendering is currently implemented, you may observe lowered performance on higher resolution displays, especially when running off integrated graphics. This might be remedied in the future as well. Window transparency support \u00b6 There might be situations where you want to place the DOSBox Staging window on top of another window while seeing both windows at the same time. Indeed, you can now set the DOSBox Staging window as transparent, with a customised level of window transparency, so that you can see the background window as well. There is a new config option transparency for this, whose valid values are between 0 (no transparency; default) to 90 (high transparency). Frame presentation modes \u00b6 DOSBox presents frames when new content is available, which means that sometimes the effective frame rate can vary between 0 FPS (if the screen content isn\u2019t changing) and as fast as the DOS vertical refresh (vblank) rate (typically up to ~70 Hz). We\u2019ll call this presentation mode Variable Frame Rate or VFR . In addition to VFR, DOSBox Staging supports a Constant Frame Rate (CFR) presentation mode, which presents a constant frame rate defined by the emulated DOS rate, as well as variations on both: Synced CFR , which presents a constant frame rate but is synchronised with the host\u2019s refresh rate. This presents only the most recently updated frame when the DOS rate exceeds the host rate. Throttled VFR , which presents a variable frame rate up to the DOS rate throttled to the display\u2019s rate. This presents only the most recently updated frame when the DOS rate exceeds the host rate. By default, DOSBox Staging inspects runtime conditions and picks the optimal presentation mode. Synced CFR mode selected due to vsync-enforced video drivers Although typically not needed, power users might be interested in forcing a given mode or rate, which can be done using the following config settings (which includes detailed descriptions in the conf): [sdl] presentation_mode = auto | cfr | vfr host_rate = auto | sdi | vrr | custom-rate [dosbox] dos_rate = default | host | custom-rate DOS shell improvements \u00b6 Piping from the DOS prompt or batch files \u00b6 DOSBox did not support the piping operation previously, but DOSBox Staging now brings piping support as how it has worked in DOS and most other operating systems. This allows two or more commands to communicate by passing the output text of one command to another as its input text. For example, commands like ECHO Y | CHOICE will work, so that the Y option will be passed as the input of CHOICE command. Chained piping is also supported, such as DIR | SORT | MORE for displaying sorted directory output one screen at a time (provided that you have the SORT and MORE commands from MS-DOS or FreeDOS in your path). If the current directory and C:\\ are both read-only, the environment variable %TEMP% (or %TMP% ) needs to be set within DOS pointing to a writable directory so that piping will work properly (e.g. SET TEMP=C:\\TEMP ). File attribute support and ATTRIB command \u00b6 File attributes contain information about how the files should be used, and in DOS these correspond to Archive ( A ), Read-only ( R ), Hidden ( H ), and System ( S ) attributes. DOSBox Staging now adds support for file attributes through ATTRIB command (type ATTRIB /? for more information about this command) or through DOS API that accesses to file attributes. For example, some game installers and applications make use of file attributes. All file attributes are currently supported except for system and hidden attributes on mounted local drives for non-Windows platforms. Default choices for the CHOICE command \u00b6 The CHOICE command allows you to choose from a list of options, but sometimes you want to have some default choice if no selection is made within the specific time period. DOSBox Staging now allows you to do this, by specifying the /T option which includes a default choice and the time period in seconds. For example, CHOICE /C:ABC /T:B,2 will default to the choice B (among A , B , and C ) if no key press is made within 2 seconds. Mount improvements \u00b6 Physical CD-ROM mount support \u00b6 Mounting physical CDs is now (re-)implemented in DOSBox Staging for better compatibility with games like Under a Killing Moon , System Shock , and The Pandora Directive . The feature is supported in DOSBox SVN but was forced to be dropped from DOSBox Staging earlier during the SDL2 migration process. We\u2019ve brought it back by using the SDL1 CD support code as an external library, plus restoring the main SDL CD interface from DOSBox. To use the feature, execute the command mount -cd to list all CD drives and their numbers, and use -usecd NUMBER parameter to specify a CD drive NUMBER , just like you would do in DOSBox SVN. Playing CD audio tracks from physical discs is also supported in Windows as with DOSBox SVN. Read-only disk image mount support \u00b6 You might have encountered the problem previously that you could not mount write-protected disk images, which happened simply because DOSBox Staging required write access to mount disk images. Sometimes the user may also want to mount a disk image in a read-only manner (so that the content in the disk image will not be changed inside the emulator), even if the disk image itself is not write-protected. We have realised that in either case the requirement for write access is not needed for mounting disk images, so we have added support for mounting them in a read-only manner, either when the disk image files are read-only or when the -ro flag is specified by the users. Z-drive customisation and directory support \u00b6 The internal Z drive that is automatically mounted when you launch DOSBox Staging is now fully customisable, allowing users to add their own files or programs to the drive by putting them in the drivez subdirectory inside the DOSBox Staging program directory. Files already existing on the Z drive will be replaced by the user-provided ones, e.g. you can use your own MEM.COM or KEYB.COM commands instead of the default ones on the Z drive. Moreover, support for one-level subdirectories has been added, allowing users to better organise their files, resulting in a cleaner-looking Z drive. The drive\u2019s contents can be refreshed via the RESCAN command to reflect any changes made to it at the host OS level. IMGMOUNT wildcard support \u00b6 The IMGMOUNT command allows you to mount disk or CD images, but sometimes you may want to mount multiple images to a single drive, swappable via a keyboard shortcut. Previously you had to specify the names of the all the image files one by one, even if they have some patterns in common (like DISK1.IMG , DISK2.IMG , DISK3.IMG , etc). IMGMOUNT command now supports wildcards for mounting image files, so that you can just specify a file pattern that matches all the image files that you want to include. For example, the command IMGMOUNT a d:\\*.img -t floppy will mount all image files with the IMG extension on D:\\ as floppy images. Automount of resource drives \u00b6 Directories can now be automounted, provided the automount config setting is enabled (which it is, by default). These automount directories are single-letter directories, a through y representing the mounted drive letter (where z is reserved for DOSBox\u2019s drive) placed inside a local drives/ directory, relative to the startup location. This drives/ directory can also be placed in a scanned resource location, like your DOSBox config directory or the release package\u2019s resources/ area. Each drive can be customised with an accompanying <letter>.conf to define its mount type , label , and path . For example, to mount a local drives/d/ directory as a D: CD-ROM with the label SIERRA , the accompanying d.conf would contain: [drive] type = cdrom label = SIERRA A bundled Y: automount is provided in the release\u2019s resources/ directory that bundles a couple FreeDOS 3 rd party tools ( XCOPY.COM , DELTREE.COM , DEBUG.COM ) along with an accompanying y.conf to add it to the PATH. Note This feature doesn\u2019t yet support image mounts, such as .img , .bin/cue , or .iso . Localisation improvements \u00b6 Code pages and keyboard layouts \u00b6 The 20-year-old FreeDOS code pages (screen fonts) and keyboard layouts were updated to the latest versions, offering countless new definitions for use. See the full list in the following documentation: List of available code pages List of available keyboard layouts Some notable examples: KEYB bg 3021 \u2014 sets a Bulgarian keyboard layout and code page, with Cyrillic characters encoded according to the MIK standard KEYB cz489 867 \u2014 a so-called programmer keyboard layout (national characters available with Right Alt + 0 - 9 ) for Czech and Slovak languages, with Kamenick\u00fd character encoding - which was more popular than code page 852 KEYB de 858 \u2014 German keyboard, code page with EUR currency symbol KEYB hu 3845 \u2014 Hungarian keyboard, CWI-2 character encoding KEYB pl 668 \u2014 code page specially designed for the Polish language; places national characters on the same positions as standard code page 852 (so it is compatible with current software and text documents), but preserves more table drawing symbols KEYB pl 667 \u2014 Mazovia encoding for Polish language, used mainly by older business software Country support for different date, time, and decimal formats \u00b6 The display formats for dates, times, and decimals were previously fixed to the United States style, but this is no longer the case with this new version. Indeed, DOSBox Staging can now display date, time, and decimal formats according to the system locale and country settings, and for example, in the Canadian French locale (country code 2) the date and time will be displayed as 2002-10-01 12:34 instead of 10-01-2002 12:34p as displayed in the United States locale (country code 1). There is a new config option country which allows you to manually specify the country code for the date, time, and decimal formats. Canadian French locale United States locale Local language and keyboard layout detection improvements \u00b6 On macOS and Windows systems, local languages now are more robustly detected and applied. Note that these can still be manually set using the language and keyboardlayout config settings when needed, or via the KEYB command as mentioned above. Input improvements \u00b6 Mouse-wheel emulation \u00b6 The built-in mouse driver now provides a wheel support for application aware of CuteMouse extensions; examples include Necromancer\u2019s DOS Navigator and Mpxplay . The original CuteMouse driver version 2.1 is also able to use the PS/2 mouse wheel, just start it with CTMOUSE /o . Serial mice emulation \u00b6 Numerous serial (COM port) mice are now emulated: original Microsoft mouse with 2 buttons Logitech mouse, with 3 buttons wheel mouse with 3 buttons Mouse Systems mouse (old mouse type, not compatible with the ones listed above), with 3 buttons To enable serial mouse, user the SERIAL 1 mouse command (this will attach it to the COM1 port), or edit the [serial] section of the configuration file. By default, DOSBox Staging tries to determine what kind of mouse the game or application expects. With serial mouse emulation, Windows 1.01 is finally usable! Windows 3.1 seamless mouse integration \u00b6 It is now possible to have a seamless mouse integration using one of the following 3 rd party VMware-compatible Windows 3.1 mouse drivers: VBADOS by javispedro \u2014 this one requires a corresponding DOS mouse driver to be started; this driver also provides seamless mouse integration for a real DOS if booted inside DOSBox Staging vmwmouse by NattyNarwhal \u2014 does not require any specific DOS driver and has experimental support for mouse wheel, but current version 0.1 has stability problems For now, only the mouse is supported (no VMware directory sharing, etc.), only using VMware protocol (no VirtualBox-only drivers). Windows 9x VMware mouse driver is not supported. Joystick calibration hotkeys \u00b6 Most DOS games that offer analog joystick control include some form of calibration. However, some games have poor or limited calibration resulting in the joystick\u2019s position drifting or being offset, despite calibration attempts. To compensate for these rare cases, DOSBox Staging lets you adjust the joystick\u2019s X and Y position parameters in real time by enabling the use_joy_calibration_hotkeys setting in the [joystick] config section. Once activated, you can tap Ctrl + arrow-keys or Alt + arrow-keys to adjust either the joystick\u2019s scalar multiplier or absolute offset position, respectively. These let you \u201ccounterbalance\u201d calibration issues in real time. Each tap of the hotkeys will log the calibration values for the given axis. For example: x_calibration = 0.576211,0.02 y_calibration = 0.5474,-0.005 Once you\u2019ve found the optimal settings for a game, the logged calibration values can be placed in the game\u2019s local config file (so the setting are only active for the affected game). Using the above as an example: [joystick] use_joy_calibration_hotkeys = false joy_x_calibration = 0.576211,0.02 joy_y_calibration = 0.5474,-0.005 Note that you can disable the calibration hotkeys once you\u2019ve found settings that work for a problematic game. Here\u2019s a video showing how the calibration hotkeys \u201cpull\u201d the joystick in various directions: Your browser does not support the video element. General improvements \u00b6 Command-line setting of configuration options \u00b6 Some people may want to temporarily run DOSBox Staging with specified config option(s), and in this new version you can do this with the new -set command-line option when launching DOSBox Staging, instead of having to modify the configuration file before you start DOSBox Staging. For example, the user can temporarily run DOSBox Staging with the EMS memory disabled with the command line dosbox -set ems=false , overriding the setting in the configuration file. The -set option can be specified multiple times for different config options, similar to the -c option which can be used multiple times to run multiple commands after DOSBox Staging starts. Windows installer for Windows users \u00b6 Previously, DOSBox Staging was only available as portable zip packages for Windows users, but this has changed in this new version\u2014as a Windows user you can now install DOSBox Staging more easily with the installer, which is especially recommended for new and first-time users. When the installer is used, the installation process will be automated while allowing you to change certain things like the installation folder, and you will be able to launch DOSBox Staging as soon as the installation ends. Shell context menus can also be automatically added for a faster launch of DOSBox Staging from Windows Explorer. Welcome page Icons after installation Configurable modem connect speeds \u00b6 The soft-modem\u2019s reported connect speed can be customised using the serial port\u2019s baudrate setting. for example: serial1 = modem baudrate:2400 Although this doesn\u2019t change the underlying baud rate, it can help satisfy old modem software if it\u2019s unable to handle (or parse) the larger connect values. Handling options for memory faults in buggy games \u00b6 Extremely rare programming bugs \ud83d\ude09 in some DOS games (and programs) may cause them to accidentally write data beyond their allocated memory region, similar to \u201cpainting outside the lines\u201d. DOSBox is great at catching these instances: it flags the corruption and quits, preventing the program from barreling on and possibly doing more harm such as writing corrupt save games, documents, and so on. DOSBox Staging defaults to this same behaviour, but adds the [dosbox] mcb_fault_strategy config setting: mcb_fault_strategy Behaviour How it affects the buggy game deny Report and quit as soon as a fault is detected (default) Game terminates, no risk of subsequent file corruption repair Report and repair up to 100 sequential faults Game continues, but may still be unstable if its developers expected the corruption report Report the corruption and carry on Game continues, but risks further instability and file corruption allow Carry on without reporting Game continues, but risks further instability and file corruption Only consider this if your game is prone to crashing with MCB chain corruption errors reported in the console log. Developer-related improvements \u00b6 Self-documenting bit twiddling with bit_view \u00b6 We\u2019ve implemented a bit_view C++ class using constant expressions to access a subset of a data-field\u2019s bits, allowing them to be read, written, assigned, flipped, cleared, and tested, without the need to for the usual twiddling operations. Constructing a bit_view is similar to a C bitfield, however unlike C bitfields, bit_view s are free from undefined behaviour and have been proven using GCC\u2019s and Clang\u2019s undefined behaviour sanitisers. There\u2019s more detail and some code examples here . Memory block and type size simplification \u00b6 DOS\u2019s emulated main memory (up to 64 MiB) and the video card\u2019s memory (to up 8 MiB) are both now allocated statically to reduce pressure on heap storage ( #1714 ). More progress has been made in reducing the use of large variables type-sizes down to purpose-fit sizes per the DOS/hardware specification (typically 8 or 16-bit) ( #1721 ). Tracy profiler integration \u00b6 The Tracy event profiler has been integrated into the build system and basic hooks are in place to log frames and tics. These are only active (and not compiled in) unless Tracy is enabled. Here\u2019s what it looks like: Tracy runtime-profiling DOSBox Staging It can be enabled at build-time with -Dtracy=true . Learn more about it, and how to build the server-side component here: #1749 . Continuous integration MSYS2 workflow improvements \u00b6 The MSYS2-based workflow has been brought in line with current best practices, which dramatically improved its build time and lead to us now using it to generate the default Windows release binaries. Release-package shell script \u00b6 Release packages are now generated using a cross-platform POSIX-compliant shell script. With this logic moved into a script, developers can now easily test the creation of a release package locally, which was previously impossible as that logic only lived in a GitHub-syntax YAML. Static analysis \u00b6 The team continues to fix and address static analysis issues as flagged by various analysers. Here are our Coverity Scan metrics to-date: Translation status \u00b6 German: up-to-date Italian: up-to-date Polish: up-to-date Russian: config sections up-to-date French: not updated Spanish: not updated The 0.79.0 configuration file is also in UTF-8 format for the German, Italian, and Polish languages under the package\u2019s resources/translated-0.79-conf-files directory. The messaging system now supports self-documenting markup syntax, which is much easier to read and maintain compared to the previous ANSI escape sequences. Old escape-code style New markup style Escribiendo ^[[34;1mdir^[[0m all\ufffd mostrar\ufffd su contenido. Digita [color=blue]dir[reset] per visualizzarne il contenuto. Notable fixes \u00b6 Fixed Ultima Underworld issues with gaming (high polling rate) mice Fixed lockups and input issues with the debugger on macOS and Linux. Note that for those using the debugger on Linux, we recommend building it with SDL 2.0.18, because some input/interaction bugs exist when using newer SDL versions. Fixed colours becoming very dim on newer Intel integrated GPUs due to Intel\u2019s OpenGL drivers not properly handling the sRGB linear colour space. Fixed a memory-read race condition present during the splash-image display, which also reduced start-up time by around 200 ms. Fixed display of the low-resolution halfline VESA 2.0 mode used by Extreme Assault through the addition of a new vesa_mode config setting value, named halfline . Named the macOS application \u201cDOSBox Staging.app\u201d per the macOS per Human Interface Guidelines. Fixed a usability trap door when opening the mapper without mouse support: in these cases, the user was unable to exit the mapper. The mapper now only opens when mouse support is enabled. Special thanks \u00b6 John Novak for all the audio enhancements, mixer cleanup, shader improvements, and code reviews FeralChild64 for the mouse overhaul, code page and layout cleanup and improvements, and code reviews Wengier for the shell improvements, mount and CLI additions, and Windows installer Antti Peltola for providing historic resources, documentation help, and project support shermp for the MSYS2 cleanup, cross-platform packaging script and CI cleanup, ANSI markup system, and code reviews Kirk Klobe for the debugger fixes, Tracy integration, and paging and memory system refinements GranMinigun for the HiDPI additions, video chain fixes, and Russian translations nemo93 for testing 400+ games on the Raspberry Pi Kappa971 for the Italian and configuration file translations, and leading the translation effort Burrito78 for the German translation Contributors \u00b6 Maintainers \u00b6 kcgen John Novak FeralChild64 shermp Wengier Authors \u00b6 kcgen John Novak FeralChild64 Wengier shermp Kirk Klobe GranMinigun Patryk Obara ripsaw8080 (DOSBox maintainer) NicknineTheEagle David Reid (dr_lib author, 3 rd party dependency) Leandro Nini (libresidfp author, 3 rd party dependency) Jonathan Campbell (DOSBox-X maintainer) Dean Beeler ripa (DOSBox patch author) Keenan Weaver Dennis L\u00fchring IPeluchito Otto Liljalaakso Peter Ferrie arrowgent gulrak hunterk Translators \u00b6 Burrito78 (German) FeralChild64 (Polish) GranMinigun (Russian) Kappa971 (Italian) Sponsors \u00b6 Antti Peltola: 3,000 USD during the 0.79 development cycle Wengier Backers \u00b6 Burrito78 Hugo Locurcio Thank you to our financial contributors who allow us to purchase hardware, licenses, and other non-trivial expenses to keep the team and project going. To support our work, donate to our GitHub Sponsors or Open Collective . Thank you \u00b6 We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"0.79.0"},{"location":"downloads/release-notes/0.79.0/#0790-release-notes","text":"Release date: 2022-09-19","title":"0.79.0 release notes"},{"location":"downloads/release-notes/0.79.0/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.79.0/#what-you-can-expect","text":"It should run everything that prior versions did. The default settings will give you improved audio, refined graphical scaling and colour accuracy, more robust mouse handling, and a more usable shell. There are new and some deprecated config settings: your console log will inform you with orange-coloured warning messages to help you. For performance-demanding games that use max cycles, it should provide just as much performance (or a bit more) than prior versions. International users : it should detect your language and keyboard layout on startup. We recommend reading the Localisation section for details. Repo packagers : learn about bundled resource files and the updated Meson build settings . Read on for all the details!","title":"What you can expect"},{"location":"downloads/release-notes/0.79.0/#audio-improvements","text":"","title":"Audio improvements"},{"location":"downloads/release-notes/0.79.0/#adlib-gold-surround-module-emulation","text":"The ultra-rare AdLib Gold surround sound daughterboard is now emulated, which makes it possible to finally enjoy the Dune soundtrack in its full glory! That\u2019s the only game in existence that makes use of the surround module. The following config is recommended for Dune . The setup utility should auto-detect AdLib Gold and the surround module correctly with these settings. [sblaster] sbtype = sb16 oplmode = opl3gold","title":"AdLib Gold Surround Module emulation"},{"location":"downloads/release-notes/0.79.0/#sound-card-output-filter-emulation","text":"Most DOS-era sound cards feature an output low-pass filter (and sometimes a high-pass filter too) that play an important role in giving their sound its character. DOSBox Staging can now accurately emulate these analog output stage filters for all supported sound devices.","title":"Sound card output filter emulation"},{"location":"downloads/release-notes/0.79.0/#sound-blaster","text":"For backward compatibility reasons, the sb_filter config parameter defaults to the newly introduced modern filter, which uses the simple linear interpolation method of previous DOSBox versions. To turn on accurate analog output filter emulation, set the sb_filter to auto . This will set the correct filters for each Sound Blaster model depending on the sb_type value. You can also set a model-specific filter manually if you wish, e.g. this is how to use a Sound Blaster 16 but with Sound Blaster Pro filters: [sblaster] sbtype = sb16 sb_filter = sbpro1 Some Sound Blaster models can toggle the filter on and off in software; you can force the filter to be always on by setting sb_filter_always_on to true . OPL and CMS filters are also accurately emulated; please refer to the descriptions of the opl_filter and cms_filter config parameters for further details.","title":"Sound Blaster"},{"location":"downloads/release-notes/0.79.0/#small-speaker-systems","text":"Filters are enabled by default for all small-speaker audio systems (PC Speaker, PS/1 Audio, Tandy, and the various LPT DAC options). Depending on the particular device, these filters either emulate the analog output filters of the original device, or the sound coming out of a small band-limited speaker in an acoustic environment. Either way, the result is a more period-accurate and pleasant listening experience, especially on headphones. Small-speaker filters are controlled by the following config parameters: lpt_dac_filter pcspeaker_filter ps1audio_dac_filter ps1audio_filter tandy_dac_filter tandy_filter","title":"Small-speaker systems"},{"location":"downloads/release-notes/0.79.0/#custom-filters","text":"Advanced users can specify custom filter settings for any of the supported sound devices. You can specify either a high-pass filter, a low-pass filter, or both at the same time using the following format TYPE ORDER FREQ [TYPE ORDER FREQ] where TYPE can be hpf (high-pass) or lpf (low-pass), ORDER is the order of the filter from 1 to 16 (1 st order results in a 6dB per octave slope, 2 nd order in a 12dB per octave slope, etc.), and FREQ is the filter\u2019s cutoff frequency in Hz. For example, to use a 2 nd order (12dB/oct) low-pass filter at 8 kHz for the Sound Blaster: sb_filter = lpf 2 8000 To use a 3 rd order (18dB/oct) high-pass filter at 120 Hz, and a 1 st order (6dB/oct) low-pass filter at 6.5 kHz for the PC Speaker: pcspeaker_filter = hpf 3 120 lfp 1 6500 In addition to the sound devices mentioned above, you use custom filters even with devices that don\u2019t filter the output in the original hardware (e.g. GUS, MT-32), and the FluidSynth virtual MIDI device via the following config parameters: fsynth_filter gus_filter innovation_filter mt32_filter","title":"Custom filters"},{"location":"downloads/release-notes/0.79.0/#crossfeed","text":"Listening to audio material on headphones where certain sounds are only present in either the left or the right channel can be a rather distracting and unpleasant experience. This is most noticeable on certain Dual OPL game soundtracks and tracker music (e.g. MOD, XM, S3M, IT, etc.) The new crossfeed feature remedies that; by enabling crossfeed in the [mixer] section, a certain percentage of the left channel is mixed into the right, and vice versa. The default crossfeed strength is 40% which is a good general setting, but you can provide a custom percentage value as well (e.g. crossfeed = 55 ). The amount of crossfeed can be fine-tuned per individual channels via mixer commands; please type MIXER /? in the DOSBox prompt for further details.","title":"Crossfeed"},{"location":"downloads/release-notes/0.79.0/#reverb-and-chorus","text":"","title":"Reverb and chorus"},{"location":"downloads/release-notes/0.79.0/#reverb","text":"One of the most exciting new audio features is the ability to add reverb (the emulation of real acoustic spaces) and chorus effects to any mixer channel. This can add a lot of atmosphere to dry-sounding synth soundtracks (typically OPL music) and elevate them to a whole new level! Enabling reverb and chorus processing is especially useful for headphone-listening. The quickest way to enable the reverb effect globally is to put reverb = on in the [mixer] config section. This will add reverb to all synth channels (e.g. PC Speaker, OPL, CMS), and a lesser amount to digital audio channels (e.g. Sound Blaster, GUS). While the default setting works well in most games, it\u2019s highly recommended to experiment with the five available reverb presets to find the optimal setting for each game: tiny simulates the sound of a small integrated speaker in a domestic room. This preset is specifically tailored for small-speaker audio systems (PC Speaker, Tandy, PS/1 Audio, and LPT DAC devices). small adds a subtle sense of space; it\u2019s best suited for games that use a single synth channel (typically OPL) for both the music and the sound effects. medium is the default preset; it\u2019s a middle-of-the-road setting that works well with a wide variety of games. large is a large hall-style reverb that is recommended for games that use separate audio channels for music and digital audio (e.g. OPL audio and Sound Blaster digital sound.) huge is a stronger variant of the large hall preset which is ideal for slower-paced, atmospheric music.","title":"Reverb"},{"location":"downloads/release-notes/0.79.0/#chorus","text":"Another way to add a sense of space to the sound is by enabling the chorus effect . This adds stereo movement and increases the perceived stereo width, which is especially noticeable on purely mono signals on headphones (e.g. PC Speaker or OPL2 music). To enable it, just put chorus = on into the [mixer] config section, or select one of three predefined chorus strength presets, light , normal or strong . Similarly to crossfeed, per-channel reverb and chorus settings can be tweaked by mixer commands; please type MIXER /? in the DOSBox prompt for details. Audio Examples Naturally, you can combine chorus and reverb, and it\u2019s not only possible to do so, but highly recommended for achieving the best results! The below recordings showcase how crossfeed, reverb, chorus, and output stage filters can work in tandem to give old DOS game soundtracks a new life. The exact settings used for these recordings are documented on the wiki , along with suggested audio configs for many other games. Make sure to check them out and experiment with the settings yourself! \ud83d\ude0e \ud83d\udd09 \ud83c\udfa7 Your browser does not support the video element. Alone in the Dark (1992, floppy version) \u2014 introduction Game Type Audio Example Alone in the Dark (floppy version) OPL2 Your browser does not support the audio element. Warcraft: Orcs & Humans OPL3 Your browser does not support the audio element. Dungeon Master II: The Legend of Skullkeep Dual OPL2 Your browser does not support the audio element. Ultima Underworld I: The Stygian Abyss Dual OPL2 Your browser does not support the audio element. Elvira: Mistress of the Dark Dual OPL2 Your browser does not support the audio element. Skate or Die! Tandy Your browser does not support the audio element. Zak McKracken and the Alien Mindbenders Tandy Your browser does not support the audio element. Budokan: The Martial Spirit CMS Your browser does not support the audio element. The Secret of Monkey Island CMS Your browser does not support the audio element.","title":"Chorus"},{"location":"downloads/release-notes/0.79.0/#master-compressor","text":"An auto-levelling dynamic range compressor has been introduced to the master channel to ensure that the audio output never gets distorted, no matter how high the volume levels are. This is on by default and is virtually transparent when the output is not driven into clipping. However, purists can disable it by setting compressor to off , and then ensure correct non-clipping output levels manually.","title":"Master compressor"},{"location":"downloads/release-notes/0.79.0/#general-mixer-improvements","text":"The mixer now uses a full floating-point processing path internally, which means you can no longer overload individual mixer channels into clipping by using high per-channel volume settings. As long as the summed master output is not clipping, it\u2019s guaranteed that nothing else will. A fixed high-pass filter at 20 Hz has been introduced right before the final output that gets rid of any DC-offset and subsonic rumble globally. The MIXER command has received an overhaul too. First of all, the status output looks better, and the following improvements have been made: Now you can set reverb, chorus, and crossfeed levels per mixer channel; type MIXER /? in the DOSBox prompt for further details. The FM channel has been renamed to OPL . The SPKR channel has been renamed to PCSPEAKER . The sample rate column has been removed (it served no useful purpose, and the displayed values were often technically correct but misleading). For a high-level overview of the new mixer architecture, please refer to this diagram .","title":"General mixer improvements"},{"location":"downloads/release-notes/0.79.0/#one-opl-mode-to-rule-them-all","text":"NukedOPL has long been the default OPL mode in Staging. As it\u2019s basically a bit-perfect emulation of the Yamaha YMF262 OPL3 chip , and it runs fast enough even on low-end hardware such as the Raspberry Pi 4, all other less accurate OPL emulation modes have been removed.","title":"\"One OPL mode to rule them all\" &#128141;"},{"location":"downloads/release-notes/0.79.0/#fluidsynth-configuration-changes","text":"","title":"FluidSynth configuration changes"},{"location":"downloads/release-notes/0.79.0/#fluidsynth-reverb-and-chorus","text":"Due to the introduction of the new mixer-level reverb and chorus effects , the FluidSynth reverb and chorus config parameters have been renamed to fsynth_reverb and fsynth_chorus , respectively. To maintain backward compatibility with existing configurations, the FluidSynth reverb and chorus effects are enabled by default, so all your SoundFonts will sound just like in previous DOSBox versions. If you enable the mixer-level reverb (or chorus) as well (e.g. by putting reverb = on in the [mixer] section), you would get a second round of reverb (or chorus) processing on the FluidSynth output. This is by design as it allows users the greatest level of control over customising SoundFonts (e.g. some would sound best with the FluidSynth reverb only, some with both, etc.) Note In the SF2 format the reverb and chorus amounts are specified on a per-instrument basis, while the mixer-level effects are applied \u201cglobally\u201d to all instruments in the summed FluidSynth output. Therefore, what works best really depends on the particular SoundFont in question and on individual user preference (see this discussion for further technical details).","title":"FluidSynth Reverb and Chorus"},{"location":"downloads/release-notes/0.79.0/#volume-scaling","text":"Previously, it was possible to specify a percentage after the SoundFont\u2019s name in the config to adjust its volume (e.g. soundfont = way_too_loud.sf2 30 ). This was introduced as a workaround for certain loud SoundFonts that tended to clip the mixer channel internally. With the new floating-pointing mixer signal path, it\u2019s no longer possible to drive any of the mixer channels into clipping, therefore this workaround has been deprecated. Please use standard mixer commands to lower the volume of the FSYNTH channel if you wish to do so.","title":"Volume Scaling"},{"location":"downloads/release-notes/0.79.0/#ripas-pc-speaker-patch","text":"We\u2019ve integrated ripa\u2019s impulse-model PC speaker patch alongside DOSBox\u2019s existing (discrete-model) PC speaker implementation, which is still the default. To use it, set the pcspeaker config setting to impulse (or go back to default with discrete ). James-F and VileRancour have mentioned in the linked thread that it generally improves the accuracy of square-wave effects, such as in Commander Keen and Duke Nukem (2D). This patch also can produce sounds when none previously existed, such as in Wizball , as noted by ripsaw8080 . For example, here\u2019s Wizball using the settings below: [mixer] rate = 32000 [speaker] pcspeaker = discrete Your browser does not support the video element. Wizball (1987) \u2014 using discrete PC speaker emulation Note There are some audible regressions and harmonics that still exist in some games, so that\u2019s why this is an alternative and not the default.","title":"ripa's PC speaker patch"},{"location":"downloads/release-notes/0.79.0/#parallel-port-dac-models-disney-covox-and-stereo-on-1","text":"Those familiar with DOSBox know that these three devices are emulated with the universal disney = true setting. Like sbtype , we wanted the model of LPT DAC to be configurable, and so Staging\u2019s deprecated the disney setting in favour of lpt_dac that takes any of the following: disney , for the Disney Sound Source covox , for the Covox Speech Thing ston1 , for the Stereo-on-1 DAC device off/none , to disable the DAC (default) This is paired with a corresponding filter setting, lpt_dac_filter , which approximates how the original device sounded. This means that the Disney Sound Source (which included a little speaker inside it) will sound a lot like you might remember. lpt_dac Examples (ModPlay Pro & Star Control II\u2019s 8-bit Pkunk MOD) disney Your browser does not support the audio element. covox Your browser does not support the audio element. ston1 Your browser does not support the audio element. Like the other audio filters settings, the lpt_dac_filter can be toggled on, off, or customised.","title":"Parallel port DAC models: Disney, Covox, and Stereo-On-1"},{"location":"downloads/release-notes/0.79.0/#audio-mute-and-pause","text":"The audio stream can now be manually muted with Ctrl + F8 (or Cmd + F8 on macOS). You can also mute the audio automatically when DOSBox Staging goes to the background with this config setting: [sdl] mute_when_inactive = true Or you can pause emulation entirely when in the background with: [sdl] pause_when_inactive = true","title":"Audio mute and pause"},{"location":"downloads/release-notes/0.79.0/#graphical-improvements","text":"","title":"Graphical improvements"},{"location":"downloads/release-notes/0.79.0/#shader-reload-shortcut","text":"As DOSBox Staging currently lacks a shader preset system, tweaking shader parameters can only be accomplished by making changes to the shader source files themselves. Previously, you had to restart DOSBox to see the effects of such changes, which made fine-tuning shaders quite cumbersome, to say the least. Now you can just use the Ctrl + F2 shortcut ( Cmd + F2 on macOS) to reload the current shader at any time. Progress! \ud83d\ude0e","title":"Shader reload shortcut"},{"location":"downloads/release-notes/0.79.0/#cga-palette-override","text":"Now it is possible to override the default, canonical interpretation of the 16-colour CGA/EGA RGBI palette. The feature overrides the CGA colours in any CGA/EGA-like mode, so it even works in CGA/EGA modes with an emulated VGA or TGA (Tandy) graphics adapter. Several presets have been included (e.g. Amiga and Atari ST colours for Sierra games, and various CGA/EGA monitor emulations), and you can specify custom palettes as well. Make sure to check out the description of the cga_colors config parameter for the list of available presets (you can read more about them here ). Defender of the Crown tandy-warm emulates the colours as they appear on an actual Tandy monitor, which results in more subdued and pleasant colours. This is especially apparent on the greens. default tandy-warm Gold Rush The Amiga/Atari ST ports of Sierra AGI games feature a tweaked CGA palette with improved skin tones and sky colours. default agi-amigaish Zak McKracken and the Alien Mindbenders Now you can play the PC version of this classic adventure with Tandy sound and Commodore 64 colours! default colodore","title":"CGA palette override"},{"location":"downloads/release-notes/0.79.0/#scaled-image-quality-improvements","text":"When the image is scaled by non-integer ratios (e.g. when aspect correction is enabled with the default sharp OpenGL shader), previously the interpolation was performed in a gamma-incorrect way, leading to various unwanted artifacts. These were most noticeable on checkerboard dither patterns (used frequently in EGA games), appearing as interference (moir\u00e9) patterns, and on high-contrast antialiased text (e.g. regular black text on white background appeared bold). macOS notes All Mac browsers tend to display the below images with incorrect gamma on the built-in MacBook displays, which makes the \u201cbad\u201d images look less wrong, and there are slight interference patterns on the \u201cgood\u201d images. Please download the images and view them in the Preview app instead, which displays them correctly. Time Quest Good Bad Space Quest III: The Pirates of Pestulon Good Bad Windwalker Good Bad","title":"Scaled image quality improvements"},{"location":"downloads/release-notes/0.79.0/#high-dpi-on-macos","text":"The backstory: DOSBox Staging uses OpenGL output with the sharp bilinear scaling shader to keep the picture crisp no matter how big or small the image is, and minimise blurring on pixel transitions. Due to the way macOS handles DPI scaling, the image was drawn at a much lower resolution, usually just a quarter of the window size. Then it was stretched by the system, producing an unpleasantly mushy presentation. But we want our pixels to be so sharp they could cut one\u2019s eyes Before After Now DOSBox Staging can handle high DPI displays, be it Retina or not, so you and shaders alike can see all the (physical) pixels. Please note that this is currently experimental: only macOS is currently supported, and we haven\u2019t thoroughly tested multi-display setups. Please report any weird behaviour! Support for Windows will come in the future, and for Linux, it is still uncertain. Also note that due to the way rendering is currently implemented, you may observe lowered performance on higher resolution displays, especially when running off integrated graphics. This might be remedied in the future as well.","title":"High DPI on macOS"},{"location":"downloads/release-notes/0.79.0/#window-transparency-support","text":"There might be situations where you want to place the DOSBox Staging window on top of another window while seeing both windows at the same time. Indeed, you can now set the DOSBox Staging window as transparent, with a customised level of window transparency, so that you can see the background window as well. There is a new config option transparency for this, whose valid values are between 0 (no transparency; default) to 90 (high transparency).","title":"Window transparency support"},{"location":"downloads/release-notes/0.79.0/#frame-presentation-modes","text":"DOSBox presents frames when new content is available, which means that sometimes the effective frame rate can vary between 0 FPS (if the screen content isn\u2019t changing) and as fast as the DOS vertical refresh (vblank) rate (typically up to ~70 Hz). We\u2019ll call this presentation mode Variable Frame Rate or VFR . In addition to VFR, DOSBox Staging supports a Constant Frame Rate (CFR) presentation mode, which presents a constant frame rate defined by the emulated DOS rate, as well as variations on both: Synced CFR , which presents a constant frame rate but is synchronised with the host\u2019s refresh rate. This presents only the most recently updated frame when the DOS rate exceeds the host rate. Throttled VFR , which presents a variable frame rate up to the DOS rate throttled to the display\u2019s rate. This presents only the most recently updated frame when the DOS rate exceeds the host rate. By default, DOSBox Staging inspects runtime conditions and picks the optimal presentation mode. Synced CFR mode selected due to vsync-enforced video drivers Although typically not needed, power users might be interested in forcing a given mode or rate, which can be done using the following config settings (which includes detailed descriptions in the conf): [sdl] presentation_mode = auto | cfr | vfr host_rate = auto | sdi | vrr | custom-rate [dosbox] dos_rate = default | host | custom-rate","title":"Frame presentation modes"},{"location":"downloads/release-notes/0.79.0/#dos-shell-improvements","text":"","title":"DOS shell improvements"},{"location":"downloads/release-notes/0.79.0/#piping-from-the-dos-prompt-or-batch-files","text":"DOSBox did not support the piping operation previously, but DOSBox Staging now brings piping support as how it has worked in DOS and most other operating systems. This allows two or more commands to communicate by passing the output text of one command to another as its input text. For example, commands like ECHO Y | CHOICE will work, so that the Y option will be passed as the input of CHOICE command. Chained piping is also supported, such as DIR | SORT | MORE for displaying sorted directory output one screen at a time (provided that you have the SORT and MORE commands from MS-DOS or FreeDOS in your path). If the current directory and C:\\ are both read-only, the environment variable %TEMP% (or %TMP% ) needs to be set within DOS pointing to a writable directory so that piping will work properly (e.g. SET TEMP=C:\\TEMP ).","title":"Piping from the DOS prompt or batch files"},{"location":"downloads/release-notes/0.79.0/#file-attribute-support-and-attrib-command","text":"File attributes contain information about how the files should be used, and in DOS these correspond to Archive ( A ), Read-only ( R ), Hidden ( H ), and System ( S ) attributes. DOSBox Staging now adds support for file attributes through ATTRIB command (type ATTRIB /? for more information about this command) or through DOS API that accesses to file attributes. For example, some game installers and applications make use of file attributes. All file attributes are currently supported except for system and hidden attributes on mounted local drives for non-Windows platforms.","title":"File attribute support and ATTRIB command"},{"location":"downloads/release-notes/0.79.0/#default-choices-for-the-choice-command","text":"The CHOICE command allows you to choose from a list of options, but sometimes you want to have some default choice if no selection is made within the specific time period. DOSBox Staging now allows you to do this, by specifying the /T option which includes a default choice and the time period in seconds. For example, CHOICE /C:ABC /T:B,2 will default to the choice B (among A , B , and C ) if no key press is made within 2 seconds.","title":"Default choices for the CHOICE command"},{"location":"downloads/release-notes/0.79.0/#mount-improvements","text":"","title":"Mount improvements"},{"location":"downloads/release-notes/0.79.0/#physical-cd-rom-mount-support","text":"Mounting physical CDs is now (re-)implemented in DOSBox Staging for better compatibility with games like Under a Killing Moon , System Shock , and The Pandora Directive . The feature is supported in DOSBox SVN but was forced to be dropped from DOSBox Staging earlier during the SDL2 migration process. We\u2019ve brought it back by using the SDL1 CD support code as an external library, plus restoring the main SDL CD interface from DOSBox. To use the feature, execute the command mount -cd to list all CD drives and their numbers, and use -usecd NUMBER parameter to specify a CD drive NUMBER , just like you would do in DOSBox SVN. Playing CD audio tracks from physical discs is also supported in Windows as with DOSBox SVN.","title":"Physical CD-ROM mount support"},{"location":"downloads/release-notes/0.79.0/#read-only-disk-image-mount-support","text":"You might have encountered the problem previously that you could not mount write-protected disk images, which happened simply because DOSBox Staging required write access to mount disk images. Sometimes the user may also want to mount a disk image in a read-only manner (so that the content in the disk image will not be changed inside the emulator), even if the disk image itself is not write-protected. We have realised that in either case the requirement for write access is not needed for mounting disk images, so we have added support for mounting them in a read-only manner, either when the disk image files are read-only or when the -ro flag is specified by the users.","title":"Read-only disk image mount support"},{"location":"downloads/release-notes/0.79.0/#z-drive-customisation-and-directory-support","text":"The internal Z drive that is automatically mounted when you launch DOSBox Staging is now fully customisable, allowing users to add their own files or programs to the drive by putting them in the drivez subdirectory inside the DOSBox Staging program directory. Files already existing on the Z drive will be replaced by the user-provided ones, e.g. you can use your own MEM.COM or KEYB.COM commands instead of the default ones on the Z drive. Moreover, support for one-level subdirectories has been added, allowing users to better organise their files, resulting in a cleaner-looking Z drive. The drive\u2019s contents can be refreshed via the RESCAN command to reflect any changes made to it at the host OS level.","title":"Z-drive customisation and directory support"},{"location":"downloads/release-notes/0.79.0/#imgmount-wildcard-support","text":"The IMGMOUNT command allows you to mount disk or CD images, but sometimes you may want to mount multiple images to a single drive, swappable via a keyboard shortcut. Previously you had to specify the names of the all the image files one by one, even if they have some patterns in common (like DISK1.IMG , DISK2.IMG , DISK3.IMG , etc). IMGMOUNT command now supports wildcards for mounting image files, so that you can just specify a file pattern that matches all the image files that you want to include. For example, the command IMGMOUNT a d:\\*.img -t floppy will mount all image files with the IMG extension on D:\\ as floppy images.","title":"IMGMOUNT wildcard support"},{"location":"downloads/release-notes/0.79.0/#automount-of-resource-drives","text":"Directories can now be automounted, provided the automount config setting is enabled (which it is, by default). These automount directories are single-letter directories, a through y representing the mounted drive letter (where z is reserved for DOSBox\u2019s drive) placed inside a local drives/ directory, relative to the startup location. This drives/ directory can also be placed in a scanned resource location, like your DOSBox config directory or the release package\u2019s resources/ area. Each drive can be customised with an accompanying <letter>.conf to define its mount type , label , and path . For example, to mount a local drives/d/ directory as a D: CD-ROM with the label SIERRA , the accompanying d.conf would contain: [drive] type = cdrom label = SIERRA A bundled Y: automount is provided in the release\u2019s resources/ directory that bundles a couple FreeDOS 3 rd party tools ( XCOPY.COM , DELTREE.COM , DEBUG.COM ) along with an accompanying y.conf to add it to the PATH. Note This feature doesn\u2019t yet support image mounts, such as .img , .bin/cue , or .iso .","title":"Automount of resource drives"},{"location":"downloads/release-notes/0.79.0/#localisation-improvements","text":"","title":"Localisation improvements"},{"location":"downloads/release-notes/0.79.0/#code-pages-and-keyboard-layouts","text":"The 20-year-old FreeDOS code pages (screen fonts) and keyboard layouts were updated to the latest versions, offering countless new definitions for use. See the full list in the following documentation: List of available code pages List of available keyboard layouts Some notable examples: KEYB bg 3021 \u2014 sets a Bulgarian keyboard layout and code page, with Cyrillic characters encoded according to the MIK standard KEYB cz489 867 \u2014 a so-called programmer keyboard layout (national characters available with Right Alt + 0 - 9 ) for Czech and Slovak languages, with Kamenick\u00fd character encoding - which was more popular than code page 852 KEYB de 858 \u2014 German keyboard, code page with EUR currency symbol KEYB hu 3845 \u2014 Hungarian keyboard, CWI-2 character encoding KEYB pl 668 \u2014 code page specially designed for the Polish language; places national characters on the same positions as standard code page 852 (so it is compatible with current software and text documents), but preserves more table drawing symbols KEYB pl 667 \u2014 Mazovia encoding for Polish language, used mainly by older business software","title":"Code pages and keyboard layouts"},{"location":"downloads/release-notes/0.79.0/#country-support-for-different-date-time-and-decimal-formats","text":"The display formats for dates, times, and decimals were previously fixed to the United States style, but this is no longer the case with this new version. Indeed, DOSBox Staging can now display date, time, and decimal formats according to the system locale and country settings, and for example, in the Canadian French locale (country code 2) the date and time will be displayed as 2002-10-01 12:34 instead of 10-01-2002 12:34p as displayed in the United States locale (country code 1). There is a new config option country which allows you to manually specify the country code for the date, time, and decimal formats. Canadian French locale United States locale","title":"Country support for different date, time, and decimal formats"},{"location":"downloads/release-notes/0.79.0/#local-language-and-keyboard-layout-detection-improvements","text":"On macOS and Windows systems, local languages now are more robustly detected and applied. Note that these can still be manually set using the language and keyboardlayout config settings when needed, or via the KEYB command as mentioned above.","title":"Local language and keyboard layout detection improvements"},{"location":"downloads/release-notes/0.79.0/#input-improvements","text":"","title":"Input improvements"},{"location":"downloads/release-notes/0.79.0/#mouse-wheel-emulation","text":"The built-in mouse driver now provides a wheel support for application aware of CuteMouse extensions; examples include Necromancer\u2019s DOS Navigator and Mpxplay . The original CuteMouse driver version 2.1 is also able to use the PS/2 mouse wheel, just start it with CTMOUSE /o .","title":"Mouse-wheel emulation"},{"location":"downloads/release-notes/0.79.0/#serial-mice-emulation","text":"Numerous serial (COM port) mice are now emulated: original Microsoft mouse with 2 buttons Logitech mouse, with 3 buttons wheel mouse with 3 buttons Mouse Systems mouse (old mouse type, not compatible with the ones listed above), with 3 buttons To enable serial mouse, user the SERIAL 1 mouse command (this will attach it to the COM1 port), or edit the [serial] section of the configuration file. By default, DOSBox Staging tries to determine what kind of mouse the game or application expects. With serial mouse emulation, Windows 1.01 is finally usable!","title":"Serial mice emulation"},{"location":"downloads/release-notes/0.79.0/#windows-31-seamless-mouse-integration","text":"It is now possible to have a seamless mouse integration using one of the following 3 rd party VMware-compatible Windows 3.1 mouse drivers: VBADOS by javispedro \u2014 this one requires a corresponding DOS mouse driver to be started; this driver also provides seamless mouse integration for a real DOS if booted inside DOSBox Staging vmwmouse by NattyNarwhal \u2014 does not require any specific DOS driver and has experimental support for mouse wheel, but current version 0.1 has stability problems For now, only the mouse is supported (no VMware directory sharing, etc.), only using VMware protocol (no VirtualBox-only drivers). Windows 9x VMware mouse driver is not supported.","title":"Windows 3.1 seamless mouse integration"},{"location":"downloads/release-notes/0.79.0/#joystick-calibration-hotkeys","text":"Most DOS games that offer analog joystick control include some form of calibration. However, some games have poor or limited calibration resulting in the joystick\u2019s position drifting or being offset, despite calibration attempts. To compensate for these rare cases, DOSBox Staging lets you adjust the joystick\u2019s X and Y position parameters in real time by enabling the use_joy_calibration_hotkeys setting in the [joystick] config section. Once activated, you can tap Ctrl + arrow-keys or Alt + arrow-keys to adjust either the joystick\u2019s scalar multiplier or absolute offset position, respectively. These let you \u201ccounterbalance\u201d calibration issues in real time. Each tap of the hotkeys will log the calibration values for the given axis. For example: x_calibration = 0.576211,0.02 y_calibration = 0.5474,-0.005 Once you\u2019ve found the optimal settings for a game, the logged calibration values can be placed in the game\u2019s local config file (so the setting are only active for the affected game). Using the above as an example: [joystick] use_joy_calibration_hotkeys = false joy_x_calibration = 0.576211,0.02 joy_y_calibration = 0.5474,-0.005 Note that you can disable the calibration hotkeys once you\u2019ve found settings that work for a problematic game. Here\u2019s a video showing how the calibration hotkeys \u201cpull\u201d the joystick in various directions: Your browser does not support the video element.","title":"Joystick calibration hotkeys"},{"location":"downloads/release-notes/0.79.0/#general-improvements","text":"","title":"General improvements"},{"location":"downloads/release-notes/0.79.0/#command-line-setting-of-configuration-options","text":"Some people may want to temporarily run DOSBox Staging with specified config option(s), and in this new version you can do this with the new -set command-line option when launching DOSBox Staging, instead of having to modify the configuration file before you start DOSBox Staging. For example, the user can temporarily run DOSBox Staging with the EMS memory disabled with the command line dosbox -set ems=false , overriding the setting in the configuration file. The -set option can be specified multiple times for different config options, similar to the -c option which can be used multiple times to run multiple commands after DOSBox Staging starts.","title":"Command-line setting of configuration options"},{"location":"downloads/release-notes/0.79.0/#windows-installer-for-windows-users","text":"Previously, DOSBox Staging was only available as portable zip packages for Windows users, but this has changed in this new version\u2014as a Windows user you can now install DOSBox Staging more easily with the installer, which is especially recommended for new and first-time users. When the installer is used, the installation process will be automated while allowing you to change certain things like the installation folder, and you will be able to launch DOSBox Staging as soon as the installation ends. Shell context menus can also be automatically added for a faster launch of DOSBox Staging from Windows Explorer. Welcome page Icons after installation","title":"Windows installer for Windows users"},{"location":"downloads/release-notes/0.79.0/#configurable-modem-connect-speeds","text":"The soft-modem\u2019s reported connect speed can be customised using the serial port\u2019s baudrate setting. for example: serial1 = modem baudrate:2400 Although this doesn\u2019t change the underlying baud rate, it can help satisfy old modem software if it\u2019s unable to handle (or parse) the larger connect values.","title":"Configurable modem connect speeds"},{"location":"downloads/release-notes/0.79.0/#handling-options-for-memory-faults-in-buggy-games","text":"Extremely rare programming bugs \ud83d\ude09 in some DOS games (and programs) may cause them to accidentally write data beyond their allocated memory region, similar to \u201cpainting outside the lines\u201d. DOSBox is great at catching these instances: it flags the corruption and quits, preventing the program from barreling on and possibly doing more harm such as writing corrupt save games, documents, and so on. DOSBox Staging defaults to this same behaviour, but adds the [dosbox] mcb_fault_strategy config setting: mcb_fault_strategy Behaviour How it affects the buggy game deny Report and quit as soon as a fault is detected (default) Game terminates, no risk of subsequent file corruption repair Report and repair up to 100 sequential faults Game continues, but may still be unstable if its developers expected the corruption report Report the corruption and carry on Game continues, but risks further instability and file corruption allow Carry on without reporting Game continues, but risks further instability and file corruption Only consider this if your game is prone to crashing with MCB chain corruption errors reported in the console log.","title":"Handling options for memory faults in buggy games"},{"location":"downloads/release-notes/0.79.0/#developer-related-improvements","text":"","title":"Developer-related improvements"},{"location":"downloads/release-notes/0.79.0/#self-documenting-bit-twiddling-with-bit_view","text":"We\u2019ve implemented a bit_view C++ class using constant expressions to access a subset of a data-field\u2019s bits, allowing them to be read, written, assigned, flipped, cleared, and tested, without the need to for the usual twiddling operations. Constructing a bit_view is similar to a C bitfield, however unlike C bitfields, bit_view s are free from undefined behaviour and have been proven using GCC\u2019s and Clang\u2019s undefined behaviour sanitisers. There\u2019s more detail and some code examples here .","title":"Self-documenting bit twiddling with bit_view"},{"location":"downloads/release-notes/0.79.0/#memory-block-and-type-size-simplification","text":"DOS\u2019s emulated main memory (up to 64 MiB) and the video card\u2019s memory (to up 8 MiB) are both now allocated statically to reduce pressure on heap storage ( #1714 ). More progress has been made in reducing the use of large variables type-sizes down to purpose-fit sizes per the DOS/hardware specification (typically 8 or 16-bit) ( #1721 ).","title":"Memory block and type size simplification"},{"location":"downloads/release-notes/0.79.0/#tracy-profiler-integration","text":"The Tracy event profiler has been integrated into the build system and basic hooks are in place to log frames and tics. These are only active (and not compiled in) unless Tracy is enabled. Here\u2019s what it looks like: Tracy runtime-profiling DOSBox Staging It can be enabled at build-time with -Dtracy=true . Learn more about it, and how to build the server-side component here: #1749 .","title":"Tracy profiler integration"},{"location":"downloads/release-notes/0.79.0/#continuous-integration-msys2-workflow-improvements","text":"The MSYS2-based workflow has been brought in line with current best practices, which dramatically improved its build time and lead to us now using it to generate the default Windows release binaries.","title":"Continuous integration MSYS2 workflow improvements"},{"location":"downloads/release-notes/0.79.0/#release-package-shell-script","text":"Release packages are now generated using a cross-platform POSIX-compliant shell script. With this logic moved into a script, developers can now easily test the creation of a release package locally, which was previously impossible as that logic only lived in a GitHub-syntax YAML.","title":"Release-package shell script"},{"location":"downloads/release-notes/0.79.0/#static-analysis","text":"The team continues to fix and address static analysis issues as flagged by various analysers. Here are our Coverity Scan metrics to-date:","title":"Static analysis"},{"location":"downloads/release-notes/0.79.0/#translation-status","text":"German: up-to-date Italian: up-to-date Polish: up-to-date Russian: config sections up-to-date French: not updated Spanish: not updated The 0.79.0 configuration file is also in UTF-8 format for the German, Italian, and Polish languages under the package\u2019s resources/translated-0.79-conf-files directory. The messaging system now supports self-documenting markup syntax, which is much easier to read and maintain compared to the previous ANSI escape sequences. Old escape-code style New markup style Escribiendo ^[[34;1mdir^[[0m all\ufffd mostrar\ufffd su contenido. Digita [color=blue]dir[reset] per visualizzarne il contenuto.","title":"Translation status"},{"location":"downloads/release-notes/0.79.0/#notable-fixes","text":"Fixed Ultima Underworld issues with gaming (high polling rate) mice Fixed lockups and input issues with the debugger on macOS and Linux. Note that for those using the debugger on Linux, we recommend building it with SDL 2.0.18, because some input/interaction bugs exist when using newer SDL versions. Fixed colours becoming very dim on newer Intel integrated GPUs due to Intel\u2019s OpenGL drivers not properly handling the sRGB linear colour space. Fixed a memory-read race condition present during the splash-image display, which also reduced start-up time by around 200 ms. Fixed display of the low-resolution halfline VESA 2.0 mode used by Extreme Assault through the addition of a new vesa_mode config setting value, named halfline . Named the macOS application \u201cDOSBox Staging.app\u201d per the macOS per Human Interface Guidelines. Fixed a usability trap door when opening the mapper without mouse support: in these cases, the user was unable to exit the mapper. The mapper now only opens when mouse support is enabled.","title":"Notable fixes"},{"location":"downloads/release-notes/0.79.0/#special-thanks","text":"John Novak for all the audio enhancements, mixer cleanup, shader improvements, and code reviews FeralChild64 for the mouse overhaul, code page and layout cleanup and improvements, and code reviews Wengier for the shell improvements, mount and CLI additions, and Windows installer Antti Peltola for providing historic resources, documentation help, and project support shermp for the MSYS2 cleanup, cross-platform packaging script and CI cleanup, ANSI markup system, and code reviews Kirk Klobe for the debugger fixes, Tracy integration, and paging and memory system refinements GranMinigun for the HiDPI additions, video chain fixes, and Russian translations nemo93 for testing 400+ games on the Raspberry Pi Kappa971 for the Italian and configuration file translations, and leading the translation effort Burrito78 for the German translation","title":"Special thanks"},{"location":"downloads/release-notes/0.79.0/#contributors","text":"","title":"Contributors"},{"location":"downloads/release-notes/0.79.0/#maintainers","text":"kcgen John Novak FeralChild64 shermp Wengier","title":"Maintainers"},{"location":"downloads/release-notes/0.79.0/#authors","text":"kcgen John Novak FeralChild64 Wengier shermp Kirk Klobe GranMinigun Patryk Obara ripsaw8080 (DOSBox maintainer) NicknineTheEagle David Reid (dr_lib author, 3 rd party dependency) Leandro Nini (libresidfp author, 3 rd party dependency) Jonathan Campbell (DOSBox-X maintainer) Dean Beeler ripa (DOSBox patch author) Keenan Weaver Dennis L\u00fchring IPeluchito Otto Liljalaakso Peter Ferrie arrowgent gulrak hunterk","title":"Authors"},{"location":"downloads/release-notes/0.79.0/#translators","text":"Burrito78 (German) FeralChild64 (Polish) GranMinigun (Russian) Kappa971 (Italian)","title":"Translators"},{"location":"downloads/release-notes/0.79.0/#sponsors","text":"Antti Peltola: 3,000 USD during the 0.79 development cycle Wengier","title":"Sponsors"},{"location":"downloads/release-notes/0.79.0/#backers","text":"Burrito78 Hugo Locurcio Thank you to our financial contributors who allow us to purchase hardware, licenses, and other non-trivial expenses to keep the team and project going. To support our work, donate to our GitHub Sponsors or Open Collective .","title":"Backers"},{"location":"downloads/release-notes/0.79.0/#thank-you","text":"We are extremely grateful for all contributions, including the invaluable improvements merged in from the DOSBox project.","title":"Thank you"},{"location":"downloads/release-notes/0.79.1/","text":"0.79.1 release notes \u00b6 Release date: 2022-09-30 Summary \u00b6 We recommend repository maintainers move to 0.79.1, which should be much easier to package. Details in the Packaging fixes section below. We recommend users of our zip, dmg, and Windows installer packages upgrade from 0.79.0 to fix some audio and usability bugs. This maintenance release was made possible by everyone who tried 0.79.0, submitted bugs and pull requests, and tested the updates: thank you! How to upgrade \u00b6 Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped. Fixes and regressions \u00b6 Fixed a CD-DA playback regression in Might and Magic 6 when using multi-image mounts (kcgen) Allowed the Esc key and window-close events to exit from the paused state (Wengier) Fixed a bug that prevented automounted drives from being used by [autoexec] commands (kcgen) Fixed an audio filter reset regression flagged in Blues Brothers: Jukebox Adventure (kcgen) Fixed a 16-bit stereo DMA regression detected when using the Sound Blaster\u2019s modern filter (kcgen) Your browser does not support the video element. 303 by Acme (30fps encoding, 120k cycles, and SB16 using the modern filter) Functionality refinements \u00b6 Improved ability to pipe between applications by using Y: as a temporary path (Wengier) Switched to warning-level logging for MIDI configuration issues (Michael Drueing) Improved the lookup of resources when XDG variables aren\u2019t set correctly (kcgen, Eli Schwartz) Updated the Dutch language to use the US keyboard layout by default (Wengier) Included Xbox compatible controller mapperfiles for 180+ games: conf , wiki (nemo93) Translation improvements \u00b6 Added Dutch translation (Robert de Rooy) Fixed outdated content in German translation (Burrito78) Synced Italian translation (Kappa971) Dropped non-existant KEYB help messages from translation system (Wengier) Replaced more escape codes with markup tags in the translations (Robert de Rooy) Moved the mount type descriptions into the translation system (Wengier) Wiki updates since 0.79.0 \u00b6 New Keymapper page with examples for those with Xbox controllers (nemo93) New FAQ answering questions about audio settings, configuration files, video output, and other topics (nemo93) Notable additions to the UniVBE , Special keys , Getting started , Suggested audio settings , Config examples , AUTOTYPE candidates , and Games with CD-DA, GUS and MIDI audio pages (nemo93) Packaging fixes \u00b6 Adjusted Meson\u2019s FluidSynth dependency spec to match upstream\u2019s packaging (Kirk Klobe) Switched Meson to use SpeexDSP from the host first and fallback to wrap (kcgen) Switched Meson to use shared (instead of static) libraries by default (kcgen) Fixed installation of resources when using meson install (kcgen, Eli Schwartz) Packagers will get shared libs and installed resources with these standard steps: meson setup --prefix /writable/install/path build meson install -C build Thank you \u00b6 Thanks to our financial contributors who allow us to purchase hardware, licenses, and other non-trivial expenses to keep the team and project going. To support our work, donate to our GitHub Sponsors or Open Collective . We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.","title":"0.79.1"},{"location":"downloads/release-notes/0.79.1/#0791-release-notes","text":"Release date: 2022-09-30","title":"0.79.1 release notes"},{"location":"downloads/release-notes/0.79.1/#summary","text":"We recommend repository maintainers move to 0.79.1, which should be much easier to package. Details in the Packaging fixes section below. We recommend users of our zip, dmg, and Windows installer packages upgrade from 0.79.0 to fix some audio and usability bugs. This maintenance release was made possible by everyone who tried 0.79.0, submitted bugs and pull requests, and tested the updates: thank you!","title":"Summary"},{"location":"downloads/release-notes/0.79.1/#how-to-upgrade","text":"Download and launch the latest version: Linux (or Steam on Linux ) Windows macOS At the Z:\\> prompt, run config -wc to write the new configuration file. Any existing settings will be retained, however, extraneous comments will be dropped.","title":"How to upgrade"},{"location":"downloads/release-notes/0.79.1/#fixes-and-regressions","text":"Fixed a CD-DA playback regression in Might and Magic 6 when using multi-image mounts (kcgen) Allowed the Esc key and window-close events to exit from the paused state (Wengier) Fixed a bug that prevented automounted drives from being used by [autoexec] commands (kcgen) Fixed an audio filter reset regression flagged in Blues Brothers: Jukebox Adventure (kcgen) Fixed a 16-bit stereo DMA regression detected when using the Sound Blaster\u2019s modern filter (kcgen) Your browser does not support the video element. 303 by Acme (30fps encoding, 120k cycles, and SB16 using the modern filter)","title":"Fixes and regressions"},{"location":"downloads/release-notes/0.79.1/#functionality-refinements","text":"Improved ability to pipe between applications by using Y: as a temporary path (Wengier) Switched to warning-level logging for MIDI configuration issues (Michael Drueing) Improved the lookup of resources when XDG variables aren\u2019t set correctly (kcgen, Eli Schwartz) Updated the Dutch language to use the US keyboard layout by default (Wengier) Included Xbox compatible controller mapperfiles for 180+ games: conf , wiki (nemo93)","title":"Functionality refinements"},{"location":"downloads/release-notes/0.79.1/#translation-improvements","text":"Added Dutch translation (Robert de Rooy) Fixed outdated content in German translation (Burrito78) Synced Italian translation (Kappa971) Dropped non-existant KEYB help messages from translation system (Wengier) Replaced more escape codes with markup tags in the translations (Robert de Rooy) Moved the mount type descriptions into the translation system (Wengier)","title":"Translation improvements"},{"location":"downloads/release-notes/0.79.1/#wiki-updates-since-0790","text":"New Keymapper page with examples for those with Xbox controllers (nemo93) New FAQ answering questions about audio settings, configuration files, video output, and other topics (nemo93) Notable additions to the UniVBE , Special keys , Getting started , Suggested audio settings , Config examples , AUTOTYPE candidates , and Games with CD-DA, GUS and MIDI audio pages (nemo93)","title":"Wiki updates since 0.79.0"},{"location":"downloads/release-notes/0.79.1/#packaging-fixes","text":"Adjusted Meson\u2019s FluidSynth dependency spec to match upstream\u2019s packaging (Kirk Klobe) Switched Meson to use SpeexDSP from the host first and fallback to wrap (kcgen) Switched Meson to use shared (instead of static) libraries by default (kcgen) Fixed installation of resources when using meson install (kcgen, Eli Schwartz) Packagers will get shared libs and installed resources with these standard steps: meson setup --prefix /writable/install/path build meson install -C build","title":"Packaging fixes"},{"location":"downloads/release-notes/0.79.1/#thank-you","text":"Thanks to our financial contributors who allow us to purchase hardware, licenses, and other non-trivial expenses to keep the team and project going. To support our work, donate to our GitHub Sponsors or Open Collective . We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.","title":"Thank you"},{"location":"downloads/release-notes/0.80.0/","text":"0.80.0 release notes \u00b6 Release date: 2022-12-21 Summary \u00b6 ReelMagic DOS games are now playable thanks to the efforts of Jon Dennis, Chris Guthrie, and Joseph Whittaker, with testing and feedback from Vogons users Uka, DonutKing, and Vetz. Mouse emulation has been improved and now supports up to six independent mice, enabling split-screen play in games like The Settlers and The Settlers II . More settings, including video, audio, and mixer effects, can now be changed on the fly. A new --working-dir command line flag allows DOSBox Staging to launch from a specific working directory. Repo packagers should note that sdl2_image is now a dependency. Read on for all the details! How to upgrade \u00b6 Get started by downloading the latest version and updating your configuration file: Downloads \u00b6 Linux Windows macOS Upgrade your configuration file \u00b6 Launch the new release. At the Z:\\> prompt, run config -wc to write the new configuration file. Note Existing settings will be retained, but extraneous comments will be dropped. Starting with version 0.80, the configuration file is written in the language in which DOSBox Staging was started. To write an English configuration file, launch with the -lang en command-line flag (to start DOSBox Staging in English) and then (re-)write your configuration file. New features \u00b6 ReelMagic support \u00b6 DOS ReelMagic games are now playable thanks to Jon Dennis\u2019s patch with help from Chris Guthrie and Joseph Whittaker. See the [reelmagic] section in your configuration file to enable this. We suggest only enabling ReelMagic emulation on an as-needed basis. Your browser does not support the video element. Return to Zork (1995) \u2014 introduction Jon plans to add DMA support (primarily used by the ReelMagic Windows 3.1x driver and games) when time permits, but most ReelMagic games for DOS are already fully functional and playable. Mouse improvements \u00b6 Dedicated configuration section \u00b6 The mouse configuration has been moved to its own section and additional options have been added. A tool called mousectl is available on Z: for more detailed per-interface mouse configuration. Dual mouse gaming \u00b6 Multiple physical mice can now be mapped to specific emulated mouse interfaces, enabling two-player split-screen gaming ( The Settlers and The Settlers II ) using two USB mice on a single computer. See the wiki article for more details. Your browser does not support the video element. The Settlers II (1996) \u2014 showcasing dual-mouse gaming in action Improved support for 3 rd party INT33 Windows mouse driver \u00b6 javispedro \u2018s INT33 mouse driver for Windows 3.1x is fully supported and no longer requires the use of the separate DOS driver, except when booting from a disk image. The driver also resolves compatibility issues with seamless mouse integration and adds mouse wheel support. See the wiki article for more details. Mouse-related help in the title bar \u00b6 The title bar now displays some short help about the mouse, such as how it can be captured or released. Ability to use local configs via Finder on macOS \u00b6 A new --working-dir <path> command line parameter has been introduced to make it possible to launch DOSBox Staging using local configs from the Finder on macOS. Previously, you had to use DOSBox from the command line to achieve this. How to use it \u00b6 Follow the steps indicated in the DMG package, as shown: Simply copy the included Start DOSBox Staging.command to any folder that contains a local dosbox.conf and then open it ( Start DOSBox Staging.command ) in Finder. DOSBox Staging will act as if started from that folder and will pick up the local config. Note You might be asked to give DOSBox Staging access to the containing folder upon the first launch\u2014just click OK if that dialog comes up. General improvements \u00b6 more.com command \u00b6 The more command is now internally implemented (should be more user-friendly than the original DOS one), and its engine is used for displaying help messages longer than one screen. Your browser does not support the video element. more.com \u2014 Better and Improved\u2122 On-the-fly changes \u00b6 Several settings can be safely adjusted at runtime, including the output video settings, resolution, OpenGL shaders, audio devices, and mixer settings. Your browser does not support the video element. Reconfiguring audio on-the-fly \u2014 changing sound cards in a PC has never been easier! Post-rendered screenshots \u00b6 DOSBox has long provided the Ctrl + F5 hotkey to capture the emulated video card\u2019s image prior to rendering. DOSBox Staging 0.80 now pairs this with Alt + F5 (or Option + F5 on macOS) to capture the as-seen (post-rendered) image. More bundled OpenGL shaders \u00b6 The balance of usable shaders from Tyrells\u2019 CRT shader collection , as well as GranMinigun\u2019s interpolating Catmull\u2013Rom spline shader have been added. Launch DOSBox Staging with the --list-glshaders command-line argument to list the available OpenGL shaders. For example: List of available GLSL shaders ------------------------------ Path '/usr/src/dosbox-staging/build/resources/glshaders' has: |- crt/aperture |- crt/caligari |- crt/easymode |- crt/easymode.tweaked |- crt/fakelottes |- crt/fakelottes.tweaked |- crt/geom |- crt/geom.tweaked |- crt/hyllian-updated |- crt/hyllian |- crt/lottes-fast |- crt/lottes-fast.subtle+gain |- crt/lottes |- crt/lottes.tweaked |- crt/mattias |- crt/pi-vertical |- crt/pi |- crt/yee64 |- crt/yeetron |- crt/zfast |- crt/zfast-composite |- interpolation/catmull-rom |- interpolation/sharp |- scaler/advinterp2x |- scaler/advinterp3x |- scaler/advmame2x |- scaler/advmame3x |- scaler/rgb2x |- scaler/rgb3x |- scaler/scan2x |- scaler/scan3x |- scaler/tv2x `- scaler/tv3x Full PR list of additions and improvements Add --working-dir command line option ( #2122 ) Add a subset of OpenGL shaders from Tyrells repo ( #2137 ) Add direct support for Windows 3.1 seamless mouse driver by javispedro ( #1996 ) Add libraries to support TrueType font rendering ( #2075 ) Add more cleanup on audio device tear-down ( #2099 ) Add mouse related hints to title bar ( #2062 ) Add release drafter support files ( #2036 ) Add screenshots for rendered output (#2073) ( #2078 ) Allow to cancel interactive mouse mapping with a keyboard ( #2067 ) Bump actions/cache from 2 to 3.0.11 ( #2025 ) Bump actions/download-artifact from 2 to 3 ( #2028 ) Bump actions/upload-artifact from 2 to 3 ( #2026 ) Bump fountainhead/action-wait-for-check from 1.0.0 to 1.1.0 ( #2027 ) Bump microsoft/setup-msbuild from 1.1 to 1.2 ( #2123 ) Bump microsoft/setup-msbuild from 1.2 to 1.3 ( #2129 ) Check file-descriptor dependency for Enet, slirp, and ManyMouse ( #2108 ) Cleanup a handful of build issues for clang 10.x and 11.x ( #2096 ) Cleanup issues in ReelMagic flagged by Coverity ( #2084 ) Cleanup overcomplicated data conversions in Unicode support ( #2104 ) Cleanup string IDs of DOS programs ( #2064 ) Compiler warning fix in ManyMouse library ( #2076 ) Contribute a script to convert from YouTube chapters to CD-DA ( #2037 ) Customise the looks of the macOS DMG distribution disk image ( #2127 ) Debloat the binary: use more heap storage and retire the software scalar ( #2101 ) Drop architecture spec from setup-msbuild GitHub action ( #2124 ) Enable DPI scaling on Windows ( #2105 ) Fix a couple CWE issues in ManyMouse ( #2040 ) Fix sentence starting with lower case in MOUNT command help ( #2068 ) Generate linker map file by default ( #2103 ) Implement MORE.COM command ( #2020 ) Import Jon Dennis\u2019s ReelMagic emulation package (#1112) ( #2077 ) Improve detection of atomics, testing of speexDSP, and cleanup README ( #1992 ) Improve interactive mouse mapping ( #2065 ) Improve management of audio devices ( #2095 ) Look for libXInput dependency ( #2085 ) Minor mouse enhancements ( #2060 ) Mouse mapper and configuration mechanism ( #2000 ) Refactor ReelMagic player with per-stream handle registration ( #2086 ) Refactor the ReelMagic audio FIFO class ( #2090 ) Simplifies file search in virtual drive ( #2130 ) Split contributed CD-DA scripts into fetch vs. cue functions ( #2045 ) Sync reSIDfp with upstream ( #2092 ) Update CI against latest deprecations and OS versions ( #2031 ) Update Tracy to v0.9 ( #2069 ) Update the build system wraps and automate CI action maintenance ( #2024 ) Update wraps and PVS Studio ( #2097 ) Use MORE engine for help output ( #2079 ) Use a sdd::unique_ptr to manage the video memory ( #2116 ) Use shared pointers to manage the virtual files ( #2117 ) Bug and regression fixes \u00b6 The mixer\u2019s effects (reverb, chorus, and crossfeed) can now be turned on and off at runtime via the mixer command. FluidSynth\u2019s specific reverb and chorus configuration settings are now applied and will replace the default values that were previously always applied. The modem\u2019s call now has a warm-up period where it will discard data. This fixes a bug noted in Duke Nukem 3D where it would fail its initial handshake on the first try. Full PR list of bug and regression fixes Adapt update-sources.sh script to UTF-8 locale ( #2011 ) Add modem call warm-up period ( #2125 ) Always use VFR presentation mode for text modes ( #2139 ) Avoid shifting negative DAC data in Sound Blaster #2113 (CWE-758) ( #2115 ) Capture the OpenGL screenshot using RGBA pixel format ( #2143 ) Change config -wc to write UTF-8 file ( #1991 ) Drop architecture spec from setup-msbuild GitHub action ( #2124 ) Fix FluidSynth reverb and chorus settings not applying ( #2133 ) Fix a memory leak in the keyboard layout class ( #1985 ) Fix assertion in mouse code for surface screen output ( #2110 ) Fix bitwise shift of negative in DOS date pack call ( #2034 ) Fix character D6 mapping in code page 3021 (Bulgarian MIK encoding) ( #2094 ) Fix several English strings too long to fit on screen ( #1998 ) Fix tab handling in MORE command ( #2102 ) Improve mixer.com CLI handling of volume and effect arguments ( #2021 ) Initialize the window\u2019s canvas size during its setup phase ( #2038 ) Limit bit_view s to 8-bit registers to avoid byte-order assumption ( #1999 ) MORE text output engine fixes ( #2083 ) Parse language options before writing the conf file ( #2001 ) Remove errorneous screen parameters check in mouse code ( #2119 ) Restore 0.79.1 mouse acceleration model in DOS driver ( #2087 ) Restore WheelHasMoved bit in DOS mouse driver to correct value ( #2091 ) Use non-throwing form of std::filesystem calls ( #1995 ) Translation improvements \u00b6 Translations \u00b6 German: up-to-date Italian: up-to-date Polish: up-to-date Russian: up-to-date French: not updated Spanish: not updated Related improvements \u00b6 The title bar is now translatable. The Brazilian ABNT2 slash and question mark keys are now handled. Translations are now stored in UTF-8 and converted to the selected DOS codepage, dropping accents if needed, sometimes even performing crude transliterations (for Latin, Greek, and Cyrillic alphabets DOSBox shouldn\u2019t display garbled messages anymore regardless which codepage is selected). This is especially important for languages where more than one incompatible encoding was used in the DOS era. All FreeDOS codepages are supported. Note that only DOSBox Staging\u2019s own messages benefit from this feature. Full PR list of documentation and translation changes Adapt update-sources.sh script to UTF-8 locale ( #2011 ) Add Dutch tranlation of MOUSECTL ( #2042 ) Add Dutch translation of MORE ( #2048 ) Add handling for ABNT2 slash/question mark key (by rsribeiro) ( #2082 ) Add release drafter support files ( #2036 ) Clarify tandy and ibm5153 cga_colors config descriptions ( #2074 ) Cleanup string IDs of DOS programs ( #2064 ) Convert esc codes to ansi in src ( #2008 ) Delete obsolete translated msgs ( #2058 ) Fix character D6 mapping in code page 3021 (Bulgarian MIK encoding) ( #2094 ) Fix code page 30020 to UTF-8 mapping ( #1988 ) Fix code page 30020 to UTF-8 mapping ( #1988 ) Fix mistakes in switching to ansi text codes ( #2017 ) Fix some errors in the Italian (it-it) translation ( #2029 ) Fixed some ANSI escape codes in the Italian translation ( #2013 ) Fixup nl.txt to match nl.lng ( #2010 ) Improve build instructions ( #2126 ) Improve detection of atomics, testing of speexDSP, and cleanup README ( #1992 ) Minor Dutch translation updates ( #2007 ) Parse language options before writing the conf file ( #2001 ) Support for UTF-8 locale (2 nd generation patch) ( #1884 ) Support for UTF-8 locale (2 nd generation patch) ( #1884 ) Switch messages in MSG_Add from code page 437 to UTF-8 ( #1984 ) Switch messages in MSG_Add from code page 437 to UTF-8 ( #1984 ) Translate new message ( #2032 ) Update Dutch (nl) translation ( #2100 ) Update Dutch (nl) translation ( #2141 ) Update Italian (it-it) translation ( #2005 ) Update Italian (it-it) translation ( #2041 ) Update Italian (it-it) translation ( #2055 ) Update Italian (it-it) translation ( #2072 ) Update Italian (it-it) translation ( #2088 ) Update Polish (pl) translation ( #1982 ) Update Polish (pl) translation ( #2070 ) Update Polish (pl) translation ( #2098 ) Update Polish (pl) translation ( #2118 ) Update Polish (pl) translation, change ANSI escape codes to tags ( #2012 ) Update Russian (ru-RU) translation ( #2120 ) Various Dutch translation updates ( #2016 ) Documentation updates \u00b6 The following wiki articles have been updated: The new Dual Mouse Gaming page documents how to set up dual-mouse working in The Settlers and The Settlers II . The Windows 3.1x page was updated with notes on how to set up the improved mouse driver, and more sound drivers. The new Windows 3.0 page documents how to set up Windows 3.0\u2019s video, sound, MIDI, mouse, and how to print to files. The new Serial Ports page documents all of the serial port settings. The Sound Cards page was overhauled with descriptions and configuration help for all supported sound devices. The Tips & Tricks page was updated with how to generate DOSBox mountable CD-DA content from public domain or Creative Commons licensed YouTube chapters and playlists. Contributors \u00b6 The following commit authors, sponsors, supporters, and backers all invested their time or funds into the 0.80 release effort. Thank you! Contributors are listed in alphabetic order. 0.80 commit authors \u00b6 Burrito78 dreamer drfiemost FeralChild64 GranMinigun javispedro Jkapp76 johnnovak jrdennisoss Kappa971 kcgen kklobe LowLevelMahn memononen nemo93 NicknineTheEagle rderooy rsribeiro tyrells 0.80 sponsors \u00b6 Sponsors who donated more than 100 USD per month to the project: Antti Peltola (1000 USD during the period) Wengier Wu (380 USD during the period) 0.80 backers \u00b6 Backers who donated more than 5 USD per month to the project: Burrito78 Hannu Hartikainen Hugo Locurcio Thank you for considering supporting our work through a donation on GitHub Sponsors or Open Collective . Your contribution helps us purchase the necessary hardware and licenses to keep our project going. Thank you \u00b6 We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.","title":"0.80.0"},{"location":"downloads/release-notes/0.80.0/#0800-release-notes","text":"Release date: 2022-12-21","title":"0.80.0 release notes"},{"location":"downloads/release-notes/0.80.0/#summary","text":"ReelMagic DOS games are now playable thanks to the efforts of Jon Dennis, Chris Guthrie, and Joseph Whittaker, with testing and feedback from Vogons users Uka, DonutKing, and Vetz. Mouse emulation has been improved and now supports up to six independent mice, enabling split-screen play in games like The Settlers and The Settlers II . More settings, including video, audio, and mixer effects, can now be changed on the fly. A new --working-dir command line flag allows DOSBox Staging to launch from a specific working directory. Repo packagers should note that sdl2_image is now a dependency. Read on for all the details!","title":"Summary"},{"location":"downloads/release-notes/0.80.0/#how-to-upgrade","text":"Get started by downloading the latest version and updating your configuration file:","title":"How to upgrade"},{"location":"downloads/release-notes/0.80.0/#downloads","text":"Linux Windows macOS","title":"Downloads"},{"location":"downloads/release-notes/0.80.0/#upgrade-your-configuration-file","text":"Launch the new release. At the Z:\\> prompt, run config -wc to write the new configuration file. Note Existing settings will be retained, but extraneous comments will be dropped. Starting with version 0.80, the configuration file is written in the language in which DOSBox Staging was started. To write an English configuration file, launch with the -lang en command-line flag (to start DOSBox Staging in English) and then (re-)write your configuration file.","title":"Upgrade your configuration file"},{"location":"downloads/release-notes/0.80.0/#new-features","text":"","title":"New features"},{"location":"downloads/release-notes/0.80.0/#reelmagic-support","text":"DOS ReelMagic games are now playable thanks to Jon Dennis\u2019s patch with help from Chris Guthrie and Joseph Whittaker. See the [reelmagic] section in your configuration file to enable this. We suggest only enabling ReelMagic emulation on an as-needed basis. Your browser does not support the video element. Return to Zork (1995) \u2014 introduction Jon plans to add DMA support (primarily used by the ReelMagic Windows 3.1x driver and games) when time permits, but most ReelMagic games for DOS are already fully functional and playable.","title":"ReelMagic support"},{"location":"downloads/release-notes/0.80.0/#mouse-improvements","text":"","title":"Mouse improvements"},{"location":"downloads/release-notes/0.80.0/#dedicated-configuration-section","text":"The mouse configuration has been moved to its own section and additional options have been added. A tool called mousectl is available on Z: for more detailed per-interface mouse configuration.","title":"Dedicated configuration section"},{"location":"downloads/release-notes/0.80.0/#dual-mouse-gaming","text":"Multiple physical mice can now be mapped to specific emulated mouse interfaces, enabling two-player split-screen gaming ( The Settlers and The Settlers II ) using two USB mice on a single computer. See the wiki article for more details. Your browser does not support the video element. The Settlers II (1996) \u2014 showcasing dual-mouse gaming in action","title":"Dual mouse gaming"},{"location":"downloads/release-notes/0.80.0/#improved-support-for-3rd-party-int33-windows-mouse-driver","text":"javispedro \u2018s INT33 mouse driver for Windows 3.1x is fully supported and no longer requires the use of the separate DOS driver, except when booting from a disk image. The driver also resolves compatibility issues with seamless mouse integration and adds mouse wheel support. See the wiki article for more details.","title":"Improved support for 3rd party INT33 Windows mouse driver"},{"location":"downloads/release-notes/0.80.0/#mouse-related-help-in-the-title-bar","text":"The title bar now displays some short help about the mouse, such as how it can be captured or released.","title":"Mouse-related help in the title bar"},{"location":"downloads/release-notes/0.80.0/#ability-to-use-local-configs-via-finder-on-macos","text":"A new --working-dir <path> command line parameter has been introduced to make it possible to launch DOSBox Staging using local configs from the Finder on macOS. Previously, you had to use DOSBox from the command line to achieve this.","title":"Ability to use local configs via Finder on macOS"},{"location":"downloads/release-notes/0.80.0/#how-to-use-it","text":"Follow the steps indicated in the DMG package, as shown: Simply copy the included Start DOSBox Staging.command to any folder that contains a local dosbox.conf and then open it ( Start DOSBox Staging.command ) in Finder. DOSBox Staging will act as if started from that folder and will pick up the local config. Note You might be asked to give DOSBox Staging access to the containing folder upon the first launch\u2014just click OK if that dialog comes up.","title":"How to use it"},{"location":"downloads/release-notes/0.80.0/#general-improvements","text":"","title":"General improvements"},{"location":"downloads/release-notes/0.80.0/#morecom-command","text":"The more command is now internally implemented (should be more user-friendly than the original DOS one), and its engine is used for displaying help messages longer than one screen. Your browser does not support the video element. more.com \u2014 Better and Improved\u2122","title":"more.com command"},{"location":"downloads/release-notes/0.80.0/#on-the-fly-changes","text":"Several settings can be safely adjusted at runtime, including the output video settings, resolution, OpenGL shaders, audio devices, and mixer settings. Your browser does not support the video element. Reconfiguring audio on-the-fly \u2014 changing sound cards in a PC has never been easier!","title":"On-the-fly changes"},{"location":"downloads/release-notes/0.80.0/#post-rendered-screenshots","text":"DOSBox has long provided the Ctrl + F5 hotkey to capture the emulated video card\u2019s image prior to rendering. DOSBox Staging 0.80 now pairs this with Alt + F5 (or Option + F5 on macOS) to capture the as-seen (post-rendered) image.","title":"Post-rendered screenshots"},{"location":"downloads/release-notes/0.80.0/#more-bundled-opengl-shaders","text":"The balance of usable shaders from Tyrells\u2019 CRT shader collection , as well as GranMinigun\u2019s interpolating Catmull\u2013Rom spline shader have been added. Launch DOSBox Staging with the --list-glshaders command-line argument to list the available OpenGL shaders. For example: List of available GLSL shaders ------------------------------ Path '/usr/src/dosbox-staging/build/resources/glshaders' has: |- crt/aperture |- crt/caligari |- crt/easymode |- crt/easymode.tweaked |- crt/fakelottes |- crt/fakelottes.tweaked |- crt/geom |- crt/geom.tweaked |- crt/hyllian-updated |- crt/hyllian |- crt/lottes-fast |- crt/lottes-fast.subtle+gain |- crt/lottes |- crt/lottes.tweaked |- crt/mattias |- crt/pi-vertical |- crt/pi |- crt/yee64 |- crt/yeetron |- crt/zfast |- crt/zfast-composite |- interpolation/catmull-rom |- interpolation/sharp |- scaler/advinterp2x |- scaler/advinterp3x |- scaler/advmame2x |- scaler/advmame3x |- scaler/rgb2x |- scaler/rgb3x |- scaler/scan2x |- scaler/scan3x |- scaler/tv2x `- scaler/tv3x Full PR list of additions and improvements Add --working-dir command line option ( #2122 ) Add a subset of OpenGL shaders from Tyrells repo ( #2137 ) Add direct support for Windows 3.1 seamless mouse driver by javispedro ( #1996 ) Add libraries to support TrueType font rendering ( #2075 ) Add more cleanup on audio device tear-down ( #2099 ) Add mouse related hints to title bar ( #2062 ) Add release drafter support files ( #2036 ) Add screenshots for rendered output (#2073) ( #2078 ) Allow to cancel interactive mouse mapping with a keyboard ( #2067 ) Bump actions/cache from 2 to 3.0.11 ( #2025 ) Bump actions/download-artifact from 2 to 3 ( #2028 ) Bump actions/upload-artifact from 2 to 3 ( #2026 ) Bump fountainhead/action-wait-for-check from 1.0.0 to 1.1.0 ( #2027 ) Bump microsoft/setup-msbuild from 1.1 to 1.2 ( #2123 ) Bump microsoft/setup-msbuild from 1.2 to 1.3 ( #2129 ) Check file-descriptor dependency for Enet, slirp, and ManyMouse ( #2108 ) Cleanup a handful of build issues for clang 10.x and 11.x ( #2096 ) Cleanup issues in ReelMagic flagged by Coverity ( #2084 ) Cleanup overcomplicated data conversions in Unicode support ( #2104 ) Cleanup string IDs of DOS programs ( #2064 ) Compiler warning fix in ManyMouse library ( #2076 ) Contribute a script to convert from YouTube chapters to CD-DA ( #2037 ) Customise the looks of the macOS DMG distribution disk image ( #2127 ) Debloat the binary: use more heap storage and retire the software scalar ( #2101 ) Drop architecture spec from setup-msbuild GitHub action ( #2124 ) Enable DPI scaling on Windows ( #2105 ) Fix a couple CWE issues in ManyMouse ( #2040 ) Fix sentence starting with lower case in MOUNT command help ( #2068 ) Generate linker map file by default ( #2103 ) Implement MORE.COM command ( #2020 ) Import Jon Dennis\u2019s ReelMagic emulation package (#1112) ( #2077 ) Improve detection of atomics, testing of speexDSP, and cleanup README ( #1992 ) Improve interactive mouse mapping ( #2065 ) Improve management of audio devices ( #2095 ) Look for libXInput dependency ( #2085 ) Minor mouse enhancements ( #2060 ) Mouse mapper and configuration mechanism ( #2000 ) Refactor ReelMagic player with per-stream handle registration ( #2086 ) Refactor the ReelMagic audio FIFO class ( #2090 ) Simplifies file search in virtual drive ( #2130 ) Split contributed CD-DA scripts into fetch vs. cue functions ( #2045 ) Sync reSIDfp with upstream ( #2092 ) Update CI against latest deprecations and OS versions ( #2031 ) Update Tracy to v0.9 ( #2069 ) Update the build system wraps and automate CI action maintenance ( #2024 ) Update wraps and PVS Studio ( #2097 ) Use MORE engine for help output ( #2079 ) Use a sdd::unique_ptr to manage the video memory ( #2116 ) Use shared pointers to manage the virtual files ( #2117 )","title":"More bundled OpenGL shaders"},{"location":"downloads/release-notes/0.80.0/#bug-and-regression-fixes","text":"The mixer\u2019s effects (reverb, chorus, and crossfeed) can now be turned on and off at runtime via the mixer command. FluidSynth\u2019s specific reverb and chorus configuration settings are now applied and will replace the default values that were previously always applied. The modem\u2019s call now has a warm-up period where it will discard data. This fixes a bug noted in Duke Nukem 3D where it would fail its initial handshake on the first try. Full PR list of bug and regression fixes Adapt update-sources.sh script to UTF-8 locale ( #2011 ) Add modem call warm-up period ( #2125 ) Always use VFR presentation mode for text modes ( #2139 ) Avoid shifting negative DAC data in Sound Blaster #2113 (CWE-758) ( #2115 ) Capture the OpenGL screenshot using RGBA pixel format ( #2143 ) Change config -wc to write UTF-8 file ( #1991 ) Drop architecture spec from setup-msbuild GitHub action ( #2124 ) Fix FluidSynth reverb and chorus settings not applying ( #2133 ) Fix a memory leak in the keyboard layout class ( #1985 ) Fix assertion in mouse code for surface screen output ( #2110 ) Fix bitwise shift of negative in DOS date pack call ( #2034 ) Fix character D6 mapping in code page 3021 (Bulgarian MIK encoding) ( #2094 ) Fix several English strings too long to fit on screen ( #1998 ) Fix tab handling in MORE command ( #2102 ) Improve mixer.com CLI handling of volume and effect arguments ( #2021 ) Initialize the window\u2019s canvas size during its setup phase ( #2038 ) Limit bit_view s to 8-bit registers to avoid byte-order assumption ( #1999 ) MORE text output engine fixes ( #2083 ) Parse language options before writing the conf file ( #2001 ) Remove errorneous screen parameters check in mouse code ( #2119 ) Restore 0.79.1 mouse acceleration model in DOS driver ( #2087 ) Restore WheelHasMoved bit in DOS mouse driver to correct value ( #2091 ) Use non-throwing form of std::filesystem calls ( #1995 )","title":"Bug and regression fixes"},{"location":"downloads/release-notes/0.80.0/#translation-improvements","text":"","title":"Translation improvements"},{"location":"downloads/release-notes/0.80.0/#translations","text":"German: up-to-date Italian: up-to-date Polish: up-to-date Russian: up-to-date French: not updated Spanish: not updated","title":"Translations"},{"location":"downloads/release-notes/0.80.0/#related-improvements","text":"The title bar is now translatable. The Brazilian ABNT2 slash and question mark keys are now handled. Translations are now stored in UTF-8 and converted to the selected DOS codepage, dropping accents if needed, sometimes even performing crude transliterations (for Latin, Greek, and Cyrillic alphabets DOSBox shouldn\u2019t display garbled messages anymore regardless which codepage is selected). This is especially important for languages where more than one incompatible encoding was used in the DOS era. All FreeDOS codepages are supported. Note that only DOSBox Staging\u2019s own messages benefit from this feature. Full PR list of documentation and translation changes Adapt update-sources.sh script to UTF-8 locale ( #2011 ) Add Dutch tranlation of MOUSECTL ( #2042 ) Add Dutch translation of MORE ( #2048 ) Add handling for ABNT2 slash/question mark key (by rsribeiro) ( #2082 ) Add release drafter support files ( #2036 ) Clarify tandy and ibm5153 cga_colors config descriptions ( #2074 ) Cleanup string IDs of DOS programs ( #2064 ) Convert esc codes to ansi in src ( #2008 ) Delete obsolete translated msgs ( #2058 ) Fix character D6 mapping in code page 3021 (Bulgarian MIK encoding) ( #2094 ) Fix code page 30020 to UTF-8 mapping ( #1988 ) Fix code page 30020 to UTF-8 mapping ( #1988 ) Fix mistakes in switching to ansi text codes ( #2017 ) Fix some errors in the Italian (it-it) translation ( #2029 ) Fixed some ANSI escape codes in the Italian translation ( #2013 ) Fixup nl.txt to match nl.lng ( #2010 ) Improve build instructions ( #2126 ) Improve detection of atomics, testing of speexDSP, and cleanup README ( #1992 ) Minor Dutch translation updates ( #2007 ) Parse language options before writing the conf file ( #2001 ) Support for UTF-8 locale (2 nd generation patch) ( #1884 ) Support for UTF-8 locale (2 nd generation patch) ( #1884 ) Switch messages in MSG_Add from code page 437 to UTF-8 ( #1984 ) Switch messages in MSG_Add from code page 437 to UTF-8 ( #1984 ) Translate new message ( #2032 ) Update Dutch (nl) translation ( #2100 ) Update Dutch (nl) translation ( #2141 ) Update Italian (it-it) translation ( #2005 ) Update Italian (it-it) translation ( #2041 ) Update Italian (it-it) translation ( #2055 ) Update Italian (it-it) translation ( #2072 ) Update Italian (it-it) translation ( #2088 ) Update Polish (pl) translation ( #1982 ) Update Polish (pl) translation ( #2070 ) Update Polish (pl) translation ( #2098 ) Update Polish (pl) translation ( #2118 ) Update Polish (pl) translation, change ANSI escape codes to tags ( #2012 ) Update Russian (ru-RU) translation ( #2120 ) Various Dutch translation updates ( #2016 )","title":"Related improvements"},{"location":"downloads/release-notes/0.80.0/#documentation-updates","text":"The following wiki articles have been updated: The new Dual Mouse Gaming page documents how to set up dual-mouse working in The Settlers and The Settlers II . The Windows 3.1x page was updated with notes on how to set up the improved mouse driver, and more sound drivers. The new Windows 3.0 page documents how to set up Windows 3.0\u2019s video, sound, MIDI, mouse, and how to print to files. The new Serial Ports page documents all of the serial port settings. The Sound Cards page was overhauled with descriptions and configuration help for all supported sound devices. The Tips & Tricks page was updated with how to generate DOSBox mountable CD-DA content from public domain or Creative Commons licensed YouTube chapters and playlists.","title":"Documentation updates"},{"location":"downloads/release-notes/0.80.0/#contributors","text":"The following commit authors, sponsors, supporters, and backers all invested their time or funds into the 0.80 release effort. Thank you! Contributors are listed in alphabetic order.","title":"Contributors"},{"location":"downloads/release-notes/0.80.0/#080-commit-authors","text":"Burrito78 dreamer drfiemost FeralChild64 GranMinigun javispedro Jkapp76 johnnovak jrdennisoss Kappa971 kcgen kklobe LowLevelMahn memononen nemo93 NicknineTheEagle rderooy rsribeiro tyrells","title":"0.80 commit authors"},{"location":"downloads/release-notes/0.80.0/#080-sponsors","text":"Sponsors who donated more than 100 USD per month to the project: Antti Peltola (1000 USD during the period) Wengier Wu (380 USD during the period)","title":"0.80 sponsors"},{"location":"downloads/release-notes/0.80.0/#080-backers","text":"Backers who donated more than 5 USD per month to the project: Burrito78 Hannu Hartikainen Hugo Locurcio Thank you for considering supporting our work through a donation on GitHub Sponsors or Open Collective . Your contribution helps us purchase the necessary hardware and licenses to keep our project going.","title":"0.80 backers"},{"location":"downloads/release-notes/0.80.0/#thank-you","text":"We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.","title":"Thank you"},{"location":"get-involved/","text":"Get involved \u00b6 GitHub repository \u00b6 The DOSBox Staging project is hosted on GitHub . Here you\u2019ll find the full source code and various project related documentation. Send us patches if you improve something! \ud83d\ude04 We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based. Report an issue \u00b6 While we do our best to ensure the quality of our releases, every software has bugs. If you think you\u2019ve spotted one, please report it in our issue tracker (requires a GitHub account). Alternatively, join our Discord channel to discuss the problem with one of our friendly staff members. Wiki \u00b6 The DOSBox Staging Wiki hosted on GitHub contains lots of useful tricks & tips, how-to\u2019s, lists, and guides that can help newcomers and more experienced users alike. We very much recommend perusing it, and if you\u2019ve spotted an error or have something to share, please feel free to contribute to it. Discord \u00b6 Join the team on Discord for a good chat over a virtual beverage of your choice! We only ask you to adhere to our Code of Conduct so every participant can enjoy the discussion. Make a donation \u00b6 DOSBox Staging is an entirely volunteer-based effort\u2014we\u2019re not getting paid for our activities. However, we have some running expenses and need to invest in hardware, licenses, and other non-trivial expenses to keep the team and the project going. If you wish to make a financial contribution to support us, you can do so at our GitHub Sponsors or Open Collective pages. We are grateful for all donations, no matter how big or small!","title":"Get involved"},{"location":"get-involved/#get-involved","text":"","title":"Get involved"},{"location":"get-involved/#github-repository","text":"The DOSBox Staging project is hosted on GitHub . Here you\u2019ll find the full source code and various project related documentation. Send us patches if you improve something! \ud83d\ude04 We are grateful for all community contributions as well as the original DOSBox project, upon which DOSBox Staging is based.","title":" GitHub repository"},{"location":"get-involved/#report-an-issue","text":"While we do our best to ensure the quality of our releases, every software has bugs. If you think you\u2019ve spotted one, please report it in our issue tracker (requires a GitHub account). Alternatively, join our Discord channel to discuss the problem with one of our friendly staff members.","title":" Report an issue"},{"location":"get-involved/#wiki","text":"The DOSBox Staging Wiki hosted on GitHub contains lots of useful tricks & tips, how-to\u2019s, lists, and guides that can help newcomers and more experienced users alike. We very much recommend perusing it, and if you\u2019ve spotted an error or have something to share, please feel free to contribute to it.","title":" Wiki"},{"location":"get-involved/#discord","text":"Join the team on Discord for a good chat over a virtual beverage of your choice! We only ask you to adhere to our Code of Conduct so every participant can enjoy the discussion.","title":" Discord"},{"location":"get-involved/#make-a-donation","text":"DOSBox Staging is an entirely volunteer-based effort\u2014we\u2019re not getting paid for our activities. However, we have some running expenses and need to invest in hardware, licenses, and other non-trivial expenses to keep the team and the project going. If you wish to make a financial contribution to support us, you can do so at our GitHub Sponsors or Open Collective pages. We are grateful for all donations, no matter how big or small!","title":" Make a donation"},{"location":"get-involved/code-of-conduct/","text":"Code of Conduct \u00b6 In order to foster a welcoming, positive, and rewarding experience, we as community members pledge to uphold this code of conduct. Isn\u2019t decent behavior already expected? We want to bring our best to each other as peers, and explicitly documenting our expectations lets us set a high bar for ourselves. Be excellent to each other \u00b6 \u201cExcellent\u201d means we: are wholly inclusive to existing members and newcomers looking to learn or participate. Some may raise questions that have been addressed before. Kindly point them to existing discussions. Everyone was new to a project once. respect your abilities, interests, and personal differences. Our different talents documenting, testing, coding, reviewing, reporting, and/or evangelizing are all valuable to the project. make concise and actionable points to respect your time as a volunteer. We respect each other\u2019s time by keeping the signal-to-noise ratio high, staying on-topic, and being a good house guest: every visit we strive to leave the place in better shape than when we arrived. are kind and assume positive intent , even when we disagree while working towards consensus and achieving the project\u2019s technical goals. educate and illuminate others with something we know more about. We were all beginners once and can teach and learn through feedback and sharing. are open to feedback from others, be it technical points, interpersonal tips, or language/wording suggestions. accept responsibility by apologizing to those affected by our mistakes and graciously accept apologies knowing that mistakes are part of the process. use words carefully because we may not all understand irony or negative sarcasm. We communicate plainly, and we justify our positions objectively and explicitly. leave with class , without drama or bitterness, when resigning for any reason. We champion your rights under the terms of the GPL to fork the code and create a new project\u2014just as we stand on the shoulders of those who gave us the right to create this project. Reporting issues \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team (see below). All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. The project team can be contacted via Discord .","title":"Code of Conduct"},{"location":"get-involved/code-of-conduct/#code-of-conduct","text":"In order to foster a welcoming, positive, and rewarding experience, we as community members pledge to uphold this code of conduct. Isn\u2019t decent behavior already expected? We want to bring our best to each other as peers, and explicitly documenting our expectations lets us set a high bar for ourselves.","title":"Code of Conduct"},{"location":"get-involved/code-of-conduct/#be-excellent-to-each-other","text":"\u201cExcellent\u201d means we: are wholly inclusive to existing members and newcomers looking to learn or participate. Some may raise questions that have been addressed before. Kindly point them to existing discussions. Everyone was new to a project once. respect your abilities, interests, and personal differences. Our different talents documenting, testing, coding, reviewing, reporting, and/or evangelizing are all valuable to the project. make concise and actionable points to respect your time as a volunteer. We respect each other\u2019s time by keeping the signal-to-noise ratio high, staying on-topic, and being a good house guest: every visit we strive to leave the place in better shape than when we arrived. are kind and assume positive intent , even when we disagree while working towards consensus and achieving the project\u2019s technical goals. educate and illuminate others with something we know more about. We were all beginners once and can teach and learn through feedback and sharing. are open to feedback from others, be it technical points, interpersonal tips, or language/wording suggestions. accept responsibility by apologizing to those affected by our mistakes and graciously accept apologies knowing that mistakes are part of the process. use words carefully because we may not all understand irony or negative sarcasm. We communicate plainly, and we justify our positions objectively and explicitly. leave with class , without drama or bitterness, when resigning for any reason. We champion your rights under the terms of the GPL to fork the code and create a new project\u2014just as we stand on the shoulders of those who gave us the right to create this project.","title":"Be excellent to each other"},{"location":"get-involved/code-of-conduct/#reporting-issues","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team (see below). All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. The project team can be contacted via Discord .","title":"Reporting issues"},{"location":"getting-started/","text":"Getting started \u00b6","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"}]}